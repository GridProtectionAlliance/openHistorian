{"version":3,"file":"AlertAmRoutes.b4845b566cbc309618a7.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/gridStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRoute.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/dynamicTable.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmSpecificRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/AmRoutes.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { isUndefined, omitBy } from 'lodash';\nimport { Validate } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, Route } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField, parseMatcher } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { parseInterval, timeOptions } from './time';\n\nconst defaultValueAndType: [string, string] = ['', ''];\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    [] as MatcherFieldValue[]\n  );\n\nconst intervalToValueAndType = (\n  strValue: string | undefined,\n  defaultValue?: typeof defaultValueAndType\n): [string, string] => {\n  if (!strValue) {\n    return defaultValue ?? defaultValueAndType;\n  }\n\n  const [value, valueType] = strValue ? parseInterval(strValue) : [undefined, undefined];\n\n  const timeOption = timeOptions.find((opt) => opt.value === valueType);\n\n  if (!value || !timeOption) {\n    return defaultValueAndType;\n  }\n\n  return [String(value), timeOption.value];\n};\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder' },\n  { label: 'alertname', value: 'alertname' },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupWaitValueType: timeOptions[0].value,\n  groupIntervalValue: '',\n  groupIntervalValueType: timeOptions[0].value,\n  repeatIntervalValue: '',\n  repeatIntervalValueType: timeOptions[0].value,\n  muteTimeIntervals: [],\n};\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: Route | undefined): [FormAmRoute, Record<string, Route>] => {\n  if (!route) {\n    return [emptyRoute, {}];\n  }\n\n  const id = String(Math.random());\n  const id2route = {\n    [id]: route,\n  };\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return [formAmRoute, id2route];\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const [subFormRoute, subId2Route] = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n    Object.assign(id2route, subId2Route);\n  });\n\n  // Frontend migration to use object_matchers instead of matchers\n  const matchers = route.matchers\n    ? route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? []\n    : route.object_matchers?.map(\n        (matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] } as MatcherFieldValue)\n      ) ?? [];\n\n  const [groupWaitValue, groupWaitValueType] = intervalToValueAndType(route.group_wait, ['', 's']);\n  const [groupIntervalValue, groupIntervalValueType] = intervalToValueAndType(route.group_interval, ['', 'm']);\n  const [repeatIntervalValue, repeatIntervalValueType] = intervalToValueAndType(route.repeat_interval, ['', 'h']);\n\n  return [\n    {\n      id,\n      object_matchers: [\n        ...matchers,\n        ...matchersToArrayFieldMatchers(route.match, false),\n        ...matchersToArrayFieldMatchers(route.match_re, true),\n      ],\n      continue: route.continue ?? false,\n      receiver: route.receiver ?? '',\n      overrideGrouping: Array.isArray(route.group_by) && route.group_by.length !== 0,\n      groupBy: route.group_by ?? [],\n      overrideTimings: [groupWaitValue, groupIntervalValue, repeatIntervalValue].some(Boolean),\n      groupWaitValue,\n      groupWaitValueType,\n      groupIntervalValue,\n      groupIntervalValueType,\n      repeatIntervalValue,\n      repeatIntervalValueType,\n      routes: formRoutes,\n      muteTimeIntervals: route.mute_time_intervals ?? [],\n    },\n    id2route,\n  ];\n};\n\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string | undefined,\n  formAmRoute: FormAmRoute,\n  id2ExistingRoute: Record<string, Route>\n): Route => {\n  const existing: Route | undefined = id2ExistingRoute[formAmRoute.id];\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupWaitValueType,\n    groupIntervalValue,\n    groupIntervalValueType,\n    repeatIntervalValue,\n    repeatIntervalValueType,\n  } = formAmRoute;\n\n  const group_by = overrideGrouping && groupBy ? groupBy : [];\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? `${groupWaitValue}${groupWaitValueType}` : undefined;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? `${groupIntervalValue}${groupIntervalValueType}` : undefined;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? `${repeatIntervalValue}${repeatIntervalValueType}` : undefined;\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: formAmRoute.object_matchers.length\n      ? formAmRoute.object_matchers.map((matcher) => [matcher.name, matcher.operator, matcher.value])\n      : undefined,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: formAmRoute.routes.map((subRoute) =>\n      formAmRouteToAmRoute(alertManagerSourceName, subRoute, id2ExistingRoute)\n    ),\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n  };\n\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return omitBy(amRoute, isUndefined);\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string => {\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport const optionalPositiveInteger: Validate<string> = (value) => {\n  if (!value) {\n    return undefined;\n  }\n\n  return !/^\\d+$/.test(value) ? 'Must be a positive integer.' : undefined;\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    timingContainer: css`\n      max-width: ${theme.spacing(33)};\n    `,\n    smallInput: css`\n      width: ${theme.spacing(6.5)};\n    `,\n    linkText: css`\n      text-decoration: underline;\n    `,\n    collapse: css`\n      border: none;\n      background: none;\n      color: ${theme.colors.text.primary};\n    `,\n  };\n};\n","import { cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { Button, Collapse, Field, Form, Input, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n  commonGroupByOptions,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { timeOptions } from '../../utils/time';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteForm: FC<AmRootRouteFormProps> = ({\n  alertManagerSourceName,\n  onCancel,\n  onSave,\n  receivers,\n  routes,\n}) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={{ ...routes, overrideTimings: true, overrideGrouping: true }} onSubmit={onSave}>\n      {({ control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      aria-label=\"Default contact point\"\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link\n                  className={styles.linkText}\n                  href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n                >\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            className={styles.collapse}\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <Field\n              label=\"Group wait\"\n              description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n              invalid={!!errors.groupWaitValue}\n              error={errors.groupWaitValue?.message}\n              data-testid=\"am-group-wait\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder={'30'} />\n                    )}\n                    control={control}\n                    name=\"groupWaitValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group wait type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Group interval\"\n              description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n              invalid={!!errors.groupIntervalValue}\n              error={errors.groupIntervalValue?.message}\n              data-testid=\"am-group-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder={'5'} />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Repeat interval\"\n              description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours.\"\n              invalid={!!errors.repeatIntervalValue}\n              error={errors.repeatIntervalValue?.message}\n              data-testid=\"am-repeat-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder=\"4\" />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        {...field}\n                        className={styles.input}\n                        menuPlacement=\"top\"\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Repeat interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n          </Collapse>\n          <div className={styles.container}>\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={onCancel} type=\"reset\" variant=\"secondary\" fill=\"outline\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getGridStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      font-style: ${theme.typography.fontSize};\n      grid-template-columns: ${theme.spacing(15.5)} auto;\n\n      ${theme.breakpoints.down('md')} {\n        grid-template-columns: 100%;\n      }\n    `,\n    titleCell: css`\n      color: ${theme.colors.text.primary};\n    `,\n    valueCell: css`\n      color: ${theme.colors.text.secondary};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { FC } from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nimport { FormAmRoute } from '../../types/amroutes';\n\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRootRouteReadProps {\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteRead: FC<AmRootRouteReadProps> = ({ routes }) => {\n  const styles = useStyles2(getGridStyles);\n\n  const receiver = routes.receiver || '-';\n  const groupBy = routes.groupBy.join(', ') || '-';\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleCell}>Contact point</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-receiver\">\n        {receiver}\n      </div>\n      <div className={styles.titleCell}>Group by</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-group-by\">\n        {groupBy}\n      </div>\n      <div className={styles.titleCell}>Timings</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-timings\">\n        Group wait: {groupWait} | Group interval: {groupInterval} | Repeat interval: {repeatInterval}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\n\nimport { AmRootRouteForm } from './AmRootRouteForm';\nimport { AmRootRouteRead } from './AmRootRouteRead';\n\nexport interface AmRootRouteProps {\n  isEditMode: boolean;\n  onEnterEditMode: () => void;\n  onExitEditMode: () => void;\n  onSave: (data: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  alertManagerSourceName: string;\n  readOnly?: boolean;\n}\n\nexport const AmRootRoute: FC<AmRootRouteProps> = ({\n  isEditMode,\n  onSave,\n  onEnterEditMode,\n  onExitEditMode,\n  receivers,\n  routes,\n  alertManagerSourceName,\n  readOnly = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  return (\n    <div className={styles.container} data-testid=\"am-root-route-container\">\n      <div className={styles.titleContainer}>\n        <h5 className={styles.title}>\n          Root policy - <i>default for all alerts</i>\n        </h5>\n        {!isEditMode && !readOnly && (\n          <Authorize actions={[permissions.update]}>\n            <Button icon=\"pen\" onClick={onEnterEditMode} size=\"sm\" type=\"button\" variant=\"secondary\">\n              Edit\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <p>\n        All alerts will go to the default contact point, unless you set additional matchers in the specific routing\n        area.\n      </p>\n      {isEditMode ? (\n        <AmRootRouteForm\n          alertManagerSourceName={alertManagerSourceName}\n          onCancel={onExitEditMode}\n          onSave={onSave}\n          receivers={receivers}\n          routes={routes}\n        />\n      ) : (\n        <AmRootRouteRead routes={routes} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    titleContainer: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n    title: css`\n      flex: 100%;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\nexport const EmptyArea: FC = ({ children }) => {\n  const styles = useStyles(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.bg2};\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.xl};\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA: FC<EmptyAreaWithCTAProps> = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}) => {\n  const styles = useStyles(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.bg2};\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.xl};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing.md};\n    `,\n    button: css`\n      margin: ${theme.spacing.md} 0 ${theme.spacing.sm};\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n  Badge,\n  VerticalGroup,\n} from '@grafana/ui';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n  commonGroupByOptions,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n  const muteTimingOptions = useMuteTimingOptions();\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue, watch }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <VerticalGroup justify=\"flex-start\" spacing=\"md\">\n                  <div>Matching labels</div>\n                  {fields.length === 0 && (\n                    <Badge\n                      color=\"orange\"\n                      className={styles.noMatchersWarning}\n                      icon=\"exclamation-triangle\"\n                      text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n                    />\n                  )}\n                  {fields.length > 0 && (\n                    <div className={styles.matchersContainer}>\n                      {fields.map((field, index) => {\n                        const localPath = `object_matchers[${index}]`;\n                        return (\n                          <HorizontalGroup key={field.id} align=\"flex-start\" height=\"auto\">\n                            <Field\n                              label=\"Label\"\n                              invalid={!!errors.object_matchers?.[index]?.name}\n                              error={errors.object_matchers?.[index]?.name?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.name`, { required: 'Field is required' })}\n                                defaultValue={field.name}\n                                placeholder=\"label\"\n                              />\n                            </Field>\n                            <Field label={'Operator'}>\n                              <InputControl\n                                render={({ field: { onChange, ref, ...field } }) => (\n                                  <Select\n                                    {...field}\n                                    className={styles.matchersOperator}\n                                    onChange={(value) => onChange(value?.value)}\n                                    options={matcherFieldOptions}\n                                    aria-label=\"Operator\"\n                                  />\n                                )}\n                                defaultValue={field.operator}\n                                control={control}\n                                name={`${localPath}.operator` as const}\n                                rules={{ required: { value: true, message: 'Required.' } }}\n                              />\n                            </Field>\n                            <Field\n                              label=\"Value\"\n                              invalid={!!errors.object_matchers?.[index]?.value}\n                              error={errors.object_matchers?.[index]?.value?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.value`, { required: 'Field is required' })}\n                                defaultValue={field.value}\n                                placeholder=\"value\"\n                              />\n                            </Field>\n                            <IconButton\n                              className={styles.removeButton}\n                              tooltip=\"Remove matcher\"\n                              name={'trash-alt'}\n                              onClick={() => remove(index)}\n                            >\n                              Remove\n                            </IconButton>\n                          </HorizontalGroup>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <Button\n                    className={styles.addMatcherBtn}\n                    icon=\"plus\"\n                    onClick={() => append(emptyArrayFieldMatcher)}\n                    variant=\"secondary\"\n                    type=\"button\"\n                  >\n                    Add matcher\n                  </Button>\n                </VerticalGroup>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Contact point\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch id=\"continue-toggle\" {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n          </Field>\n          {watch().overrideGrouping && (\n            <Field\n              label=\"Group by\"\n              description=\"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\"\n            >\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    aria-label=\"Group by\"\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={[...commonGroupByOptions, ...groupByOptions]}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n          </Field>\n          {watch().overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group wait value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group wait type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Repeat interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Repeat interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <Field\n            label=\"Mute timings\"\n            data-testid=\"am-mute-timing-select\"\n            description=\"Add mute timing to policy\"\n            invalid={!!errors.muteTimeIntervals}\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Mute timings\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={muteTimingOptions}\n                />\n              )}\n              control={control}\n              name=\"muteTimeIntervals\"\n            />\n          </Field>\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 140px;\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `,\n  };\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AlertmanagerConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { timeIntervalToString } from '../utils/alertmanager';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useAlertManagerSourceName } from './useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  return useMemo(() => {\n    const { result } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n    const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      config?.mute_time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [alertManagerSourceName, amConfigs]);\n}\n","import { css } from '@emotion/css';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, LinkButton, Link, useStyles2, ConfirmModal } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig, MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport {\n  getTimeString,\n  getWeekdayString,\n  getDaysOfMonthString,\n  getMonthsString,\n  getYearsString,\n} from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { AsyncRequestState, initialAsyncRequestState } from '../../utils/redux';\nimport { DynamicTable, DynamicTableItemProps, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\n\ninterface Props {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable: FC<Props> = ({ alertManagerSourceName, muteTimingNames, hideActions }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n  const { result }: AsyncRequestState<AlertManagerCortexConfig> =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    const muteTimings = result?.alertmanager_config?.mute_time_intervals ?? [];\n    const muteTimingsProvenances = result?.alertmanager_config?.muteTimeProvenances ?? {};\n\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: {\n            ...mute,\n            provenance: muteTimingsProvenances[mute.name],\n          },\n        };\n      });\n  }, [\n    result?.alertmanager_config?.mute_time_intervals,\n    result?.alertmanager_config?.muteTimeProvenances,\n    muteTimingNames,\n  ]);\n\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName);\n\n  return (\n    <div className={styles.container}>\n      {!hideActions && <h5>Mute timings</h5>}\n      {!hideActions && (\n        <p>\n          Mute timings are a named interval of time that may be referenced in the notification policy tree to mute\n          particular notification policies for specific times of the day.\n        </p>\n      )}\n      {!hideActions && items.length > 0 && (\n        <Authorize actions={[permissions.create]}>\n          <LinkButton\n            className={styles.addMuteButton}\n            icon=\"plus\"\n            variant=\"primary\"\n            href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          >\n            New mute timing\n          </LinkButton>\n        </Authorize>\n      )}\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={contextSrv.hasPermission(permissions.create)}\n        />\n      ) : (\n        <p>No mute timings configured</p>\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName))}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false, setMuteTimingName: (name: string) => void) {\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const userHasEditPermissions = contextSrv.hasPermission(permissions.update);\n  const userHasDeletePermissions = contextSrv.hasPermission(permissions.delete);\n  const showActions = !hideActions && (userHasEditPermissions || userHasDeletePermissions);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <>\n              {data.name} {data.provenance && <ProvisioningBadge />}\n            </>\n          );\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => renderTimeIntervals(data.time_intervals),\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data }) {\n          if (data.provenance) {\n            return (\n              <div>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"file-alt\" title=\"View mute timing\" />\n                </Link>\n              </div>\n            );\n          }\n          return (\n            <div>\n              <Authorize actions={[permissions.update]}>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"edit\" title=\"Edit mute timing\" />\n                </Link>\n              </Authorize>\n              <Authorize actions={[permissions.delete]}>\n                <IconButton\n                  name={'trash-alt'}\n                  title=\"Delete mute timing\"\n                  onClick={() => setMuteTimingName(data.name)}\n                />\n              </Authorize>\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, setMuteTimingName, showActions, permissions]);\n}\n\nfunction renderTimeIntervals(timeIntervals: TimeInterval[]) {\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years } = interval;\n    const timeString = getTimeString(times);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  addMuteButton: css`\n    margin-bottom: ${theme.spacing(2)};\n    align-self: flex-end;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { Authorize } from '../Authorize';\n\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { MuteTimingsTable } from './MuteTimingsTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && !readOnly && (\n          <Authorize actions={[permissions.create]}>\n            <Button\n              className={styles.addNestedRoutingBtn}\n              icon=\"plus\"\n              onClick={() => {\n                setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n                setIsAddMode(true);\n              }}\n              variant=\"secondary\"\n              type=\"button\"\n            >\n              Add nested policy\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <div className={gridStyles.titleCell}>Mute timings</div>\n      <div className={gridStyles.valueCell}>\n        <MuteTimingsTable\n          alertManagerSourceName={alertManagerSourceName!}\n          muteTimingNames={routes.muteTimeIntervals}\n          hideActions\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import { intersectionWith, isEqual } from 'lodash';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Button, ConfirmModal, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { matcherFieldToMatcher, parseMatchers } from '../../utils/alertmanager';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyArea } from '../EmptyArea';\nimport { Matchers } from '../silences/Matchers';\n\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n  filters?: { queryString?: string; contactPoint?: string };\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const getFilteredRoutes = (routes: FormAmRoute[], labelMatcherQuery?: string, contactPointQuery?: string) => {\n  const matchers = parseMatchers(labelMatcherQuery ?? '');\n\n  let filteredRoutes = routes;\n\n  if (matchers.length) {\n    filteredRoutes = routes.filter((route) => {\n      const routeMatchers = route.object_matchers.map(matcherFieldToMatcher);\n      return intersectionWith(routeMatchers, matchers, isEqual).length > 0;\n    });\n  }\n\n  if (contactPointQuery && contactPointQuery.length > 0) {\n    filteredRoutes = filteredRoutes.filter((route) =>\n      route.receiver.toLowerCase().includes(contactPointQuery.toLowerCase())\n    );\n  }\n\n  return filteredRoutes;\n};\n\nexport const updatedRoute = (routes: FormAmRoute[], updatedRoute: FormAmRoute): FormAmRoute[] => {\n  const newRoutes = [...routes];\n  const editIndex = newRoutes.findIndex((route) => route.id === updatedRoute.id);\n\n  if (editIndex >= 0) {\n    newRoutes[editIndex] = {\n      ...newRoutes[editIndex],\n      ...updatedRoute,\n    };\n  }\n  return newRoutes;\n};\n\nexport const deleteRoute = (routes: FormAmRoute[], routeId: string): FormAmRoute[] => {\n  return routes.filter((route) => route.id !== routeId);\n};\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({\n  isAddMode,\n  onCancelAdd,\n  onChange,\n  receivers,\n  routes,\n  filters,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [deletingRouteId, setDeletingRouteId] = useState<string | undefined>(undefined);\n  const [expandedId, setExpandedId] = useState<string | number>();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canEditRoutes = contextSrv.hasPermission(permissions.update);\n  const canDeleteRoutes = contextSrv.hasPermission(permissions.delete);\n\n  const showActions = !readOnly && (canEditRoutes || canDeleteRoutes);\n\n  const expandItem = useCallback((item: RouteTableItemProps) => setExpandedId(item.id), []);\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => {\n        return item.data.object_matchers.length ? (\n          <Matchers matchers={item.data.object_matchers.map(matcherFieldToMatcher)} />\n        ) : (\n          <span>Matches all alert instances</span>\n        );\n      },\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => (item.data.overrideGrouping && item.data.groupBy.join(', ')) || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => item.data.receiver || '-',\n      size: 5,\n    },\n    {\n      id: 'muteTimings',\n      label: 'Mute timings',\n      renderCell: (item) => item.data.muteTimeIntervals.join(', ') || '-',\n      size: 5,\n    },\n    ...(!showActions\n      ? []\n      : [\n          {\n            id: 'actions',\n            label: 'Actions',\n            // eslint-disable-next-line react/display-name\n            renderCell: (item) => {\n              if (item.renderExpandedContent) {\n                return null;\n              }\n\n              const expandWithCustomContent = () => {\n                expandItem(item);\n                setEditMode(true);\n              };\n\n              return (\n                <>\n                  <HorizontalGroup>\n                    <Button\n                      aria-label=\"Edit route\"\n                      icon=\"pen\"\n                      onClick={expandWithCustomContent}\n                      size=\"sm\"\n                      type=\"button\"\n                      variant=\"secondary\"\n                    >\n                      Edit\n                    </Button>\n                    <IconButton\n                      aria-label=\"Delete route\"\n                      name=\"trash-alt\"\n                      onClick={() => {\n                        setDeletingRouteId(item.data.id);\n                      }}\n                      type=\"button\"\n                    />\n                  </HorizontalGroup>\n                </>\n              );\n            },\n            size: '100px',\n          } as RouteTableColumnProps,\n        ]),\n  ];\n\n  const filteredRoutes = useMemo(\n    () => getFilteredRoutes(routes, filters?.queryString, filters?.contactPoint),\n    [routes, filters]\n  );\n\n  const dynamicTableRoutes = useMemo(\n    () => prepareItems(isAddMode ? routes : filteredRoutes),\n    [isAddMode, routes, filteredRoutes]\n  );\n\n  // expand the last item when adding or reset when the length changed\n  useEffect(() => {\n    if (isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(dynamicTableRoutes[dynamicTableRoutes.length - 1].id);\n    }\n    if (!isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(undefined);\n    }\n  }, [isAddMode, dynamicTableRoutes]);\n\n  if (routes.length > 0 && filteredRoutes.length === 0) {\n    return (\n      <EmptyArea>\n        <p>No policies found</p>\n      </EmptyArea>\n    );\n  }\n\n  return (\n    <>\n      <DynamicTable\n        cols={cols}\n        isExpandable={true}\n        items={dynamicTableRoutes}\n        testIdGenerator={() => 'am-routes-row'}\n        onCollapse={collapseItem}\n        onExpand={expandItem}\n        isExpanded={(item) => expandedId === item.id}\n        renderExpandedContent={(item: RouteTableItemProps) =>\n          isAddMode || editMode ? (\n            <AmRoutesExpandedForm\n              onCancel={() => {\n                if (isAddMode) {\n                  onCancelAdd();\n                }\n                setEditMode(false);\n              }}\n              onSave={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n\n                setEditMode(false);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n            />\n          ) : (\n            <AmRoutesExpandedRead\n              onChange={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n              readOnly={readOnly}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          )\n        }\n      />\n      <ConfirmModal\n        isOpen={!!deletingRouteId}\n        title=\"Delete notification policy\"\n        body=\"Deleting this notification policy will permanently remove it. Are you sure you want to delete this policy?\"\n        confirmText=\"Yes, delete\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          if (deletingRouteId) {\n            const newRoutes = deleteRoute(routes, deletingRouteId);\n            onChange(newRoutes);\n            setDeletingRouteId(undefined);\n          }\n        }}\n        onDismiss={() => setDeletingRouteId(undefined)}\n      />\n    </>\n  );\n};\n","import { DynamicTableItemProps } from '../components/DynamicTable';\n\nexport const prepareItems = <T = unknown>(\n  items: T[],\n  idCreator?: (item: T) => number | string\n): Array<DynamicTableItemProps<T>> =>\n  items.map((item, index) => ({\n    id: idCreator?.(item) ?? index,\n    data: item,\n  }));\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Input, Label, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyArrayFieldMatcher, emptyRoute } from '../../utils/amroutes';\nimport { getNotificationPoliciesFilters } from '../../utils/misc';\nimport { EmptyArea } from '../EmptyArea';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { MatcherFilter } from '../alert-groups/MatcherFilter';\n\nimport { AmRoutesTable } from './AmRoutesTable';\n\nexport interface AmSpecificRoutingProps {\n  alertManagerSourceName: string;\n  onChange: (routes: FormAmRoute) => void;\n  onRootRouteEdit: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n}\n\ninterface Filters {\n  queryString?: string;\n  contactPoint?: string;\n}\n\nexport const AmSpecificRouting: FC<AmSpecificRoutingProps> = ({\n  alertManagerSourceName,\n  onChange,\n  onRootRouteEdit,\n  receivers,\n  routes,\n  readOnly = false,\n}) => {\n  const [actualRoutes, setActualRoutes] = useState([...routes.routes]);\n  const [isAddMode, setIsAddMode] = useState(false);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canCreateNotifications = contextSrv.hasPermission(permissions.create);\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n\n  const [filters, setFilters] = useState<Filters>({ queryString, contactPoint });\n\n  useDebounce(\n    () => {\n      setSearchParams({ queryString: filters.queryString, contactPoint: filters.contactPoint });\n    },\n    400,\n    [filters]\n  );\n\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setFilters({ queryString: undefined, contactPoint: undefined });\n    setSearchParams({ queryString: undefined, contactPoint: undefined });\n  };\n\n  const addNewRoute = () => {\n    clearFilters();\n    setIsAddMode(true);\n    setActualRoutes(() => [\n      ...routes.routes,\n      {\n        ...emptyRoute,\n        matchers: [emptyArrayFieldMatcher],\n      },\n    ]);\n  };\n\n  const onCancelAdd = () => {\n    setIsAddMode(false);\n    setActualRoutes([...routes.routes]);\n  };\n\n  const onTableRouteChange = (newRoutes: FormAmRoute[]): void => {\n    onChange({\n      ...routes,\n      routes: newRoutes,\n    });\n\n    if (isAddMode) {\n      setIsAddMode(false);\n    }\n  };\n  return (\n    <div className={styles.container}>\n      <h5>Specific routing</h5>\n      <p>Send specific alerts to chosen contact points, based on matching criteria</p>\n      {!routes.receiver ? (\n        readOnly ? (\n          <EmptyArea>\n            <p>There is no default contact point configured for the root route.</p>\n          </EmptyArea>\n        ) : (\n          <EmptyAreaWithCTA\n            buttonIcon=\"rocket\"\n            buttonLabel=\"Set a default contact point\"\n            onButtonClick={onRootRouteEdit}\n            text=\"You haven't set a default contact point for the root route yet.\"\n            showButton={canCreateNotifications}\n          />\n        )\n      ) : actualRoutes.length > 0 ? (\n        <>\n          <div>\n            {!isAddMode && (\n              <div className={styles.searchContainer}>\n                <MatcherFilter\n                  onFilterChange={(filter) =>\n                    setFilters((currentFilters) => ({ ...currentFilters, queryString: filter }))\n                  }\n                  queryString={filters.queryString ?? ''}\n                  className={styles.filterInput}\n                />\n                <div className={styles.filterInput}>\n                  <Label>Search by contact point</Label>\n                  <Input\n                    onChange={({ currentTarget }) =>\n                      setFilters((currentFilters) => ({ ...currentFilters, contactPoint: currentTarget.value }))\n                    }\n                    value={filters.contactPoint ?? ''}\n                    placeholder=\"Search by contact point\"\n                    data-testid=\"search-query-input\"\n                    prefix={<Icon name={'search'} />}\n                  />\n                </div>\n                {(queryString || contactPoint) && (\n                  <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters} className={styles.clearFilterBtn}>\n                    Clear filters\n                  </Button>\n                )}\n              </div>\n            )}\n\n            {!isAddMode && !readOnly && (\n              <Authorize actions={[permissions.create]}>\n                <div className={styles.addMatcherBtnRow}>\n                  <Button className={styles.addMatcherBtn} icon=\"plus\" onClick={addNewRoute} type=\"button\">\n                    New policy\n                  </Button>\n                </div>\n              </Authorize>\n            )}\n          </div>\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            readOnly={readOnly}\n            onCancelAdd={onCancelAdd}\n            onChange={onTableRouteChange}\n            receivers={receivers}\n            routes={actualRoutes}\n            filters={{ queryString, contactPoint }}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        </>\n      ) : readOnly ? (\n        <EmptyArea>\n          <p>There are no specific policies configured.</p>\n        </EmptyArea>\n      ) : (\n        <EmptyAreaWithCTA\n          buttonIcon=\"plus\"\n          buttonLabel=\"New specific policy\"\n          onButtonClick={addNewRoute}\n          text=\"You haven't created any specific policies yet.\"\n          showButton={canCreateNotifications}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-flow: column wrap;\n    `,\n    searchContainer: css`\n      display: flex;\n      flex-flow: row nowrap;\n      padding-bottom: ${theme.spacing(2)};\n      border-bottom: 1px solid ${theme.colors.border.strong};\n    `,\n    clearFilterBtn: css`\n      align-self: flex-end;\n      margin-left: ${theme.spacing(1)};\n    `,\n    filterInput: css`\n      width: 340px;\n      & + & {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    addMatcherBtnRow: css`\n      display: flex;\n      flex-flow: column nowrap;\n      padding: ${theme.spacing(2)} 0;\n    `,\n    addMatcherBtn: css`\n      align-self: flex-end;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { MuteTimingsTable } from './components/amroutes/MuteTimingsTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { AmRouteReceiver, FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AmRoutes: FC = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const {\n    result,\n    loading: resultLoading,\n    error: resultError,\n  } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers = stringsToSelectableValues(\n    (config?.receivers ?? []).map((receiver: Receiver) => receiver.name)\n  ) as AmRouteReceiver[];\n\n  const isProvisioned = useMemo(() => Boolean(config?.route?.provenance), [config?.route]);\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    if (!result) {\n      return;\n    }\n\n    const newData = formAmRouteToAmRoute(\n      alertManagerSourceName,\n      {\n        ...rootRoute,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n        refetch: true,\n      })\n    );\n  };\n\n  if (!alertManagerSourceName) {\n    return (\n      <AlertingPageWrapper pageId=\"am-routes\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    );\n  }\n\n  const readOnly = alertManagerSourceName\n    ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) || isProvisioned\n    : true;\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.RootNotificationPolicy} />}\n      {resultLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            readOnly={readOnly}\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            alertManagerSourceName={alertManagerSourceName}\n            onChange={handleSave}\n            readOnly={readOnly}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <MuteTimingsTable alertManagerSourceName={alertManagerSourceName} />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize: FC<Props> = ({ actions, children, fallback = true }) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { css } from '@emotion/css';\nimport React, { FormEvent } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  className?: string;\n  queryString?: string;\n  defaultQueryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, defaultQueryString, queryString }: Props) => {\n  const styles = useStyles2(getStyles);\n  const handleSearchChange = (e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    onFilterChange(target.value);\n  };\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={className}>\n      <Label>\n        <Stack gap={0.5}>\n          <span>Search by label</span>\n          <Tooltip\n            content={\n              <div>\n                Filter alerts using label querying, ex:\n                <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </Tooltip>\n        </Stack>\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={defaultQueryString}\n        value={queryString}\n        onChange={handleSearchChange}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","defaultValueAndType","matchersToArrayFieldMatchers","matchers","isRegex","Object","entries","reduce","acc","name","value","operator","MatcherOperator","intervalToValueAndType","strValue","defaultValue","valueType","parseInterval","undefined","timeOption","timeOptions","opt","String","selectableValueToString","selectableValue","emptyArrayFieldMatcher","commonGroupByOptions","label","emptyRoute","id","overrideGrouping","groupBy","object_matchers","routes","continue","receiver","overrideTimings","groupWaitValue","groupWaitValueType","groupIntervalValue","groupIntervalValueType","repeatIntervalValue","repeatIntervalValueType","muteTimeIntervals","amRouteToFormAmRoute","route","Math","random","id2route","keys","length","formRoutes","forEach","subRoute","subFormRoute","subId2Route","push","assign","map","matcher","matcherToMatcherField","parseMatcher","group_wait","group_interval","repeat_interval","match","match_re","Array","isArray","group_by","some","Boolean","mute_time_intervals","formAmRouteToAmRoute","alertManagerSourceName","formAmRoute","id2ExistingRoute","existing","amRoute","GRAFANA_RULES_SOURCE_NAME","omitBy","isUndefined","stringToSelectableValue","str","stringsToSelectableValues","arr","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","optionalPositiveInteger","test","getFormStyles","theme","container","css","spacing","input","timingContainer","smallInput","linkText","collapse","colors","text","primary","AmRootRouteForm","onCancel","onSave","receivers","styles","useStyles2","isTimingOptionsExpanded","setIsTimingOptionsExpanded","useState","groupByOptions","setGroupByOptions","Form","defaultValues","onSubmit","control","errors","setValue","Field","invalid","error","message","className","InputControl","render","field","onChange","Select","options","rules","required","Link","href","makeAMLink","description","MultiSelect","allowCustomValue","onCreateOption","opts","Collapse","collapsible","isOpen","onToggle","cx","fieldState","Input","placeholder","validate","menuPlacement","Button","type","onClick","variant","fill","getGridStyles","typography","fontSize","breakpoints","down","titleCell","valueCell","secondary","AmRootRouteRead","join","groupWait","groupInterval","repeatInterval","AmRootRoute","isEditMode","onEnterEditMode","onExitEditMode","readOnly","getStyles","permissions","getNotificationsPermissions","titleContainer","title","Authorize","actions","update","icon","size","background","EmptyArea","children","useStyles","bg2","textSemiWeak","xl","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","showButton","commonProps","button","LinkButton","md","sm","AmRoutesExpandedForm","formStyles","muteTimingOptions","alertManagers","useAlertManagersByPermission","useAlertManagerSourceName","amConfigs","useUnifiedAlertingSelector","state","useMemo","result","initialAsyncRequestState","config","alertmanager_config","time_intervals","interval","timeIntervalToString","useMuteTimingOptions","register","watch","FieldArray","fields","append","remove","VerticalGroup","justify","Badge","color","noMatchersWarning","matchersContainer","index","localPath","HorizontalGroup","align","height","matchersOperator","matcherFieldOptions","IconButton","removeButton","tooltip","addMatcherBtn","Switch","buttonGroup","commonSpacing","nestedPolicies","MuteTimingsTable","muteTimingNames","hideActions","muteTimingName","setMuteTimingName","items","muteTimings","muteTimingsProvenances","muteTimeProvenances","filter","includes","mute","data","provenance","columns","userHasEditPermissions","contextSrv","userHasDeletePermissions","delete","showActions","renderCell","Provisioning","renderTimeIntervals","muteName","useColumns","create","addMuteButton","DynamicTable","cols","ConfirmModal","body","confirmText","onConfirm","deleteMuteTimingAction","onDismiss","timeIntervals","times","weekdays","days_of_month","months","years","timeString","getTimeString","weekdayString","getWeekdayString","daysString","getDaysOfMonthString","monthsString","getMonthsString","yearsString","getYearsString","JSON","stringify","AmRoutesExpandedRead","gridStyles","subroutes","setSubroutes","isAddMode","setIsAddMode","AmRoutesTable","onCancelAdd","newSubroutes","pop","newRoutes","addNestedRoutingBtn","updatedRoute","editIndex","findIndex","filters","editMode","setEditMode","deletingRouteId","setDeletingRouteId","expandedId","setExpandedId","canEditRoutes","canDeleteRoutes","expandItem","useCallback","item","collapseItem","Matchers","matcherFieldToMatcher","renderExpandedContent","filteredRoutes","labelMatcherQuery","contactPointQuery","parseMatchers","routeMatchers","intersectionWith","isEqual","toLowerCase","getFilteredRoutes","queryString","contactPoint","dynamicTableRoutes","prepareItems","idCreator","isExpandable","testIdGenerator","onCollapse","onExpand","isExpanded","routeId","deleteRoute","AmSpecificRouting","onRootRouteEdit","actualRoutes","setActualRoutes","canCreateNotifications","searchParams","setSearchParams","useURLSearchParams","getNotificationPoliciesFilters","setFilters","useDebounce","clearFilters","addNewRoute","searchContainer","MatcherFilter","onFilterChange","currentFilters","filterInput","Label","currentTarget","prefix","Icon","clearFilterBtn","addMatcherBtnRow","border","strong","withErrorBoundary","isRootRouteEditMode","setIsRootRouteEditMode","setAlertManagerSourceName","fetchConfig","fetchAlertManagerConfigAction","loading","resultLoading","resultError","rootRoute","isProvisioned","enterRootRouteEditMode","exitRootRouteEditMode","unifiedAlerting","saveAMConfig","handleSave","newData","updateAlertManagerConfigAction","newConfig","oldConfig","successMessage","refetch","AlertingPageWrapper","pageId","NoAlertManagerWarning","availableAlertManagers","isVanillaPrometheusAlertManagerDataSource","AlertManagerPicker","dataSources","Alert","severity","resource","ProvisionedResource","LoadingPlaceholder","break","style","isLoading","navModel","getNavModel","useSelector","navIndex","fallback","action","NoAlertManagersAvailable","OtherAlertManagersAvailable","_","hasOtherAMs","ProvisioningAlert","ProvisioningBadge","defaultQueryString","searchIcon","Stack","gap","Tooltip","content","e","target","inputWidth","TagList","tags","matcherToOperator","queryParams","updateQueryParams","useQueryParams","isAlertManagerAvailable","alertManagerName","am","useIsAlertManagerAvailable","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","accessType","getAlertManagerDataSourcesByPermission","search","useLocation","URLSearchParams","searchValues","replace","locationService"],"sourceRoot":""}