{"version":3,"file":"UserListPage.81772552d539a19ec0c7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/UserListAdminPage.tsx","webpack://grafana/./public/app/features/admin/UserListPage.tsx","webpack://grafana/./public/app/features/invites/InviteeRow.tsx","webpack://grafana/./public/app/features/invites/InviteesTable.tsx","webpack://grafana/./public/app/features/invites/state/selectors.ts","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/users/UsersListPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { ComponentType, useEffect, useMemo, memo } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Icon,\n  IconName,\n  LinkButton,\n  Pagination,\n  RadioButtonGroup,\n  Tooltip,\n  useStyles2,\n  FilterInput,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\n\nimport PageLoader from '../../core/components/PageLoader/PageLoader';\nimport { AccessControlAction, StoreState, Unit, UserDTO, UserFilter } from '../../types';\n\nimport { changeFilter, changePage, changeQuery, fetchUsers } from './state/actions';\n\nexport interface FilterProps {\n  filters: UserFilter[];\n  onChange: (filter: UserFilter) => void;\n  className?: string;\n}\nconst extraFilters: Array<ComponentType<FilterProps>> = [];\nexport const addExtraFilters = (filter: ComponentType<FilterProps>) => {\n  extraFilters.push(filter);\n};\n\nconst mapDispatchToProps = {\n  fetchUsers,\n  changeQuery,\n  changePage,\n  changeFilter,\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  users: state.userListAdmin.users,\n  query: state.userListAdmin.query,\n  showPaging: state.userListAdmin.showPaging,\n  totalPages: state.userListAdmin.totalPages,\n  page: state.userListAdmin.page,\n  filters: state.userListAdmin.filters,\n  isLoading: state.userListAdmin.isLoading,\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst UserListAdminPageUnConnected = ({\n  fetchUsers,\n  query,\n  changeQuery,\n  users,\n  showPaging,\n  totalPages,\n  page,\n  changePage,\n  changeFilter,\n  filters,\n  isLoading,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  const showLicensedRole = useMemo(() => users.some((user) => user.licensedRole), [users]);\n\n  return (\n    <Page.Contents>\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            placeholder=\"Search user by login, email, or name.\"\n            autoFocus={true}\n            value={query}\n            onChange={changeQuery}\n          />\n          <RadioButtonGroup\n            options={[\n              { label: 'All users', value: false },\n              { label: 'Active last 30 days', value: true },\n            ]}\n            onChange={(value) => changeFilter({ name: 'activeLast30Days', value })}\n            value={filters.find((f) => f.name === 'activeLast30Days')?.value}\n            className={styles.filter}\n          />\n          {extraFilters.map((FilterComponent, index) => (\n            <FilterComponent key={index} filters={filters} onChange={changeFilter} className={styles.filter} />\n          ))}\n        </div>\n        {contextSrv.hasPermission(AccessControlAction.UsersCreate) && (\n          <LinkButton href=\"admin/users/create\" variant=\"primary\">\n            New user\n          </LinkButton>\n        )}\n      </div>\n      {isLoading ? (\n        <PageLoader />\n      ) : (\n        <>\n          <div className={cx(styles.table, 'admin-list-table')}>\n            <table className=\"filter-table form-inline filter-table--hover\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>Login</th>\n                  <th>Email</th>\n                  <th>Name</th>\n                  <th>Belongs to</th>\n                  {showLicensedRole && (\n                    <th>\n                      Licensed role{' '}\n                      <Tooltip\n                        placement=\"top\"\n                        content={\n                          <>\n                            Licensed role is based on a user&apos;s Org role (i.e. Viewer, Editor, Admin) and their\n                            dashboard/folder permissions.{' '}\n                            <a\n                              className={styles.link}\n                              target=\"_blank\"\n                              rel=\"noreferrer noopener\"\n                              href={\n                                'https://grafana.com/docs/grafana/next/enterprise/license/license-restrictions/#active-users-limit'\n                              }\n                            >\n                              Learn more\n                            </a>\n                          </>\n                        }\n                      >\n                        <Icon name=\"question-circle\" />\n                      </Tooltip>\n                    </th>\n                  )}\n                  <th>\n                    Last active&nbsp;\n                    <Tooltip placement=\"top\" content=\"Time since user was seen using Grafana\">\n                      <Icon name=\"question-circle\" />\n                    </Tooltip>\n                  </th>\n                  <th style={{ width: '1%' }}>Origin</th>\n                </tr>\n              </thead>\n              <tbody>\n                {users.map((user) => (\n                  <UserListItem user={user} showLicensedRole={showLicensedRole} key={user.id} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n          {showPaging && <Pagination numberOfPages={totalPages} currentPage={page} onNavigate={changePage} />}\n        </>\n      )}\n    </Page.Contents>\n  );\n};\n\nexport const UserListAdminPageContent = connector(UserListAdminPageUnConnected);\nexport function UserListAdminPage() {\n  return (\n    <Page navId=\"global-users\">\n      <UserListAdminPageContent />\n    </Page>\n  );\n}\n\nconst getUsersAriaLabel = (name: string) => {\n  return `Edit user's ${name} details`;\n};\n\ntype UserListItemProps = {\n  user: UserDTO;\n  showLicensedRole: boolean;\n};\n\nconst UserListItem = memo(({ user, showLicensedRole }: UserListItemProps) => {\n  const styles = useStyles2(getStyles);\n  const editUrl = `admin/users/edit/${user.id}`;\n\n  return (\n    <tr key={user.id}>\n      <td className=\"width-4 text-center link-td\">\n        <a href={editUrl} aria-label={`Edit user's ${user.name} details`}>\n          <img className=\"filter-table__avatar\" src={user.avatarUrl} alt={`Avatar for user ${user.name}`} />\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.login} aria-label={getUsersAriaLabel(user.name)}>\n          {user.login}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.email} aria-label={getUsersAriaLabel(user.name)}>\n          {user.email}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.name} aria-label={getUsersAriaLabel(user.name)}>\n          {user.name}\n        </a>\n      </td>\n\n      <td\n        className={styles.row}\n        title={\n          user.orgs?.length\n            ? `The user is a member of the following organizations: ${user.orgs.map((org) => org.name).join(',')}`\n            : undefined\n        }\n      >\n        <OrgUnits units={user.orgs} icon={'building'} />\n        {user.isAdmin && (\n          <a href={editUrl} aria-label={getUsersAriaLabel(user.name)}>\n            <Tooltip placement=\"top\" content=\"Grafana Admin\">\n              <Icon name=\"shield\" />\n            </Tooltip>\n          </a>\n        )}\n      </td>\n      {showLicensedRole && (\n        <td className={cx('link-td', styles.iconRow)}>\n          <a className=\"ellipsis\" href={editUrl} title={user.name} aria-label={getUsersAriaLabel(user.name)}>\n            {user.licensedRole === 'None' ? (\n              <span className={styles.disabled}>\n                Not assigned{' '}\n                <Tooltip placement=\"top\" content=\"A licensed role will be assigned when this user signs in\">\n                  <Icon name=\"question-circle\" />\n                </Tooltip>\n              </span>\n            ) : (\n              user.licensedRole\n            )}\n          </a>\n        </td>\n      )}\n      <td className=\"link-td\">\n        {user.lastSeenAtAge && (\n          <a\n            href={editUrl}\n            aria-label={`Last seen at ${user.lastSeenAtAge}. Follow to edit user's ${user.name} details.`}\n          >\n            {user.lastSeenAtAge === '10 years' ? <span className={styles.disabled}>Never</span> : user.lastSeenAtAge}\n          </a>\n        )}\n      </td>\n      <td className=\"text-right\">\n        {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n          <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n        )}\n      </td>\n      <td className=\"text-right\">\n        {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n      </td>\n    </tr>\n  );\n});\n\nUserListItem.displayName = 'UserListItem';\n\ntype OrgUnitProps = { units?: Unit[]; icon: IconName };\n\nconst OrgUnits = ({ units, icon }: OrgUnitProps) => {\n  const styles = useStyles2(getStyles);\n\n  if (!units?.length) {\n    return null;\n  }\n\n  return units.length > 1 ? (\n    <Tooltip\n      placement={'top'}\n      content={\n        <div className={styles.unitTooltip}>\n          {units?.map((unit) => (\n            <a\n              href={unit.url}\n              className={styles.link}\n              title={unit.name}\n              key={unit.name}\n              aria-label={`Edit ${unit.name}`}\n            >\n              {unit.name}\n            </a>\n          ))}\n        </div>\n      }\n    >\n      <div className={styles.unitItem}>\n        <Icon name={icon} /> <span>{units.length}</span>\n      </div>\n    </Tooltip>\n  ) : (\n    <a\n      href={units[0].url}\n      className={styles.unitItem}\n      title={units[0].name}\n      key={units[0].name}\n      aria-label={`Edit ${units[0].name}`}\n    >\n      <Icon name={icon} /> {units[0].name}\n    </a>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n  };\n};\n\nexport default UserListAdminPage;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, TabsBar, Tab } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { Page } from '../../core/components/Page/Page';\nimport { AccessControlAction } from '../../types';\nimport { UsersListPageContent } from '../users/UsersListPage';\n\nimport { UserListAdminPageContent } from './UserListAdminPage';\n\nexport default function UserListPage() {\n  const hasAccessToAdminUsers = contextSrv.hasAccess(AccessControlAction.UsersRead, contextSrv.isGrafanaAdmin);\n  const hasAccessToOrgUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n  const styles = useStyles2(getStyles);\n  const [view, setView] = useState(() => {\n    if (hasAccessToAdminUsers) {\n      return 'admin';\n    } else if (hasAccessToOrgUsers) {\n      return 'org';\n    }\n    return null;\n  });\n\n  const showToggle = hasAccessToOrgUsers && hasAccessToAdminUsers;\n\n  return (\n    <Page navId={'global-users'}>\n      {showToggle && (\n        <TabsBar className={styles.tabsMargin}>\n          <Tab label=\"All users\" active={view === 'admin'} onChangeTab={() => setView('admin')} />\n          <Tab label=\"Organization users\" active={view === 'org'} onChangeTab={() => setView('org')} />\n        </TabsBar>\n      )}\n      {view === 'admin' ? <UserListAdminPageContent /> : <UsersListPageContent />}\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabsMargin: css({\n    marginBottom: theme.spacing(3),\n  }),\n});\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, ClipboardButton } from '@grafana/ui';\nimport { Invitee } from 'app/types';\n\nimport { revokeInvite } from './state/actions';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton icon=\"copy\" variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            icon=\"times\"\n            onClick={() => revokeInvite(invitee.code)}\n            aria-label=\"Revoke Invite\"\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import React, { PureComponent } from 'react';\n\nimport { Invitee } from 'app/types';\n\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody data-testid=\"InviteesTable-body\">\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { selectors } from './reducers';\n\nexport const { selectAll, selectById, selectTotal } = selectors;\n\nconst selectQuery = (_: any, query: string) => query;\nexport const selectInvitesMatchingQuery = createSelector([selectAll, selectQuery], (invites, searchQuery) => {\n  const regex = new RegExp(searchQuery, 'i');\n  const matches = invites.filter((invite) => regex.test(invite.name) || regex.test(invite.email));\n  return matches;\n});\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser } from 'app/types';\n\nimport { ThunkResult } from '../../../types';\n\nimport { usersLoaded, pageChanged, usersFetchBegin, usersFetchEnd, searchQueryChanged } from './reducers';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      const { perPage, page, searchQuery } = getState().users;\n      const users = await getBackendSrv().get(\n        `/api/org/users/search`,\n        accessControlQueryParam({ perpage: perPage, page, query: searchQuery })\n      );\n      dispatch(usersLoaded(users));\n    } catch (error) {\n      usersFetchEnd();\n    }\n  };\n}\n\nconst fetchUsersWithDebounce = debounce((dispatch) => dispatch(loadUsers()), 300);\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(pageChanged(page));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSearchQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(searchQueryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RadioButtonGroup, LinkButton, FilterInput } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { selectTotal } from '../invites/state/selectors';\n\nimport { changeSearchQuery } from './state/actions';\nimport { getUsersSearchQuery } from './state/selectors';\n\nexport interface OwnProps {\n  showInvites: boolean;\n  onShowInvites: () => void;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: selectTotal(state.invites),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n    canInvite: state.users.canInvite,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const UsersActionBarUnconnected = ({\n  canInvite,\n  externalUserMngLinkName,\n  externalUserMngLinkUrl,\n  searchQuery,\n  pendingInvitesCount,\n  changeSearchQuery,\n  onShowInvites,\n  showInvites,\n}: Props): JSX.Element => {\n  const options = [\n    { label: 'Users', value: 'users' },\n    { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n  ];\n  const canAddToOrg: boolean = contextSrv.hasAccess(AccessControlAction.OrgUsersAdd, canInvite);\n  // backend rejects invitations if the login form is disabled\n  const showInviteButton: boolean = canAddToOrg && !config.disableLoginForm;\n\n  return (\n    <div className=\"page-action-bar\" data-testid=\"users-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput\n          value={searchQuery}\n          onChange={changeSearchQuery}\n          placeholder=\"Search user by login, email or name\"\n        />\n      </div>\n      {pendingInvitesCount > 0 && (\n        <div style={{ marginLeft: '1rem' }}>\n          <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n        </div>\n      )}\n      {showInviteButton && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n      {externalUserMngLinkUrl && (\n        <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n          {externalUserMngLinkName}\n        </LinkButton>\n      )}\n    </div>\n  );\n};\n\nexport const UsersActionBar = connector(UsersActionBarUnconnected);\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { HorizontalGroup, Pagination, VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\n\nimport InviteesTable from '../invites/InviteesTable';\nimport { fetchInvitees } from '../invites/state/actions';\nimport { selectInvitesMatchingQuery } from '../invites/state/selectors';\n\nimport { UsersActionBar } from './UsersActionBar';\nimport { UsersTable } from './UsersTable';\nimport { loadUsers, removeUser, updateUser, changePage } from './state/actions';\nimport { getUsers, getUsersSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const searchQuery = getUsersSearchQuery(state.users);\n  return {\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    page: state.users.page,\n    totalPages: state.users.totalPages,\n    perPage: state.users.perPage,\n    invitees: selectInvitesMatchingQuery(state.invites, searchQuery),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    isLoading: state.users.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nexport const UsersListPageUnconnected = ({\n  users,\n  page,\n  totalPages,\n  invitees,\n  externalUserMngInfo,\n  isLoading,\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n}: Props): JSX.Element => {\n  const [showInvites, setShowInvites] = useState(false);\n  const externalUserMngInfoHtml = externalUserMngInfo ? renderMarkdown(externalUserMngInfo) : '';\n\n  useEffect(() => {\n    loadUsers();\n    fetchInvitees();\n  }, [fetchInvitees, loadUsers]);\n\n  const onRoleChange = (role: OrgRole, user: OrgUser) => {\n    updateUser({ ...user, role: role });\n  };\n\n  const onShowInvites = () => {\n    setShowInvites(!showInvites);\n  };\n\n  const renderTable = () => {\n    if (showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <VerticalGroup spacing=\"md\">\n          <UsersTable\n            users={users}\n            orgId={contextSrv.user.orgId}\n            onRoleChange={(role, user) => onRoleChange(role, user)}\n            onRemoveUser={(user) => removeUser(user.userId)}\n          />\n          <HorizontalGroup justify=\"flex-end\">\n            <Pagination\n              onNavigate={changePage}\n              currentPage={page}\n              numberOfPages={totalPages}\n              hideWhenSinglePage={true}\n            />\n          </HorizontalGroup>\n        </VerticalGroup>\n      );\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={!isLoading}>\n      <UsersActionBar onShowInvites={onShowInvites} showInvites={showInvites} />\n      {externalUserMngInfoHtml && (\n        <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n      )}\n      {isLoading && renderTable()}\n    </Page.Contents>\n  );\n};\n\nexport const UsersListPageContent = connector(UsersListPageUnconnected);\n\nexport default function UsersListPage() {\n  return (\n    <Page navId=\"users\">\n      <UsersListPageContent />\n    </Page>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nexport const UsersTable = ({ users, orgId, onRoleChange, onRemoveUser }: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th />\n            <th>Login</th>\n            <th>Email</th>\n            <th>Name</th>\n            <th>Seen</th>\n            <th>Role</th>\n            <th style={{ width: '34px' }} />\n            <th>Origin</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, index) => {\n            let basicRoleDisabled = !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user);\n            if (config.featureToggles.onlyExternalOrgRoleSync) {\n              const isUserSynced = user?.isExternallySynced;\n              basicRoleDisabled = isUserSynced || basicRoleDisabled;\n            }\n            return (\n              <tr key={`${user.userId}-${index}`}>\n                <td className=\"width-2 text-center\">\n                  <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n                </td>\n                <td className=\"max-width-6\">\n                  <span className=\"ellipsis\" title={user.login}>\n                    {user.login}\n                  </span>\n                </td>\n\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.email}>\n                    {user.email}\n                  </span>\n                </td>\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.name}>\n                    {user.name}\n                  </span>\n                </td>\n                <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n                <td className=\"width-8\">\n                  {contextSrv.licensedAccessControlEnabled() ? (\n                    <UserRolePicker\n                      userId={user.userId}\n                      orgId={orgId}\n                      roleOptions={roleOptions}\n                      basicRole={user.role}\n                      onBasicRoleChange={(newRole) => onRoleChange(newRole, user)}\n                      basicRoleDisabled={basicRoleDisabled}\n                    />\n                  ) : (\n                    <OrgRolePicker\n                      aria-label=\"Role\"\n                      value={user.role}\n                      disabled={basicRoleDisabled}\n                      onChange={(newRole) => onRoleChange(newRole, user)}\n                    />\n                  )}\n                </td>\n\n                <td className=\"width-1 text-center\">\n                  {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n                </td>\n\n                <td className=\"width-1\">\n                  {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n                    <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n                  )}\n                </td>\n\n                {contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, user) && (\n                  <td className=\"text-right\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => {\n                        setUserToRemove(user);\n                      }}\n                      icon=\"times\"\n                      aria-label=\"Delete user\"\n                    />\n                  </td>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </>\n  );\n};\n"],"names":["extraFilters","addExtraFilters","filter","mapDispatchToProps","mapStateToProps","state","UserListAdminPageContent","fetchUsers","query","changeQuery","users","showPaging","totalPages","page","changePage","changeFilter","filters","isLoading","styles","getStyles","showLicensedRole","user","value","f","FilterComponent","index","UserListItem","UserListAdminPage","getUsersAriaLabel","name","editUrl","org","OrgUnits","units","icon","unit","theme","UserListPage","hasAccessToAdminUsers","hasAccessToOrgUsers","view","setView","showToggle","connector","InviteeRow","invitee","revokeInvite","ClipboardButton","Button","InviteesTable","invitees","selectAll","selectById","selectTotal","selectQuery","_","selectInvitesMatchingQuery","invites","searchQuery","regex","invite","loadUsers","dispatch","getState","perPage","accessControl","fetchUsersWithDebounce","updateUser","removeUser","userId","changeSearchQuery","getUsers","getUsersSearchQuery","UsersActionBar","canInvite","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","onShowInvites","showInvites","options","showInviteButton","config","FilterInput","RadioButtonGroup","UsersListPageUnconnected","externalUserMngInfo","fetchInvitees","setShowInvites","externalUserMngInfoHtml","onRoleChange","role","renderTable","UsersTable","Pagination","Page","UsersListPageContent","UsersListPage","orgId","onRemoveUser","userToRemove","setUserToRemove","roleOptions","setRoleOptions","fetchOptions","basicRoleDisabled","newRole"],"sourceRoot":""}