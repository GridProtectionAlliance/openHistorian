{"version":3,"sources":["webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/features/plugins/PluginListItem.tsx","webpack:///./public/app/features/plugins/PluginList.tsx","webpack:///./public/app/features/plugins/PluginListPage.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"names":["OrgActionBar","_super","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","render","_a","this","props","searchQuery","layoutMode","onSetLayoutMode","linkButton","setSearchQuery","target","linkProps","href","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_3__","labelClassName","inputClassName","value","onChange","placeholder","_LayoutSelector_LayoutSelector__WEBPACK_IMPORTED_MODULE_2__","mode","onLayoutModeChanged","title","react__WEBPACK_IMPORTED_MODULE_1__","plugins_PluginListItem","plugin","react_default","id","type","hasUpdate","bs-tooltip","src","info","logos","small","name","author","__webpack_exports__","plugins","listStyle","classnames_default","card-section","card-list-layout-grid","LayoutSelector","Grid","card-list-layout-list","List","map","index","key","PluginListPage","componentDidMount","fetchPlugins","loadPlugins","sent","hasFetched","navModel","setPluginsLayoutMode","setPluginsSearchQuery","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","isLoading","Fragment","app_core_components_OrgActionBar_OrgActionBar__WEBPACK_IMPORTED_MODULE_5__","query","_PluginList__WEBPACK_IMPORTED_MODULE_6__","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_7__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","state","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_8__","navIndex","_state_selectors__WEBPACK_IMPORTED_MODULE_9__","__webpack_require__","d","getPlugins","getPluginsSearchQuery","getLayoutMode","regex","RegExp","filter","item","test","description"],"mappings":"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","file":"PluginListPage.3932bda029d2299a9d96.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport LayoutSelector, { LayoutMode } from '../LayoutSelector/LayoutSelector';\nimport { FilterInput } from '../FilterInput/FilterInput';\n\nexport interface Props {\n  searchQuery: string;\n  layoutMode?: LayoutMode;\n  onSetLayoutMode?: (mode: LayoutMode) => {};\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, layoutMode, onSetLayoutMode, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Filter by name or type'}\n          />\n          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => onSetLayoutMode(mode)} />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <a className=\"btn btn-primary\" {...linkProps}>\n          {linkButton.title}\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { FC } from 'react';\nimport { PluginMeta } from '@grafana/ui';\n\ninterface Props {\n  plugin: PluginMeta;\n}\n\nconst PluginListItem: FC<Props> = props => {\n  const { plugin } = props;\n\n  return (\n    <li className=\"card-item-wrapper\">\n      <a className=\"card-item\" href={`plugins/${plugin.id}/`}>\n        <div className=\"card-item-header\">\n          <div className=\"card-item-type\">{plugin.type}</div>\n          {plugin.hasUpdate && (\n            <div className=\"card-item-notice\">\n              <span bs-tooltip=\"plugin.latestVersion\">Update available!</span>\n            </div>\n          )}\n        </div>\n        <div className=\"card-item-body\">\n          <figure className=\"card-item-figure\">\n            <img src={plugin.info.logos.small} />\n          </figure>\n          <div className=\"card-item-details\">\n            <div className=\"card-item-name\">{plugin.name}</div>\n            <div className=\"card-item-sub-name\">{`By ${plugin.info.author.name}`}</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nexport default PluginListItem;\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport PluginListItem from './PluginListItem';\nimport { PluginMeta } from '@grafana/ui';\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\n\ninterface Props {\n  plugins: PluginMeta[];\n  layoutMode: LayoutMode;\n}\n\nconst PluginList: FC<Props> = props => {\n  const { plugins, layoutMode } = props;\n\n  const listStyle = classNames({\n    'card-section': true,\n    'card-list-layout-grid': layoutMode === LayoutModes.Grid,\n    'card-list-layout-list': layoutMode === LayoutModes.List,\n  });\n\n  return (\n    <section className={listStyle}>\n      <ol className=\"card-list\">\n        {plugins.map((plugin, index) => {\n          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;\n        })}\n      </ol>\n    </section>\n  );\n};\n\nexport default PluginList;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport PluginList from './PluginList';\nimport { loadPlugins, setPluginsLayoutMode, setPluginsSearchQuery } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getLayoutMode, getPlugins, getPluginsSearchQuery } from './state/selectors';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\nimport { NavModel } from '@grafana/data';\nimport { PluginMeta } from '@grafana/ui';\nimport { StoreState } from 'app/types';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: PluginMeta[];\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadPlugins: typeof loadPlugins;\n  setPluginsLayoutMode: typeof setPluginsLayoutMode;\n  setPluginsSearchQuery: typeof setPluginsSearchQuery;\n}\n\nexport class PluginListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchPlugins();\n  }\n\n  async fetchPlugins() {\n    await this.props.loadPlugins();\n  }\n\n  render() {\n    const {\n      hasFetched,\n      navModel,\n      plugins,\n      layoutMode,\n      setPluginsLayoutMode,\n      setPluginsSearchQuery,\n      searchQuery,\n    } = this.props;\n\n    const linkButton = {\n      href: 'https://grafana.com/plugins?utm_source=grafana_plugin_list',\n      title: 'Find more plugins on Grafana.com',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <OrgActionBar\n              searchQuery={searchQuery}\n              layoutMode={layoutMode}\n              onSetLayoutMode={mode => setPluginsLayoutMode(mode)}\n              setSearchQuery={query => setPluginsSearchQuery(query)}\n              linkButton={linkButton}\n            />\n            {hasFetched && plugins && (plugins && <PluginList plugins={plugins} layoutMode={layoutMode} />)}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'plugins'),\n    plugins: getPlugins(state.plugins),\n    layoutMode: getLayoutMode(state.plugins),\n    searchQuery: getPluginsSearchQuery(state.plugins),\n    hasFetched: state.plugins.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadPlugins,\n  setPluginsLayoutMode,\n  setPluginsSearchQuery,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(PluginListPage)\n);\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter(item => {\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\n  });\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\nexport const getLayoutMode = (state: PluginsState) => state.layoutMode;\n"],"sourceRoot":""}