{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./public/app/features/alerting/state/selectors.ts"],"names":["getAlertRulesAsync","options","dispatch","loadAlertRules","getBackendSrv","get","rules","loadedAlertRules","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","alertError","error","updateNotificationChannel","put","testNotificationChannel","channel","notificationChannel","loadNotificationTypes","alertNotifiers","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","AlertRuleList","stateFilters","label","value","onStateFilterChanged","option","props","onOpenHowTo","CoreEvents","showModal","src","modalClass","model","onSearchQueryChange","setSearchQuery","onTogglePause","rule","paused","alertStateFilterOption","text","key","this","fetchRules","prevProps","getStateFilter","navModel","alertRules","search","isLoading","Contents","className","labelClassName","inputClassName","placeholder","onChange","variant","onClick","map","PureComponent","mapDispatchToProps","hot","module","connect","getNavModel","navIndex","getAlertRuleItems","getSearchQuery","AlertRuleItem","highlightClassName","textToHighlight","searchWords","ruleUrl","url","panelId","size","stateIcon","stateClass","href","renderText","stateText","stateAge","info","spacing","placement","content","icon","searchQuery","regex","RegExp","items","filter","item","test"],"mappings":"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","file":"AlertRuleList.591ee81e63053ad31983.js","sourcesContent":["import { AppEvents } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\nimport { appEvents } from 'app/core/core';\nimport { updateLocation } from 'app/core/actions';\nimport { notificationChannelLoaded, loadAlertRules, loadedAlertRules, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async dispatch => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async dispatch => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async dispatch => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async dispatch => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { updateLocation } from 'app/core/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, CoreEvents, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { NavModel, SelectableValue } from '@grafana/data';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, Select } from '@grafana/ui';\n\nexport interface Props {\n  navModel: NavModel;\n  alertRules: AlertRule[];\n  updateLocation: typeof updateLocation;\n  getAlertRulesAsync: typeof getAlertRulesAsync;\n  setSearchQuery: typeof setSearchQuery;\n  togglePauseAlertRule: typeof togglePauseAlertRule;\n  stateFilter: string;\n  search: string;\n  isLoading: boolean;\n}\n\nexport class AlertRuleList extends PureComponent<Props, any> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No Data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.stateFilter !== this.props.stateFilter) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    const { stateFilter } = this.props;\n    if (stateFilter) {\n      return stateFilter.toString();\n    }\n    return 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    this.props.updateLocation({\n      query: { state: option.value },\n    });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/alerting/partials/alert_howto.html',\n      modalClass: 'confirm-modal',\n      model: {},\n    });\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n                inputClassName=\"gf-form-input\"\n                placeholder=\"Search alerts\"\n                value={search}\n                onChange={this.onSearchQueryChange}\n              />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"width-13\">\n                <Select\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <section>\n            <ol className=\"alert-rule-list\">\n              {alertRules.map(rule => (\n                <AlertRuleItem\n                  rule={rule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule)}\n                />\n              ))}\n            </ol>\n          </section>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'alert-list'),\n  alertRules: getAlertRuleItems(state.alertRules),\n  stateFilter: state.location.query.state,\n  search: getSearchQuery(state.alertRules),\n  isLoading: state.alertRules.isLoading,\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(AlertRuleList));\n","import React, { PureComponent } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { AlertRule } from '../../types';\nimport { Icon, IconName, Button, Tooltip, LinkButton, HorizontalGroup } from '@grafana/ui';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nclass AlertRuleItem extends PureComponent<Props> {\n  renderText(text: string) {\n    return (\n      <Highlighter\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[this.props.search]}\n      />\n    );\n  }\n\n  render() {\n    const { rule, onTogglePause } = this.props;\n\n    const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n\n    return (\n      <li className=\"alert-rule-item\">\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n        <div className=\"alert-rule-item__body\">\n          <div className=\"alert-rule-item__header\">\n            <div className=\"alert-rule-item__name\">\n              <a href={ruleUrl}>{this.renderText(rule.name)}</a>\n            </div>\n            <div className=\"alert-rule-item__text\">\n              <span className={`${rule.stateClass}`}>{this.renderText(rule.stateText)}</span>\n              <span className=\"alert-rule-item__time\"> for {rule.stateAge}</span>\n            </div>\n          </div>\n          {rule.info && <div className=\"small muted alert-rule-item__info\">{this.renderText(rule.info)}</div>}\n        </div>\n\n        <div className=\"alert-rule-item__actions\">\n          <HorizontalGroup spacing=\"sm\">\n            <Tooltip placement=\"bottom\" content=\"Pausing an alert rule prevents it from executing\">\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                icon={rule.state === 'paused' ? 'play' : 'pause'}\n                onClick={onTogglePause}\n              />\n            </Tooltip>\n            <Tooltip placement=\"right\" content=\"Edit alert rule\">\n              <LinkButton size=\"sm\" variant=\"secondary\" href={ruleUrl} icon=\"cog\" />\n            </Tooltip>\n          </HorizontalGroup>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default AlertRuleItem;\n","import { AlertRulesState, NotificationChannelState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: AlertRulesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.items.filter(item => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n"],"sourceRoot":""}