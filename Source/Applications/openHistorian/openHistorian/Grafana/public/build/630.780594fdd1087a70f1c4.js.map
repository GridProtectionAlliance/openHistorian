{"version":3,"file":"630.780594fdd1087a70f1c4.js","mappings":"mHAOO,MAAMA,CAAW,CAKpB,YAAYC,EAAeC,EAAgBC,EAAeC,EAAgB,CAEtE,KAAK,cAAgBH,EACrB,KAAK,eAAiBC,EACtB,KAAK,cAAgBC,EACrB,KAAK,eAAiBC,CAC1B,CAIA,gBAAiB,CACb,OAAO,KAAK,cAAgB,KAAK,cACrC,CAIA,gBAAiB,CACb,OAAO,KAAK,cAAgB,KAAK,cACrC,CACJ,C,mCC3BO,SAASC,EAAKC,EAAI,CACrB,MAAMC,EAAQ,KACd,IAAIC,EAAU,GACVC,EACJ,OAAO,UAAY,CACf,OAAID,IAGJA,EAAU,GACVC,EAASH,EAAG,MAAMC,EAAO,SAAS,GAC3BE,CACX,CACJ,C,mCCZO,MAAMC,CAAK,CACd,YAAYC,EAAU,CAClB,KAAK,SAAWA,EAChB,KAAK,QAAU,EACnB,CAIA,UAAW,CAAE,OAAO,KAAK,OAAS,CAOlC,UAAW,CACP,GAAI,CAAC,KAAK,QACN,GAAI,CACA,KAAK,OAAS,KAAK,SAAS,CAChC,OACOC,EAAK,CACR,KAAK,OAASA,CAClB,QACA,CACI,KAAK,QAAU,EACnB,CAEJ,GAAI,KAAK,OACL,MAAM,KAAK,OAEf,OAAO,KAAK,MAChB,CAIA,IAAI,UAAW,CAAE,OAAO,KAAK,MAAQ,CACzC,C,mCCpCA,MAAMC,CAAK,CACP,YAAYC,EAAS,CACjB,KAAK,QAAUA,EACf,KAAK,KAAOD,EAAK,UACjB,KAAK,KAAOA,EAAK,SACrB,CACJ,CACAA,EAAK,UAAY,IAAIA,EAAK,MAAS,EAC5B,MAAME,CAAW,CACpB,aAAc,CACV,KAAK,OAASF,EAAK,UACnB,KAAK,MAAQA,EAAK,UAClB,KAAK,MAAQ,CACjB,CACA,IAAI,MAAO,CACP,OAAO,KAAK,KAChB,CACA,SAAU,CACN,OAAO,KAAK,SAAWA,EAAK,SAChC,CACA,OAAQ,CACJ,IAAIG,EAAO,KAAK,OAChB,KAAOA,IAASH,EAAK,WAAW,CAC5B,MAAMI,EAAOD,EAAK,KAClBA,EAAK,KAAOH,EAAK,UACjBG,EAAK,KAAOH,EAAK,UACjBG,EAAOC,CACX,CACA,KAAK,OAASJ,EAAK,UACnB,KAAK,MAAQA,EAAK,UAClB,KAAK,MAAQ,CACjB,CACA,QAAQC,EAAS,CACb,OAAO,KAAK,QAAQA,EAAS,EAAK,CACtC,CACA,KAAKA,EAAS,CACV,OAAO,KAAK,QAAQA,EAAS,EAAI,CACrC,CACA,QAAQA,EAASI,EAAU,CACvB,MAAMC,EAAU,IAAIN,EAAKC,CAAO,EAChC,GAAI,KAAK,SAAWD,EAAK,UACrB,KAAK,OAASM,EACd,KAAK,MAAQA,UAERD,EAAU,CAEf,MAAME,EAAU,KAAK,MACrB,KAAK,MAAQD,EACbA,EAAQ,KAAOC,EACfA,EAAQ,KAAOD,CACnB,KACK,CAED,MAAME,EAAW,KAAK,OACtB,KAAK,OAASF,EACdA,EAAQ,KAAOE,EACfA,EAAS,KAAOF,CACpB,CACA,KAAK,OAAS,EACd,IAAIG,EAAY,GAChB,MAAO,IAAM,CACJA,IACDA,EAAY,GACZ,KAAK,QAAQH,CAAO,EAE5B,CACJ,CACA,OAAQ,CACJ,GAAI,KAAK,SAAWN,EAAK,UAGpB,CACD,MAAMU,EAAM,KAAK,OAAO,QACxB,YAAK,QAAQ,KAAK,MAAM,EACjBA,CACX,CACJ,CACA,KAAM,CACF,GAAI,KAAK,QAAUV,EAAK,UAGnB,CACD,MAAMU,EAAM,KAAK,MAAM,QACvB,YAAK,QAAQ,KAAK,KAAK,EAChBA,CACX,CACJ,CACA,QAAQP,EAAM,CACV,GAAIA,EAAK,OAASH,EAAK,WAAaG,EAAK,OAASH,EAAK,UAAW,CAE9D,MAAMW,EAASR,EAAK,KACpBQ,EAAO,KAAOR,EAAK,KACnBA,EAAK,KAAK,KAAOQ,CACrB,MACSR,EAAK,OAASH,EAAK,WAAaG,EAAK,OAASH,EAAK,WAExD,KAAK,OAASA,EAAK,UACnB,KAAK,MAAQA,EAAK,WAEbG,EAAK,OAASH,EAAK,WAExB,KAAK,MAAQ,KAAK,MAAM,KACxB,KAAK,MAAM,KAAOA,EAAK,WAElBG,EAAK,OAASH,EAAK,YAExB,KAAK,OAAS,KAAK,OAAO,KAC1B,KAAK,OAAO,KAAOA,EAAK,WAG5B,KAAK,OAAS,CAClB,CACA,EAAE,OAAO,QAAQ,GAAI,CACjB,IAAIG,EAAO,KAAK,OAChB,KAAOA,IAASH,EAAK,WACjB,MAAMG,EAAK,QACXA,EAAOA,EAAK,IAEpB,CACJ,C,oECtHA,IAAIS,EAEJ,GAAI,OAAO,KAAQ,OAAW,KAAe,OAAO,KAAQ,OAAO,QAAY,IAAa,CACxF,MAAMC,EAAiB,KAAQ,OAAO,QACtCD,EAAc,CACV,IAAI,UAAW,CAAE,OAAOC,EAAe,QAAU,EACjD,IAAI,MAAO,CAAE,OAAOA,EAAe,IAAM,EACzC,IAAI,KAAM,CAAE,OAAOA,EAAe,GAAK,EACvC,KAAM,CAAE,OAAOA,EAAe,IAAI,CAAG,CACzC,CACJ,MAES,OAAO,QAAY,IACxBD,EAAc,CACV,IAAI,UAAW,CAAE,OAAO,QAAQ,QAAU,EAC1C,IAAI,MAAO,CAAE,OAAO,QAAQ,IAAM,EAClC,IAAI,KAAM,CAAE,OAAO,QAAQ,GAAK,EAChC,KAAM,CAAE,OAAO,QAAQ,IAAI,YAAiB,QAAQ,IAAI,CAAG,CAC/D,EAIAA,EAAc,CAEV,IAAI,UAAW,CAAE,OAAO,KAAY,QAAU,KAAc,SAAW,OAAS,EAChF,IAAI,MAAO,CAAmD,EAE9D,IAAI,KAAM,CAAE,MAAO,CAAC,CAAG,EACvB,KAAM,CAAE,MAAO,GAAK,CACxB,EAQG,MAAME,EAAMF,EAAY,IAOlBG,EAAMH,EAAY,IAKlBI,EAAWJ,EAAY,Q,kDCjDpC,MAAMK,EAAqB,KAAQ,aAAe,OAAO,KAAQ,YAAY,KAAQ,WAC9E,MAAMC,CAAU,CACnB,YAAYC,EAAgB,CACxB,KAAK,gBAAkBF,GAAqBE,EAC5C,KAAK,WAAa,KAAK,KAAK,EAC5B,KAAK,UAAY,EACrB,CACA,OAAO,OAAOA,EAAiB,GAAM,CACjC,OAAO,IAAID,EAAUC,CAAc,CACvC,CACA,MAAO,CACH,KAAK,UAAY,KAAK,KAAK,CAC/B,CACA,SAAU,CACN,OAAI,KAAK,YAAc,GACZ,KAAK,UAAY,KAAK,WAE1B,KAAK,KAAK,EAAI,KAAK,UAC9B,CACA,MAAO,CACH,OAAO,KAAK,gBAAkB,KAAQ,YAAY,IAAI,EAAI,KAAK,IAAI,CACvE,CACJ,C,2CCvBO,SAASC,EAAQC,EAAG,CACvB,OAAIA,EAAI,EACG,EAEPA,EAAI,IACG,IAEJA,EAAI,CACf,CACO,SAASC,EAASD,EAAG,CACxB,OAAIA,EAAI,EACG,EAEPA,EAAI,WACG,WAEJA,EAAI,CACf,C,mCCdO,MAAME,CAAS,CAClB,YAAYC,EAAYC,EAAQ,CAC5B,KAAK,WAAaD,EAClB,KAAK,OAASC,CAClB,CAOA,KAAKC,EAAgB,KAAK,WAAYC,EAAY,KAAK,OAAQ,CAC3D,OAAID,IAAkB,KAAK,YAAcC,IAAc,KAAK,OACjD,KAGA,IAAIJ,EAASG,EAAeC,CAAS,CAEpD,CAOA,MAAMC,EAAkB,EAAGC,EAAc,EAAG,CACxC,OAAO,KAAK,KAAK,KAAK,WAAaD,EAAiB,KAAK,OAASC,CAAW,CACjF,CAIA,OAAOC,EAAO,CACV,OAAOP,EAAS,OAAO,KAAMO,CAAK,CACtC,CAIA,OAAO,OAAO,EAAGC,EAAG,CAChB,MAAI,CAAC,GAAK,CAACA,EACA,GAEH,CAAC,CAAC,GACN,CAAC,CAACA,GACF,EAAE,aAAeA,EAAE,YACnB,EAAE,SAAWA,EAAE,MACvB,CAKA,SAASD,EAAO,CACZ,OAAOP,EAAS,SAAS,KAAMO,CAAK,CACxC,CAKA,OAAO,SAAS,EAAGC,EAAG,CAClB,OAAI,EAAE,WAAaA,EAAE,WACV,GAEPA,EAAE,WAAa,EAAE,WACV,GAEJ,EAAE,OAASA,EAAE,MACxB,CAKA,gBAAgBD,EAAO,CACnB,OAAOP,EAAS,gBAAgB,KAAMO,CAAK,CAC/C,CAKA,OAAO,gBAAgB,EAAGC,EAAG,CACzB,OAAI,EAAE,WAAaA,EAAE,WACV,GAEPA,EAAE,WAAa,EAAE,WACV,GAEJ,EAAE,QAAUA,EAAE,MACzB,CAIA,OAAO,QAAQ,EAAGA,EAAG,CACjB,MAAMC,EAAc,EAAE,WAAa,EAC7BC,EAAcF,EAAE,WAAa,EACnC,GAAIC,IAAgBC,EAAa,CAC7B,MAAMC,EAAU,EAAE,OAAS,EACrBC,EAAUJ,EAAE,OAAS,EAC3B,OAAOG,EAAUC,CACrB,CACA,OAAOH,EAAcC,CACzB,CAIA,OAAQ,CACJ,OAAO,IAAIV,EAAS,KAAK,WAAY,KAAK,MAAM,CACpD,CAIA,UAAW,CACP,MAAO,IAAM,KAAK,WAAa,IAAM,KAAK,OAAS,GACvD,CAKA,OAAO,KAAKa,EAAK,CACb,OAAO,IAAIb,EAASa,EAAI,WAAYA,EAAI,MAAM,CAClD,CAIA,OAAO,YAAYC,EAAK,CACpB,OAAQA,GACA,OAAOA,EAAI,YAAe,UAC1B,OAAOA,EAAI,QAAW,QAClC,CACJ,C,kDC7HO,MAAMC,CAAM,CACf,YAAYC,EAAiBC,EAAaC,EAAeC,EAAW,CAC3DH,EAAkBE,GAAmBF,IAAoBE,GAAiBD,EAAcE,GACzF,KAAK,gBAAkBD,EACvB,KAAK,YAAcC,EACnB,KAAK,cAAgBH,EACrB,KAAK,UAAYC,IAGjB,KAAK,gBAAkBD,EACvB,KAAK,YAAcC,EACnB,KAAK,cAAgBC,EACrB,KAAK,UAAYC,EAEzB,CAIA,SAAU,CACN,OAAOJ,EAAM,QAAQ,IAAI,CAC7B,CAIA,OAAO,QAAQK,EAAO,CAClB,OAAQA,EAAM,kBAAoBA,EAAM,eAAiBA,EAAM,cAAgBA,EAAM,SACzF,CAIA,iBAAiBC,EAAU,CACvB,OAAON,EAAM,iBAAiB,KAAMM,CAAQ,CAChD,CAIA,OAAO,iBAAiBD,EAAOC,EAAU,CAOrC,MANI,EAAAA,EAAS,WAAaD,EAAM,iBAAmBC,EAAS,WAAaD,EAAM,eAG3EC,EAAS,aAAeD,EAAM,iBAAmBC,EAAS,OAASD,EAAM,aAGzEC,EAAS,aAAeD,EAAM,eAAiBC,EAAS,OAASD,EAAM,UAI/E,CAKA,OAAO,uBAAuBA,EAAOC,EAAU,CAO3C,MANI,EAAAA,EAAS,WAAaD,EAAM,iBAAmBC,EAAS,WAAaD,EAAM,eAG3EC,EAAS,aAAeD,EAAM,iBAAmBC,EAAS,QAAUD,EAAM,aAG1EC,EAAS,aAAeD,EAAM,eAAiBC,EAAS,QAAUD,EAAM,UAIhF,CAIA,cAAcA,EAAO,CACjB,OAAOL,EAAM,cAAc,KAAMK,CAAK,CAC1C,CAIA,OAAO,cAAcA,EAAOE,EAAY,CAUpC,MATI,EAAAA,EAAW,gBAAkBF,EAAM,iBAAmBE,EAAW,cAAgBF,EAAM,iBAGvFE,EAAW,gBAAkBF,EAAM,eAAiBE,EAAW,cAAgBF,EAAM,eAGrFE,EAAW,kBAAoBF,EAAM,iBAAmBE,EAAW,YAAcF,EAAM,aAGvFE,EAAW,gBAAkBF,EAAM,eAAiBE,EAAW,UAAYF,EAAM,UAIzF,CAIA,oBAAoBA,EAAO,CACvB,OAAOL,EAAM,oBAAoB,KAAMK,CAAK,CAChD,CAIA,OAAO,oBAAoBA,EAAOE,EAAY,CAU1C,MATI,EAAAA,EAAW,gBAAkBF,EAAM,iBAAmBE,EAAW,cAAgBF,EAAM,iBAGvFE,EAAW,gBAAkBF,EAAM,eAAiBE,EAAW,cAAgBF,EAAM,eAGrFE,EAAW,kBAAoBF,EAAM,iBAAmBE,EAAW,aAAeF,EAAM,aAGxFE,EAAW,gBAAkBF,EAAM,eAAiBE,EAAW,WAAaF,EAAM,UAI1F,CAKA,UAAUA,EAAO,CACb,OAAOL,EAAM,UAAU,KAAMK,CAAK,CACtC,CAKA,OAAO,UAAUG,EAAGf,EAAG,CACnB,IAAIQ,EACAC,EACAC,EACAC,EACJ,OAAIX,EAAE,gBAAkBe,EAAE,iBACtBP,EAAkBR,EAAE,gBACpBS,EAAcT,EAAE,aAEXA,EAAE,kBAAoBe,EAAE,iBAC7BP,EAAkBR,EAAE,gBACpBS,EAAc,KAAK,IAAIT,EAAE,YAAae,EAAE,WAAW,IAGnDP,EAAkBO,EAAE,gBACpBN,EAAcM,EAAE,aAEhBf,EAAE,cAAgBe,EAAE,eACpBL,EAAgBV,EAAE,cAClBW,EAAYX,EAAE,WAETA,EAAE,gBAAkBe,EAAE,eAC3BL,EAAgBV,EAAE,cAClBW,EAAY,KAAK,IAAIX,EAAE,UAAWe,EAAE,SAAS,IAG7CL,EAAgBK,EAAE,cAClBJ,EAAYI,EAAE,WAEX,IAAIR,EAAMC,EAAiBC,EAAaC,EAAeC,CAAS,CAC3E,CAIA,gBAAgBC,EAAO,CACnB,OAAOL,EAAM,gBAAgB,KAAMK,CAAK,CAC5C,CAIA,OAAO,gBAAgBG,EAAGf,EAAG,CACzB,IAAIgB,EAAwBD,EAAE,gBAC1BE,EAAoBF,EAAE,YACtBG,EAAsBH,EAAE,cACxBI,EAAkBJ,EAAE,UACxB,MAAMK,EAAuBpB,EAAE,gBACzBqB,EAAmBrB,EAAE,YACrBsB,EAAqBtB,EAAE,cACvBuB,EAAiBvB,EAAE,UAmBzB,OAlBIgB,EAAwBI,GACxBJ,EAAwBI,EACxBH,EAAoBI,GAEfL,IAA0BI,IAC/BH,EAAoB,KAAK,IAAIA,EAAmBI,CAAgB,GAEhEH,EAAsBI,GACtBJ,EAAsBI,EACtBH,EAAkBI,GAEbL,IAAwBI,IAC7BH,EAAkB,KAAK,IAAIA,EAAiBI,CAAc,GAG1DP,EAAwBE,GAGxBF,IAA0BE,GAAuBD,EAAoBE,EAC9D,KAEJ,IAAIZ,EAAMS,EAAuBC,EAAmBC,EAAqBC,CAAe,CACnG,CAIA,YAAYpB,EAAO,CACf,OAAOQ,EAAM,YAAY,KAAMR,CAAK,CACxC,CAIA,OAAO,YAAYgB,EAAGf,EAAG,CACrB,MAAQ,CAAC,CAACe,GACN,CAAC,CAACf,GACFe,EAAE,kBAAoBf,EAAE,iBACxBe,EAAE,cAAgBf,EAAE,aACpBe,EAAE,gBAAkBf,EAAE,eACtBe,EAAE,YAAcf,EAAE,SAC1B,CAIA,gBAAiB,CACb,OAAOO,EAAM,eAAe,IAAI,CACpC,CAIA,OAAO,eAAeK,EAAO,CACzB,OAAO,IAAI,IAASA,EAAM,cAAeA,EAAM,SAAS,CAC5D,CAIA,kBAAmB,CACf,OAAOL,EAAM,iBAAiB,IAAI,CACtC,CAIA,OAAO,iBAAiBK,EAAO,CAC3B,OAAO,IAAI,IAASA,EAAM,gBAAiBA,EAAM,WAAW,CAChE,CAIA,UAAW,CACP,MAAO,IAAM,KAAK,gBAAkB,IAAM,KAAK,YAAc,OAAS,KAAK,cAAgB,IAAM,KAAK,UAAY,GACtH,CAIA,eAAeF,EAAeC,EAAW,CACrC,OAAO,IAAIJ,EAAM,KAAK,gBAAiB,KAAK,YAAaG,EAAeC,CAAS,CACrF,CAIA,iBAAiBH,EAAiBC,EAAa,CAC3C,OAAO,IAAIF,EAAMC,EAAiBC,EAAa,KAAK,cAAe,KAAK,SAAS,CACrF,CAIA,iBAAkB,CACd,OAAOF,EAAM,gBAAgB,IAAI,CACrC,CAIA,OAAO,gBAAgBK,EAAO,CAC1B,OAAO,IAAIL,EAAMK,EAAM,gBAAiBA,EAAM,YAAaA,EAAM,gBAAiBA,EAAM,WAAW,CACvG,CAEA,OAAO,cAAcY,EAAOC,EAAMD,EAAO,CACrC,OAAO,IAAIjB,EAAMiB,EAAM,WAAYA,EAAM,OAAQC,EAAI,WAAYA,EAAI,MAAM,CAC/E,CACA,OAAO,KAAKb,EAAO,CACf,OAAKA,EAGE,IAAIL,EAAMK,EAAM,gBAAiBA,EAAM,YAAaA,EAAM,cAAeA,EAAM,SAAS,EAFpF,IAGf,CAIA,OAAO,SAASN,EAAK,CACjB,OAAQA,GACA,OAAOA,EAAI,iBAAoB,UAC/B,OAAOA,EAAI,aAAgB,UAC3B,OAAOA,EAAI,eAAkB,UAC7B,OAAOA,EAAI,WAAc,QACrC,CAIA,OAAO,0BAA0BS,EAAGf,EAAG,CAMnC,MAJI,EAAAe,EAAE,cAAgBf,EAAE,iBAAoBe,EAAE,gBAAkBf,EAAE,iBAAmBe,EAAE,UAAYf,EAAE,aAIjGA,EAAE,cAAgBe,EAAE,iBAAoBf,EAAE,gBAAkBe,EAAE,iBAAmBf,EAAE,UAAYe,EAAE,YAKzG,CAIA,OAAO,gBAAgBA,EAAGf,EAAG,CAMzB,MAJI,EAAAe,EAAE,cAAgBf,EAAE,iBAAoBe,EAAE,gBAAkBf,EAAE,iBAAmBe,EAAE,WAAaf,EAAE,aAIlGA,EAAE,cAAgBe,EAAE,iBAAoBf,EAAE,gBAAkBe,EAAE,iBAAmBf,EAAE,WAAae,EAAE,YAK1G,CAKA,OAAO,yBAAyBA,EAAGf,EAAG,CAClC,GAAIe,GAAKf,EAAG,CACR,MAAM0B,EAAmBX,EAAE,gBAAkB,EACvCY,EAAmB3B,EAAE,gBAAkB,EAC7C,GAAI0B,IAAqBC,EAAkB,CACvC,MAAMC,EAAeb,EAAE,YAAc,EAC/Bc,EAAe7B,EAAE,YAAc,EACrC,GAAI4B,IAAiBC,EAAc,CAC/B,MAAMC,EAAiBf,EAAE,cAAgB,EACnCgB,EAAiB/B,EAAE,cAAgB,EACzC,GAAI8B,IAAmBC,EAAgB,CACnC,MAAMC,EAAajB,EAAE,UAAY,EAC3BkB,EAAajC,EAAE,UAAY,EACjC,OAAOgC,EAAaC,CACxB,CACA,OAAOH,EAAiBC,CAC5B,CACA,OAAOH,EAAeC,CAC1B,CACA,OAAOH,EAAmBC,CAC9B,CAGA,OAFiBZ,EAAI,EAAI,IACRf,EAAI,EAAI,EAE7B,CAKA,OAAO,uBAAuBe,EAAGf,EAAG,CAChC,OAAIe,EAAE,gBAAkBf,EAAE,cAClBe,EAAE,YAAcf,EAAE,UACde,EAAE,kBAAoBf,EAAE,gBACjBe,EAAE,YAAcf,EAAE,YAEtBe,EAAE,gBAAkBf,EAAE,gBAE1Be,EAAE,UAAYf,EAAE,UAEpBe,EAAE,cAAgBf,EAAE,aAC/B,CAIA,OAAO,mBAAmBY,EAAO,CAC7B,OAAOA,EAAM,cAAgBA,EAAM,eACvC,CACA,QAAS,CACL,OAAO,IACX,CACJ,C,yIC7WO,MAAMsB,CAAO,CAChB,OAAO,MAAMC,EAAWC,EAAY,CAChC,SAAO,MAASD,EAAWC,CAAU,CACzC,CACJ,CACAF,EAAO,QAAU,KACjBA,EAAO,MAAQ,KACfA,EAAO,IAAM,IACbA,EAAO,QAAU,IACV,SAASG,GAAsB,CAClC,MAAO,CACH,OAAQ,OACR,UAAW,OACX,wBAAyB,IACzB,QAAS,KACT,QAAS,KACT,OAAQH,EACR,SAAU,IACV,MAAO,IACP,UAAW,IACX,mBAAoB,KACpB,eAAgB,KAChB,UAAW,KACX,IAAK,IACL,MAAO,IACX,CACJ,C,yGCjCA,MAAMI,EAAoC,EAC1C,SAASC,EAAYC,EAAkBC,EAAkBC,EAA6BC,EAAQ,CAE1F,OADiB,IAAI,KAAQH,EAAkBC,EAAkBC,CAA2B,EAC5E,YAAYC,CAAM,CACtC,CACA,MAAMC,CAAa,CACf,YAAYC,EAAO,CACf,MAAMC,EAAe,CAAC,EAChBC,EAAa,CAAC,EACpB,QAASC,EAAI,EAAGC,EAASJ,EAAM,OAAQG,EAAIC,EAAQD,IAC/CF,EAAaE,CAAC,EAAIE,EAAuBL,EAAMG,CAAC,EAAG,CAAC,EACpDD,EAAWC,CAAC,EAAIG,EAAsBN,EAAMG,CAAC,EAAG,CAAC,EAErD,KAAK,MAAQH,EACb,KAAK,cAAgBC,EACrB,KAAK,YAAcC,CACvB,CACA,aAAc,CACV,MAAMK,EAAW,CAAC,EAClB,QAASJ,EAAI,EAAGK,EAAM,KAAK,MAAM,OAAQL,EAAIK,EAAKL,IAC9CI,EAASJ,CAAC,EAAI,KAAK,MAAMA,CAAC,EAAE,UAAU,KAAK,cAAcA,CAAC,EAAI,EAAG,KAAK,YAAYA,CAAC,EAAI,CAAC,EAE5F,OAAOI,CACX,CACA,iBAAiBE,EAAO,CACpB,OAAO,KAAK,MAAMA,CAAK,CAC3B,CACA,mBAAmBN,EAAG,CAClB,OAAOA,EAAI,CACf,CACA,iBAAiBA,EAAG,CAChB,OAAOA,EAAI,CACf,CACA,mBAAmBO,EAA4BC,EAAYC,EAAU,CACjE,MAAMC,EAAY,CAAC,EACbC,EAAc,CAAC,EACfC,EAAU,CAAC,EACjB,IAAIP,EAAM,EACV,QAASC,EAAQE,EAAYF,GAASG,EAAUH,IAAS,CACrD,MAAMO,EAAc,KAAK,MAAMP,CAAK,EAC9B7C,EAAe8C,EAA6B,KAAK,cAAcD,CAAK,EAAI,EACxE3C,EAAa4C,EAA6B,KAAK,YAAYD,CAAK,EAAIO,EAAY,OAAS,EAC/F,QAASC,EAAMrD,EAAaqD,EAAMnD,EAAWmD,IACzCJ,EAAUL,CAAG,EAAIQ,EAAY,WAAWC,EAAM,CAAC,EAC/CH,EAAYN,CAAG,EAAIC,EAAQ,EAC3BM,EAAQP,CAAG,EAAIS,EACfT,IAEA,CAACE,GAA8BD,EAAQG,IAEvCC,EAAUL,CAAG,EAAI,GACjBM,EAAYN,CAAG,EAAIC,EAAQ,EAC3BM,EAAQP,CAAG,EAAIQ,EAAY,OAAS,EACpCR,IAER,CACA,OAAO,IAAIU,EAAaL,EAAWC,EAAaC,CAAO,CAC3D,CACJ,CACA,MAAMG,CAAa,CACf,YAAYL,EAAWC,EAAaC,EAAS,CACzC,KAAK,WAAaF,EAClB,KAAK,aAAeC,EACpB,KAAK,SAAWC,CACpB,CACA,UAAW,CACP,MAAQ,IAAM,KAAK,WAAW,IAAI,CAACI,EAAGC,KAASD,IAAM,GAA6B,MAAQ,OAAO,aAAaA,CAAC,GAAK,KAAK,KAAK,aAAaC,CAAG,CAAC,IAAI,KAAK,SAASA,CAAG,CAAC,GAAG,EAAE,KAAK,IAAI,EAAI,GAC3L,CACA,aAAaX,EAAOY,EAAK,CACrB,GAAIZ,EAAQ,GAAKA,GAASY,EAAI,OAC1B,MAAM,IAAI,MAAM,eAAe,CAEvC,CACA,aAAc,CACV,OAAO,KAAK,UAChB,CACA,mBAAmBlB,EAAG,CAClB,OAAIA,EAAI,GAAKA,IAAM,KAAK,aAAa,OAG1B,KAAK,iBAAiBA,EAAI,CAAC,GAEtC,KAAK,aAAaA,EAAG,KAAK,YAAY,EAC/B,KAAK,aAAaA,CAAC,EAC9B,CACA,iBAAiBA,EAAG,CAChB,OAAIA,IAAM,GAGC,KAAK,mBAAmBA,EAAI,CAAC,GAExC,KAAK,aAAaA,EAAG,KAAK,YAAY,EAClC,KAAK,WAAWA,CAAC,IAAM,GAChB,KAAK,aAAaA,CAAC,EAAI,EAE3B,KAAK,aAAaA,CAAC,EAC9B,CACA,eAAeA,EAAG,CACd,OAAIA,EAAI,GAAKA,IAAM,KAAK,SAAS,OAGtB,KAAK,aAAaA,EAAI,CAAC,GAElC,KAAK,aAAaA,EAAG,KAAK,QAAQ,EAC3B,KAAK,SAASA,CAAC,EAC1B,CACA,aAAaA,EAAG,CACZ,OAAIA,IAAM,GAGC,KAAK,eAAeA,EAAI,CAAC,GAEpC,KAAK,aAAaA,EAAG,KAAK,QAAQ,EAC9B,KAAK,WAAWA,CAAC,IAAM,GAChB,EAEJ,KAAK,SAASA,CAAC,EAAI,EAC9B,CACJ,CACA,MAAMmB,CAAW,CACb,YAAYC,EAAyBC,EAAqBC,EAAuBC,EAAmBC,EAAyBC,EAAqBC,EAAuBC,EAAmB,CACxL,KAAK,wBAA0BP,EAC/B,KAAK,oBAAsBC,EAC3B,KAAK,sBAAwBC,EAC7B,KAAK,kBAAoBC,EACzB,KAAK,wBAA0BC,EAC/B,KAAK,oBAAsBC,EAC3B,KAAK,sBAAwBC,EAC7B,KAAK,kBAAoBC,CAC7B,CACA,OAAO,qBAAqBC,EAAYC,EAAsBC,EAAsB,CAChF,MAAMV,EAA0BS,EAAqB,mBAAmBD,EAAW,aAAa,EAC1FP,EAAsBQ,EAAqB,eAAeD,EAAW,aAAa,EAClFN,EAAwBO,EAAqB,iBAAiBD,EAAW,cAAgBA,EAAW,eAAiB,CAAC,EACtHL,EAAoBM,EAAqB,aAAaD,EAAW,cAAgBA,EAAW,eAAiB,CAAC,EAC9GJ,EAA0BM,EAAqB,mBAAmBF,EAAW,aAAa,EAC1FH,EAAsBK,EAAqB,eAAeF,EAAW,aAAa,EAClFF,EAAwBI,EAAqB,iBAAiBF,EAAW,cAAgBA,EAAW,eAAiB,CAAC,EACtHD,EAAoBG,EAAqB,aAAaF,EAAW,cAAgBA,EAAW,eAAiB,CAAC,EACpH,OAAO,IAAIT,EAAWC,EAAyBC,EAAqBC,EAAuBC,EAAmBC,EAAyBC,EAAqBC,EAAuBC,CAAiB,CACxM,CACJ,CACA,SAASI,EAAuBC,EAAY,CACxC,GAAIA,EAAW,QAAU,EACrB,OAAOA,EAEX,MAAMnH,EAAS,CAACmH,EAAW,CAAC,CAAC,EAC7B,IAAIC,EAAapH,EAAO,CAAC,EACzB,QAAS,EAAI,EAAGwF,EAAM2B,EAAW,OAAQ,EAAI3B,EAAK,IAAK,CACnD,MAAM6B,EAAaF,EAAW,CAAC,EACzBG,EAAyBD,EAAW,eAAiBD,EAAW,cAAgBA,EAAW,gBAC3FG,EAAyBF,EAAW,eAAiBD,EAAW,cAAgBA,EAAW,gBAE1E,KAAK,IAAIE,EAAwBC,CAAsB,EACzD9C,GAEjB2C,EAAW,eAAkBC,EAAW,cAAgBA,EAAW,eAAkBD,EAAW,cAChGA,EAAW,eAAkBC,EAAW,cAAgBA,EAAW,eAAkBD,EAAW,gBAIhGpH,EAAO,KAAKqH,CAAU,EACtBD,EAAaC,EAErB,CACA,OAAOrH,CACX,CACA,MAAMwH,CAAW,CACb,YAAYjB,EAAyBE,EAAuBE,EAAyBE,EAAuBY,EAAa,CACrH,KAAK,wBAA0BlB,EAC/B,KAAK,sBAAwBE,EAC7B,KAAK,wBAA0BE,EAC/B,KAAK,sBAAwBE,EAC7B,KAAK,YAAcY,CACvB,CACA,OAAO,qBAAqB/B,EAA4BqB,EAAYW,EAAsBC,EAAsBC,EAAkBC,EAA0BC,EAA8B,CACtL,IAAIvB,EACAE,EACAE,EACAE,EACAY,EAiBJ,GAhBIV,EAAW,iBAAmB,GAC9BR,EAA0BmB,EAAqB,mBAAmBX,EAAW,aAAa,EAAI,EAC9FN,EAAwB,IAGxBF,EAA0BmB,EAAqB,mBAAmBX,EAAW,aAAa,EAC1FN,EAAwBiB,EAAqB,iBAAiBX,EAAW,cAAgBA,EAAW,eAAiB,CAAC,GAEtHA,EAAW,iBAAmB,GAC9BJ,EAA0BgB,EAAqB,mBAAmBZ,EAAW,aAAa,EAAI,EAC9FF,EAAwB,IAGxBF,EAA0BgB,EAAqB,mBAAmBZ,EAAW,aAAa,EAC1FF,EAAwBc,EAAqB,iBAAiBZ,EAAW,cAAgBA,EAAW,eAAiB,CAAC,GAEtHc,GAA4Bd,EAAW,eAAiB,GAAKA,EAAW,eAAiB,IAAMA,EAAW,eAAiB,GAAKA,EAAW,eAAiB,IAAMa,EAAiB,EAAG,CAEtL,MAAMZ,EAAuBU,EAAqB,mBAAmBhC,EAA4BqB,EAAW,cAAeA,EAAW,cAAgBA,EAAW,eAAiB,CAAC,EAC7KE,EAAuBU,EAAqB,mBAAmBjC,EAA4BqB,EAAW,cAAeA,EAAW,cAAgBA,EAAW,eAAiB,CAAC,EACnL,GAAIC,EAAqB,YAAY,EAAE,OAAS,GAAKC,EAAqB,YAAY,EAAE,OAAS,EAAG,CAChG,IAAIE,EAAazC,EAAYsC,EAAsBC,EAAsBW,EAAkB,EAAI,EAAE,QAC7FE,IACAX,EAAaD,EAAuBC,CAAU,GAElDM,EAAc,CAAC,EACf,QAAStC,EAAI,EAAGC,EAAS+B,EAAW,OAAQhC,EAAIC,EAAQD,IACpDsC,EAAY,KAAKnB,EAAW,qBAAqBa,EAAWhC,CAAC,EAAG6B,EAAsBC,CAAoB,CAAC,CAEnH,CACJ,CACA,OAAO,IAAIO,EAAWjB,EAAyBE,EAAuBE,EAAyBE,EAAuBY,CAAW,CACrI,CACJ,CACO,MAAMM,CAAa,CACtB,YAAYC,EAAeC,EAAeC,EAAM,CAC5C,KAAK,yBAA2BA,EAAK,yBACrC,KAAK,6BAA+BA,EAAK,6BACzC,KAAK,2BAA6BA,EAAK,2BACvC,KAAK,qBAAuBA,EAAK,qBACjC,KAAK,cAAgBF,EACrB,KAAK,cAAgBC,EACrB,KAAK,SAAW,IAAIlD,EAAaiD,CAAa,EAC9C,KAAK,SAAW,IAAIjD,EAAakD,CAAa,EAC9C,KAAK,iBAAmBE,EAAkCD,EAAK,kBAAkB,EACjF,KAAK,iBAAmBC,EAAkCD,EAAK,qBAAuB,EAAI,EAAI,KAAK,IAAIA,EAAK,mBAAoB,GAAI,CAAC,CACzI,CACA,aAAc,CACV,GAAI,KAAK,SAAS,MAAM,SAAW,GAAK,KAAK,SAAS,MAAM,CAAC,EAAE,SAAW,EAEtE,OAAI,KAAK,SAAS,MAAM,SAAW,GAAK,KAAK,SAAS,MAAM,CAAC,EAAE,SAAW,EAC/D,CACH,UAAW,GACX,QAAS,CAAC,CACd,EAEG,CACH,UAAW,GACX,QAAS,CAAC,CACF,wBAAyB,EACzB,sBAAuB,EACvB,wBAAyB,EACzB,sBAAuB,KAAK,SAAS,MAAM,OAC3C,YAAa,CAAC,CACN,kBAAmB,EACnB,sBAAuB,EACvB,oBAAqB,EACrB,wBAAyB,EACzB,kBAAmB,EACnB,sBAAuB,EACvB,oBAAqB,EACrB,wBAAyB,CAC7B,CAAC,CACT,CAAC,CACT,EAEJ,GAAI,KAAK,SAAS,MAAM,SAAW,GAAK,KAAK,SAAS,MAAM,CAAC,EAAE,SAAW,EAEtE,MAAO,CACH,UAAW,GACX,QAAS,CAAC,CACF,wBAAyB,EACzB,sBAAuB,KAAK,SAAS,MAAM,OAC3C,wBAAyB,EACzB,sBAAuB,EACvB,YAAa,CAAC,CACN,kBAAmB,EACnB,sBAAuB,EACvB,oBAAqB,EACrB,wBAAyB,EACzB,kBAAmB,EACnB,sBAAuB,EACvB,oBAAqB,EACrB,wBAAyB,CAC7B,CAAC,CACT,CAAC,CACT,EAEJ,MAAME,EAAa1D,EAAY,KAAK,SAAU,KAAK,SAAU,KAAK,iBAAkB,KAAK,oBAAoB,EACvGyC,EAAaiB,EAAW,QACxBC,EAAYD,EAAW,UAG7B,GAAI,KAAK,2BAA4B,CACjC,MAAME,EAAc,CAAC,EACrB,QAASnD,EAAI,EAAGC,EAAS+B,EAAW,OAAQhC,EAAIC,EAAQD,IACpDmD,EAAY,KAAKd,EAAW,qBAAqB,KAAK,2BAA4BL,EAAWhC,CAAC,EAAG,KAAK,SAAU,KAAK,SAAU,KAAK,iBAAkB,KAAK,yBAA0B,KAAK,4BAA4B,CAAC,EAE3N,MAAO,CACH,UAAWkD,EACX,QAASC,CACb,CACJ,CAGA,MAAMtI,EAAS,CAAC,EAChB,IAAIuI,EAAoB,EACpBC,EAAoB,EACxB,QAASrD,EAAI,GAAeK,EAAM2B,EAAW,OAAQhC,EAAIK,EAAKL,IAAK,CAC/D,MAAMsD,EAActD,EAAI,EAAIK,EAAM2B,EAAWhC,EAAI,CAAC,EAAI,KAChDuD,EAAgBD,EAAaA,EAAW,cAAgB,KAAK,cAAc,OAC3EE,EAAgBF,EAAaA,EAAW,cAAgB,KAAK,cAAc,OACjF,KAAOF,EAAoBG,GAAgBF,EAAoBG,GAAc,CACzE,MAAMC,EAAe,KAAK,cAAcL,CAAiB,EACnDM,EAAe,KAAK,cAAcL,CAAiB,EACzD,GAAII,IAAiBC,EAAc,CAG/B,CACI,IAAIrC,EAAsBnB,EAAuBuD,EAAc,CAAC,EAC5DhC,EAAsBvB,EAAuBwD,EAAc,CAAC,EAChE,KAAOrC,EAAsB,GAAKI,EAAsB,GAAG,CACvD,MAAMkC,EAAeF,EAAa,WAAWpC,EAAsB,CAAC,EAC9DuC,EAAeF,EAAa,WAAWjC,EAAsB,CAAC,EACpE,GAAIkC,IAAiBC,EACjB,MAEJvC,IACAI,GACJ,EACIJ,EAAsB,GAAKI,EAAsB,IACjD,KAAK,8BAA8B5G,EAAQuI,EAAoB,EAAG,EAAG/B,EAAqBgC,EAAoB,EAAG,EAAG5B,CAAmB,CAE/I,CAEA,CACI,IAAIF,EAAoBpB,EAAsBsD,EAAc,CAAC,EACzD9B,EAAoBxB,EAAsBuD,EAAc,CAAC,EAC7D,MAAMG,EAAoBJ,EAAa,OAAS,EAC1CK,EAAoBJ,EAAa,OAAS,EAChD,KAAOnC,EAAoBsC,GAAqBlC,EAAoBmC,GAAmB,CACnF,MAAMH,EAAeF,EAAa,WAAWlC,EAAoB,CAAC,EAC5DqC,EAAeH,EAAa,WAAW9B,EAAoB,CAAC,EAClE,GAAIgC,IAAiBC,EACjB,MAEJrC,IACAI,GACJ,EACIJ,EAAoBsC,GAAqBlC,EAAoBmC,IAC7D,KAAK,8BAA8BjJ,EAAQuI,EAAoB,EAAG7B,EAAmBsC,EAAmBR,EAAoB,EAAG1B,EAAmBmC,CAAiB,CAE3K,CACJ,CACAV,IACAC,GACJ,CACIC,IAEAzI,EAAO,KAAKwH,EAAW,qBAAqB,KAAK,2BAA4BiB,EAAY,KAAK,SAAU,KAAK,SAAU,KAAK,iBAAkB,KAAK,yBAA0B,KAAK,4BAA4B,CAAC,EAC/MF,GAAqBE,EAAW,eAChCD,GAAqBC,EAAW,eAExC,CACA,MAAO,CACH,UAAWJ,EACX,QAASrI,CACb,CACJ,CACA,8BAA8BA,EAAQkJ,EAAoB1C,EAAqBE,EAAmByC,EAAoBvC,EAAqBE,EAAmB,CAC1J,GAAI,KAAK,+BAA+B9G,EAAQkJ,EAAoB1C,EAAqBE,EAAmByC,EAAoBvC,EAAqBE,CAAiB,EAElK,OAEJ,IAAIW,EACA,KAAK,2BACLA,EAAc,CAAC,IAAInB,EAAW4C,EAAoB1C,EAAqB0C,EAAoBxC,EAAmByC,EAAoBvC,EAAqBuC,EAAoBrC,CAAiB,CAAC,GAEjM9G,EAAO,KAAK,IAAIwH,EAAW0B,EAAoBA,EAAoBC,EAAoBA,EAAoB1B,CAAW,CAAC,CAC3H,CACA,+BAA+BzH,EAAQkJ,EAAoB1C,EAAqBE,EAAmByC,EAAoBvC,EAAqBE,EAAmB,CAC3J,MAAMtB,EAAMxF,EAAO,OACnB,GAAIwF,IAAQ,EACR,MAAO,GAEX,MAAM4B,EAAapH,EAAOwF,EAAM,CAAC,EACjC,OAAI4B,EAAW,wBAA0B,GAAKA,EAAW,wBAA0B,EAExE,GAEPA,EAAW,sBAAwB,IAAM8B,GAAsB9B,EAAW,sBAAwB,IAAM+B,GACxG/B,EAAW,sBAAwB8B,EACnC9B,EAAW,sBAAwB+B,EAC/B,KAAK,0BAA4B/B,EAAW,aAC5CA,EAAW,YAAY,KAAK,IAAId,EAAW4C,EAAoB1C,EAAqB0C,EAAoBxC,EAAmByC,EAAoBvC,EAAqBuC,EAAoBrC,CAAiB,CAAC,EAEvM,IAEJ,EACX,CACJ,CACA,SAASzB,EAAuB+D,EAAKC,EAAc,CAC/C,MAAMC,EAAIC,EAAA,GAAgCH,CAAG,EAC7C,OAAIE,IAAM,GACCD,EAEJC,EAAI,CACf,CACA,SAAShE,EAAsB8D,EAAKC,EAAc,CAC9C,MAAMC,EAAIC,EAAA,GAA+BH,CAAG,EAC5C,OAAIE,IAAM,GACCD,EAEJC,EAAI,CACf,CACA,SAASnB,EAAkCqB,EAAgB,CACvD,GAAIA,IAAmB,EACnB,MAAO,IAAM,GAEjB,MAAMC,EAAY,KAAK,IAAI,EAC3B,MAAO,IACI,KAAK,IAAI,EAAIA,EAAYD,CAExC,C,eC7ZO,MAAME,CAAgB,CACzB,YAAYC,EAAK3E,EAAO4E,EAAKC,EAAW,CACpC,KAAK,KAAOF,EACZ,KAAK,OAAS3E,EACd,KAAK,KAAO4E,EACZ,KAAK,WAAaC,EAClB,KAAK,YAAc,KACnB,KAAK,iBAAmB,IAC5B,CACA,SAAU,CACN,KAAK,OAAO,OAAS,CACzB,CACA,IAAI,SAAU,CACV,OAAO,KAAK,UAChB,CACA,SAAU,CACN,OAAI,KAAK,mBAAqB,OAC1B,KAAK,iBAAmB,KAAK,OAAO,KAAK,KAAK,IAAI,GAE/C,KAAK,gBAChB,CACA,SAAS,EAAG,CACJ,EAAE,KAAO,EAAE,MAAQ,KAAK,OACxB,KAAK,KAAO,EAAE,IACd,KAAK,YAAc,MAGvB,MAAMC,EAAU,EAAE,QAClB,UAAWC,KAAUD,EACjB,KAAK,mBAAmBC,EAAO,KAAK,EACpC,KAAK,kBAAkB,IAAI,IAASA,EAAO,MAAM,gBAAiBA,EAAO,MAAM,WAAW,EAAGA,EAAO,IAAI,EAE5G,KAAK,WAAa,EAAE,UACpB,KAAK,iBAAmB,IAC5B,CACA,mBAAoB,CAChB,GAAI,CAAC,KAAK,YAAa,CACnB,MAAMC,EAAY,KAAK,KAAK,OACtBC,EAAc,KAAK,OAAO,OAC1BC,EAAkB,IAAI,YAAYD,CAAW,EACnD,QAAS9E,EAAI,EAAGA,EAAI8E,EAAa9E,IAC7B+E,EAAgB/E,CAAC,EAAI,KAAK,OAAOA,CAAC,EAAE,OAAS6E,EAEjD,KAAK,YAAc,IAAI,IAAkBE,CAAe,CAC5D,CACJ,CAIA,aAAaC,EAAWC,EAAU,CAC9B,KAAK,OAAOD,CAAS,EAAIC,EACrB,KAAK,aAEL,KAAK,YAAY,SAASD,EAAW,KAAK,OAAOA,CAAS,EAAE,OAAS,KAAK,KAAK,MAAM,CAE7F,CACA,mBAAmBpH,EAAO,CACtB,GAAIA,EAAM,kBAAoBA,EAAM,cAAe,CAC/C,GAAIA,EAAM,cAAgBA,EAAM,UAE5B,OAGJ,KAAK,aAAaA,EAAM,gBAAkB,EAAG,KAAK,OAAOA,EAAM,gBAAkB,CAAC,EAAE,UAAU,EAAGA,EAAM,YAAc,CAAC,EAChH,KAAK,OAAOA,EAAM,gBAAkB,CAAC,EAAE,UAAUA,EAAM,UAAY,CAAC,CAAC,EAC3E,MACJ,CAEA,KAAK,aAAaA,EAAM,gBAAkB,EAAG,KAAK,OAAOA,EAAM,gBAAkB,CAAC,EAAE,UAAU,EAAGA,EAAM,YAAc,CAAC,EAChH,KAAK,OAAOA,EAAM,cAAgB,CAAC,EAAE,UAAUA,EAAM,UAAY,CAAC,CAAC,EAEzE,KAAK,OAAO,OAAOA,EAAM,gBAAiBA,EAAM,cAAgBA,EAAM,eAAe,EACjF,KAAK,aAEL,KAAK,YAAY,aAAaA,EAAM,gBAAiBA,EAAM,cAAgBA,EAAM,eAAe,CAExG,CACA,kBAAkBC,EAAUqH,EAAY,CACpC,GAAIA,EAAW,SAAW,EAEtB,OAEJ,MAAMC,KAAc,MAAWD,CAAU,EACzC,GAAIC,EAAY,SAAW,EAAG,CAE1B,KAAK,aAAatH,EAAS,WAAa,EAAG,KAAK,OAAOA,EAAS,WAAa,CAAC,EAAE,UAAU,EAAGA,EAAS,OAAS,CAAC,EAC1GsH,EAAY,CAAC,EACb,KAAK,OAAOtH,EAAS,WAAa,CAAC,EAAE,UAAUA,EAAS,OAAS,CAAC,CAAC,EACzE,MACJ,CAEAsH,EAAYA,EAAY,OAAS,CAAC,GAAK,KAAK,OAAOtH,EAAS,WAAa,CAAC,EAAE,UAAUA,EAAS,OAAS,CAAC,EAEzG,KAAK,aAAaA,EAAS,WAAa,EAAG,KAAK,OAAOA,EAAS,WAAa,CAAC,EAAE,UAAU,EAAGA,EAAS,OAAS,CAAC,EAC1GsH,EAAY,CAAC,CAAC,EAEpB,MAAMC,EAAa,IAAI,YAAYD,EAAY,OAAS,CAAC,EACzD,QAASnF,EAAI,EAAGA,EAAImF,EAAY,OAAQnF,IACpC,KAAK,OAAO,OAAOnC,EAAS,WAAamC,EAAI,EAAG,EAAGmF,EAAYnF,CAAC,CAAC,EACjEoF,EAAWpF,EAAI,CAAC,EAAImF,EAAYnF,CAAC,EAAE,OAAS,KAAK,KAAK,OAEtD,KAAK,aAEL,KAAK,YAAY,aAAanC,EAAS,WAAYuH,CAAU,CAErE,CACJ,C,0BC5GO,MAAMC,CAAY,CACrB,YAAYC,EAAMC,EAAMrB,EAAc,CAClC,MAAMsB,EAAO,IAAI,WAAWF,EAAOC,CAAI,EACvC,QAASvF,EAAI,EAAGK,EAAMiF,EAAOC,EAAMvF,EAAIK,EAAKL,IACxCwF,EAAKxF,CAAC,EAAIkE,EAEd,KAAK,MAAQsB,EACb,KAAK,KAAOF,EACZ,KAAK,KAAOC,CAChB,CACA,IAAIE,EAAK3E,EAAK,CACV,OAAO,KAAK,MAAM2E,EAAM,KAAK,KAAO3E,CAAG,CAC3C,CACA,IAAI2E,EAAK3E,EAAK4E,EAAO,CACjB,KAAK,MAAMD,EAAM,KAAK,KAAO3E,CAAG,EAAI4E,CACxC,CACJ,CACO,MAAMC,CAAa,CACtB,YAAYC,EAAO,CACf,IAAIC,EAAc,EACdC,EAAW,EACf,QAAS9F,EAAI,EAAGK,EAAMuF,EAAM,OAAQ5F,EAAIK,EAAKL,IAAK,CAC9C,KAAM,CAAC+F,EAAMC,EAAQC,CAAE,EAAIL,EAAM5F,CAAC,EAC9BgG,EAASH,IACTA,EAAcG,GAEdD,EAAOD,IACPA,EAAWC,GAEXE,EAAKH,IACLA,EAAWG,EAEnB,CACAJ,IACAC,IACA,MAAMI,EAAS,IAAIb,EAAYS,EAAUD,EAAa,CAAqB,EAC3E,QAAS7F,EAAI,EAAGK,EAAMuF,EAAM,OAAQ5F,EAAIK,EAAKL,IAAK,CAC9C,KAAM,CAAC+F,EAAMC,EAAQC,CAAE,EAAIL,EAAM5F,CAAC,EAClCkG,EAAO,IAAIH,EAAMC,EAAQC,CAAE,CAC/B,CACA,KAAK,QAAUC,EACf,KAAK,aAAeL,CACxB,CACA,UAAUM,EAAcH,EAAQ,CAC5B,OAAIA,EAAS,GAAKA,GAAU,KAAK,aACtB,EAEJ,KAAK,QAAQ,IAAIG,EAAcH,CAAM,CAChD,CACJ,CAEA,IAAII,EAAgB,KACpB,SAASC,IAAkB,CACvB,OAAID,IAAkB,OAClBA,EAAgB,IAAIT,EAAa,CAC7B,CAAC,EAAqB,IAAsB,CAAe,EAC3D,CAAC,EAAqB,GAAqB,CAAe,EAC1D,CAAC,EAAqB,IAAsB,CAAe,EAC3D,CAAC,EAAqB,GAAqB,CAAe,EAC1D,CAAC,EAAiB,IAAsB,CAAgB,EACxD,CAAC,EAAiB,GAAqB,CAAgB,EACvD,CAAC,EAAkB,IAAsB,CAAiB,EAC1D,CAAC,EAAkB,GAAqB,CAAiB,EACzD,CAAC,EAAmB,IAAsB,CAAkB,EAC5D,CAAC,EAAmB,GAAqB,CAAkB,EAC3D,CAAC,EAAoB,IAAsB,CAAyB,EACpE,CAAC,EAAoB,GAAqB,CAAyB,EACnE,CAAC,EAAoB,GAAyB,EAAyB,EACvE,CAAC,EAAiB,IAAsB,CAAgB,EACxD,CAAC,EAAiB,GAAqB,CAAgB,EACvD,CAAC,EAAkB,IAAsB,CAAiB,EAC1D,CAAC,EAAkB,GAAqB,CAAiB,EACzD,CAAC,EAAmB,IAAsB,CAAyB,EACnE,CAAC,EAAmB,GAAqB,CAAyB,EAClE,CAAC,EAA2B,GAAyB,EAAyB,EAC9E,CAAC,GAA2B,GAAyB,EAA0B,EAC/E,CAAC,GAA4B,GAAyB,EAAkB,CAC5E,CAAC,GAEES,CACX,CACA,IAAIE,EAAc,KAClB,SAASC,IAAgB,CACrB,GAAID,IAAgB,KAAM,CACtBA,EAAc,IAAI,IAAoB,CAA2B,EAEjE,MAAME,EAA+B,uLACrC,QAASxG,EAAI,EAAGA,EAAIwG,EAA6B,OAAQxG,IACrDsG,EAAY,IAAIE,EAA6B,WAAWxG,CAAC,EAAG,CAAuC,EAEvG,MAAMyG,EAA6B,OACnC,QAASzG,EAAI,EAAGA,EAAIyG,EAA2B,OAAQzG,IACnDsG,EAAY,IAAIG,EAA2B,WAAWzG,CAAC,EAAG,CAAkC,CAEpG,CACA,OAAOsG,CACX,CACO,MAAMI,CAAa,CACtB,OAAO,YAAYC,EAAYC,EAAMnK,EAAYoK,EAAgBC,EAAc,CAE3E,IAAIC,EAAwBD,EAAe,EAC3C,EAAG,CACC,MAAMd,EAASY,EAAK,WAAWG,CAAqB,EAEpD,GADgBJ,EAAW,IAAIX,CAAM,IACrB,EACZ,MAEJe,GACJ,OAASA,EAAwBF,GAEjC,GAAIA,EAAiB,EAAG,CACpB,MAAMG,EAAqBJ,EAAK,WAAWC,EAAiB,CAAC,EACvDI,EAAqBL,EAAK,WAAWG,CAAqB,GAC3DC,IAAuB,IAA+BC,IAAuB,IAC1ED,IAAuB,IAAuCC,IAAuB,IACrFD,IAAuB,KAAqCC,IAAuB,MAIvFF,GAER,CACA,MAAO,CACH,MAAO,CACH,gBAAiBtK,EACjB,YAAaoK,EAAiB,EAC9B,cAAepK,EACf,UAAWsK,EAAwB,CACvC,EACA,IAAKH,EAAK,UAAUC,EAAgBE,EAAwB,CAAC,CACjE,CACJ,CACA,OAAO,aAAaG,EAAOC,EAAed,GAAgB,EAAG,CACzD,MAAMM,EAAaJ,GAAc,EAC3B1L,EAAS,CAAC,EAChB,QAASmF,EAAI,EAAGoH,EAAYF,EAAM,aAAa,EAAGlH,GAAKoH,EAAWpH,IAAK,CACnE,MAAM4G,EAAOM,EAAM,eAAelH,CAAC,EAC7BK,EAAMuG,EAAK,OACjB,IAAIS,EAAI,EACJR,EAAiB,EACjBS,EAAkB,EAClBC,EAAQ,EACRC,EAAgB,GAChBC,EAAuB,GACvBC,EAAmB,GACnBC,EAAsB,GAC1B,KAAON,EAAIhH,GAAK,CACZ,IAAIuH,EAAoB,GACxB,MAAM5B,EAASY,EAAK,WAAWS,CAAC,EAChC,GAAIE,IAAU,GAAuB,CACjC,IAAIM,EACJ,OAAQ7B,EAAQ,CACZ,IAAK,IACDwB,EAAgB,GAChBK,EAAU,EACV,MACJ,IAAK,IACDA,EAAWL,EAAgB,EAA8B,EACzD,MACJ,IAAK,IACDE,EAAmB,GACnBD,EAAuB,GACvBI,EAAU,EACV,MACJ,IAAK,IACDH,EAAmB,GACnBG,EAAWJ,EAAuB,EAA8B,EAChE,MACJ,IAAK,KACDE,EAAsB,GACtBE,EAAU,EACV,MACJ,IAAK,KACDA,EAAWF,EAAsB,EAA8B,EAC/D,MAEJ,IAAK,IACDE,EAAWP,IAAoB,GAAgC,EAA0C,EACzG,MACJ,IAAK,IACDO,EAAWP,IAAoB,GAAgC,EAA0C,EACzG,MACJ,IAAK,IACDO,EAAWP,IAAoB,GAA6B,EAA0C,EACtG,MACJ,IAAK,IAEDO,EAAWP,IAAoB,GAA8B,EAA0C,EACvG,MACJ,IAAK,KAEDO,EAAWP,IAAoB,IAA2B,EAA0C,EACpG,MACJ,IAAK,IAEDO,EAAWH,EAAmB,EAA8B,EAC5D,MACJ,QACIG,EAAUlB,EAAW,IAAIX,CAAM,CACvC,CAEI6B,IAAY,IACZhN,EAAO,KAAK6L,EAAa,YAAYC,EAAYC,EAAM5G,EAAG6G,EAAgBQ,CAAC,CAAC,EAC5EO,EAAoB,GAE5B,SACSL,IAAU,GAAoB,CACnC,IAAIM,EACA7B,IAAW,IAEXyB,EAAuB,GACvBI,EAAU,GAGVA,EAAUlB,EAAW,IAAIX,CAAM,EAG/B6B,IAAY,EACZD,EAAoB,GAGpBL,EAAQ,EAEhB,MAEIA,EAAQJ,EAAa,UAAUI,EAAOvB,CAAM,EACxCuB,IAAU,IACVK,EAAoB,IAGxBA,IACAL,EAAQ,EACRC,EAAgB,GAChBC,EAAuB,GACvBE,EAAsB,GAEtBd,EAAiBQ,EAAI,EACrBC,EAAkBtB,GAEtBqB,GACJ,CACIE,IAAU,IACV1M,EAAO,KAAK6L,EAAa,YAAYC,EAAYC,EAAM5G,EAAG6G,EAAgBxG,CAAG,CAAC,CAEtF,CACA,OAAOxF,CACX,CACJ,CAMO,SAASiN,GAAaZ,EAAO,CAChC,MAAI,CAACA,GAAS,OAAOA,EAAM,cAAiB,YAAc,OAAOA,EAAM,gBAAmB,WAE/E,CAAC,EAELR,EAAa,aAAaQ,CAAK,CAC1C,CCpQO,MAAMa,CAAoB,CAC7B,aAAc,CACV,KAAK,iBAAmB,CACpB,CAAC,OAAQ,OAAO,EAChB,CAAC,OAAQ,OAAO,EAChB,CAAC,UAAW,SAAU,SAAU,WAAY,UAAW,YAAa,WAAW,EAC/E,CAAC,SAAU,YAAa,SAAS,CACrC,CACJ,CACA,iBAAiBC,EAAQC,EAAOC,EAAQC,EAAOC,EAAI,CAC/C,GAAIJ,GAAUC,EAAO,CACjB,MAAMpN,EAAS,KAAK,mBAAmBoN,EAAOG,CAAE,EAChD,GAAIvN,EACA,MAAO,CACH,MAAOmN,EACP,MAAOnN,CACX,CAER,CACA,GAAIqN,GAAUC,EAAO,CACjB,MAAMtN,EAAS,KAAK,mBAAmBsN,EAAOC,CAAE,EAChD,GAAIvN,EACA,MAAO,CACH,MAAOqN,EACP,MAAOrN,CACX,CAER,CACA,OAAO,IACX,CACA,mBAAmBwN,EAAMD,EAAI,CACzB,MAAME,EAAe,KAAK,cAAcD,EAAMD,CAAE,EAChD,OAAIE,IAAiB,KACVA,EAEJ,KAAK,YAAYD,EAAMD,CAAE,CACpC,CACA,cAAc1C,EAAO0C,EAAI,CACrB,MAAMG,EAAY,KAAK,IAAI,GAAI7C,EAAM,QAAUA,EAAM,YAAY,GAAG,EAAI,EAAE,EAC1E,IAAI8C,EAAK,OAAO9C,CAAK,EACrB,MAAM+C,EAAK,WAAW/C,CAAK,EAC3B,MAAI,CAAC,MAAM8C,CAAE,GAAK,CAAC,MAAMC,CAAE,GAAKD,IAAOC,EAC/BD,IAAO,GAAK,CAACJ,EACN,MAKPI,EAAK,KAAK,MAAMA,EAAKD,CAAS,EAC9BC,GAAMJ,EAAKG,EAAY,CAACA,EACjB,OAAOC,EAAKD,CAAS,GAG7B,IACX,CACA,YAAY7C,EAAO0C,EAAI,CACnB,OAAO,KAAK,iBAAiB,KAAK,iBAAkB1C,EAAO0C,CAAE,CACjE,CACA,iBAAiBM,EAAWhD,EAAO0C,EAAI,CACnC,IAAIvN,EAAS,KACb,QAASmF,EAAI,EAAGK,EAAMqI,EAAU,OAAQ7N,IAAW,MAAQmF,EAAIK,EAAKL,IAChEnF,EAAS,KAAK,gBAAgB6N,EAAU1I,CAAC,EAAG0F,EAAO0C,CAAE,EAEzD,OAAOvN,CACX,CACA,gBAAgB8N,EAAUjD,EAAO0C,EAAI,CACjC,IAAInH,EAAM0H,EAAS,QAAQjD,CAAK,EAChC,OAAIzE,GAAO,GACPA,GAAOmH,EAAK,EAAK,GACbnH,EAAM,EACNA,EAAM0H,EAAS,OAAS,EAGxB1H,GAAO0H,EAAS,OAEbA,EAAS1H,CAAG,GAEhB,IACX,CACJ,CACA8G,EAAoB,SAAW,IAAIA,E,kDChF/Ba,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,EAAW,CACrF,SAASC,EAAMvD,EAAO,CAAE,OAAOA,aAAiBqD,EAAIrD,EAAQ,IAAIqD,EAAE,SAAUG,EAAS,CAAEA,EAAQxD,CAAK,CAAG,CAAC,CAAG,CAC3G,OAAO,IAAKqD,IAAMA,EAAI,UAAU,SAAUG,EAASC,EAAQ,CACvD,SAASC,EAAU1D,EAAO,CAAE,GAAI,CAAE2D,EAAKL,EAAU,KAAKtD,CAAK,CAAC,CAAG,OAAS4D,EAAG,CAAEH,EAAOG,CAAC,CAAG,CAAE,CAC1F,SAASC,EAAS7D,EAAO,CAAE,GAAI,CAAE2D,EAAKL,EAAU,MAAStD,CAAK,CAAC,CAAG,OAAS4D,EAAG,CAAEH,EAAOG,CAAC,CAAG,CAAE,CAC7F,SAASD,EAAKxO,EAAQ,CAAEA,EAAO,KAAOqO,EAAQrO,EAAO,KAAK,EAAIoO,EAAMpO,EAAO,KAAK,EAAE,KAAKuO,EAAWG,CAAQ,CAAG,CAC7GF,GAAML,EAAYA,EAAU,MAAMH,EAASC,GAAc,CAAC,CAAC,GAAG,KAAK,CAAC,CACxE,CAAC,CACL,EAkBO,MAAMU,WAAoB,CAAgB,CAC7C,IAAI,KAAM,CACN,OAAO,KAAK,IAChB,CACA,IAAI,KAAM,CACN,OAAO,KAAK,IAChB,CACA,UAAW,CACP,OAAO,KAAK,QAAQ,CACxB,CACA,iBAAkB,CACd,OAAO,KAAK,OAAO,MAAM,CAAC,CAC9B,CACA,cAAe,CACX,OAAO,KAAK,OAAO,MACvB,CACA,eAAe/M,EAAY,CACvB,OAAO,KAAK,OAAOA,EAAa,CAAC,CACrC,CACA,kBAAkBoB,EAAU4L,EAAgB,CACxC,MAAMC,KAAa,MAAc7L,EAAS,UAAQ,MAA0B4L,CAAc,EAAG,KAAK,OAAO5L,EAAS,WAAa,CAAC,EAAG,CAAC,EACpI,OAAI6L,EACO,IAAI,IAAM7L,EAAS,WAAY6L,EAAW,YAAa7L,EAAS,WAAY6L,EAAW,SAAS,EAEpG,IACX,CACA,MAAMD,EAAgB,CAClB,MAAM5J,EAAQ,KAAK,OACb8J,EAAY,KAAK,WAAW,KAAK,IAAI,EAC3C,IAAIlN,EAAa,EACbmN,EAAW,GACXC,EAAgB,EAChBC,EAAa,CAAC,EAClB,MAAO,CACH,EAAE,OAAO,QAAQ,GAAI,CACjB,OACI,GAAID,EAAgBC,EAAW,OAAQ,CACnC,MAAMpE,EAAQkE,EAAS,UAAUE,EAAWD,CAAa,EAAE,MAAOC,EAAWD,CAAa,EAAE,GAAG,EAC/FA,GAAiB,EACjB,MAAMnE,CACV,SAEQjJ,EAAaoD,EAAM,OACnB+J,EAAW/J,EAAMpD,CAAU,EAC3BqN,EAAaH,EAAUC,EAAUH,CAAc,EAC/CI,EAAgB,EAChBpN,GAAc,MAGd,MAIhB,CACJ,CACJ,CACA,aAAaA,EAAYgN,EAAgB,CACrC,MAAMM,EAAU,KAAK,OAAOtN,EAAa,CAAC,EACpCuN,EAAS,KAAK,WAAWD,EAASN,CAAc,EAChDQ,EAAQ,CAAC,EACf,UAAWrM,KAASoM,EAChBC,EAAM,KAAK,CACP,KAAMF,EAAQ,UAAUnM,EAAM,MAAOA,EAAM,GAAG,EAC9C,YAAaA,EAAM,MAAQ,EAC3B,UAAWA,EAAM,IAAM,CAC3B,CAAC,EAEL,OAAOqM,CACX,CACA,WAAWF,EAASN,EAAgB,CAChC,MAAM5O,EAAS,CAAC,EAChB,IAAIqP,EAEJ,IADAT,EAAe,UAAY,GACpBS,EAAQT,EAAe,KAAKM,CAAO,IAClCG,EAAM,CAAC,EAAE,SAAW,GAIxBrP,EAAO,KAAK,CAAE,MAAOqP,EAAM,MAAO,IAAKA,EAAM,MAAQA,EAAM,CAAC,EAAE,MAAO,CAAC,EAE1E,OAAOrP,CACX,CACA,gBAAgB+C,EAAO,CAEnB,GADAA,EAAQ,KAAK,eAAeA,CAAK,EAC7BA,EAAM,kBAAoBA,EAAM,cAChC,OAAO,KAAK,OAAOA,EAAM,gBAAkB,CAAC,EAAE,UAAUA,EAAM,YAAc,EAAGA,EAAM,UAAY,CAAC,EAEtG,MAAMuM,EAAa,KAAK,KAClBC,EAAiBxM,EAAM,gBAAkB,EACzCyM,EAAezM,EAAM,cAAgB,EACrC0M,EAAc,CAAC,EACrBA,EAAY,KAAK,KAAK,OAAOF,CAAc,EAAE,UAAUxM,EAAM,YAAc,CAAC,CAAC,EAC7E,QAASoC,EAAIoK,EAAiB,EAAGpK,EAAIqK,EAAcrK,IAC/CsK,EAAY,KAAK,KAAK,OAAOtK,CAAC,CAAC,EAEnC,OAAAsK,EAAY,KAAK,KAAK,OAAOD,CAAY,EAAE,UAAU,EAAGzM,EAAM,UAAY,CAAC,CAAC,EACrE0M,EAAY,KAAKH,CAAU,CACtC,CACA,SAAStM,EAAU,CACf,OAAAA,EAAW,KAAK,kBAAkBA,CAAQ,EAC1C,KAAK,kBAAkB,EAChB,KAAK,YAAY,aAAaA,EAAS,WAAa,CAAC,GAAKA,EAAS,OAAS,EACvF,CACA,WAAW0M,EAAQ,CACfA,EAAS,KAAK,MAAMA,CAAM,EAC1BA,EAAS,KAAK,IAAI,EAAGA,CAAM,EAC3B,KAAK,kBAAkB,EACvB,MAAMC,EAAM,KAAK,YAAY,WAAWD,CAAM,EACxCE,EAAa,KAAK,OAAOD,EAAI,KAAK,EAAE,OAE1C,MAAO,CACH,WAAY,EAAIA,EAAI,MACpB,OAAQ,EAAI,KAAK,IAAIA,EAAI,UAAWC,CAAU,CAClD,CACJ,CACA,eAAe7M,EAAO,CAClB,MAAMY,EAAQ,KAAK,kBAAkB,CAAE,WAAYZ,EAAM,gBAAiB,OAAQA,EAAM,WAAY,CAAC,EAC/Fa,EAAM,KAAK,kBAAkB,CAAE,WAAYb,EAAM,cAAe,OAAQA,EAAM,SAAU,CAAC,EAC/F,OAAIY,EAAM,aAAeZ,EAAM,iBACxBY,EAAM,SAAWZ,EAAM,aACvBa,EAAI,aAAeb,EAAM,eACzBa,EAAI,SAAWb,EAAM,UACjB,CACH,gBAAiBY,EAAM,WACvB,YAAaA,EAAM,OACnB,cAAeC,EAAI,WACnB,UAAWA,EAAI,MACnB,EAEGb,CACX,CACA,kBAAkBC,EAAU,CACxB,GAAI,CAAC,IAAS,YAAYA,CAAQ,EAC9B,MAAM,IAAI,MAAM,cAAc,EAElC,GAAI,CAAE,WAAApB,EAAY,OAAAC,CAAO,EAAImB,EACzB6M,EAAa,GACjB,GAAIjO,EAAa,EACbA,EAAa,EACbC,EAAS,EACTgO,EAAa,WAERjO,EAAa,KAAK,OAAO,OAC9BA,EAAa,KAAK,OAAO,OACzBC,EAAS,KAAK,OAAOD,EAAa,CAAC,EAAE,OAAS,EAC9CiO,EAAa,OAEZ,CACD,MAAMC,EAAe,KAAK,OAAOlO,EAAa,CAAC,EAAE,OAAS,EACtDC,EAAS,GACTA,EAAS,EACTgO,EAAa,IAERhO,EAASiO,IACdjO,EAASiO,EACTD,EAAa,GAErB,CACA,OAAKA,EAIM,CAAE,WAAAjO,EAAY,OAAAC,CAAO,EAHrBmB,CAKf,CACJ,CAIO,MAAM+M,CAAmB,CAC5B,YAAYC,EAAMC,EAAsB,CACpC,KAAK,MAAQD,EACb,KAAK,QAAU,OAAO,OAAO,IAAI,EACjC,KAAK,sBAAwBC,EAC7B,KAAK,eAAiB,IAC1B,CACA,SAAU,CACN,KAAK,QAAU,OAAO,OAAO,IAAI,CACrC,CACA,UAAUtG,EAAK,CACX,OAAO,KAAK,QAAQA,CAAG,CAC3B,CACA,YAAa,CACT,MAAMuG,EAAM,CAAC,EACb,cAAO,KAAK,KAAK,OAAO,EAAE,QAASC,GAAQD,EAAI,KAAK,KAAK,QAAQC,CAAG,CAAC,CAAC,EAC/DD,CACX,CACA,eAAevF,EAAM,CACjB,KAAK,QAAQA,EAAK,GAAG,EAAI,IAAIgE,GAAY,IAAI,MAAMhE,EAAK,GAAG,EAAGA,EAAK,MAAOA,EAAK,IAAKA,EAAK,SAAS,CACtG,CACA,mBAAmByF,EAAQ3B,EAAG,CAC1B,GAAI,CAAC,KAAK,QAAQ2B,CAAM,EACpB,OAEU,KAAK,QAAQA,CAAM,EAC3B,SAAS3B,CAAC,CACpB,CACA,mBAAmB2B,EAAQ,CAClB,KAAK,QAAQA,CAAM,GAGxB,OAAO,KAAK,QAAQA,CAAM,CAC9B,CACA,yBAAyBC,EAAKC,EAASvN,EAAO,CAC1C,OAAOgL,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAM1B,EAAQ,KAAK,UAAUgE,CAAG,EAChC,OAAKhE,EAGE,IAA4B,yBAAyBA,EAAOiE,EAASvN,CAAK,EAFtE,CAAE,OAAQ,CAAC,EAAG,QAAS,GAAO,wBAAyB,EAAG,wBAAyB,EAAG,4BAA6B,CAAE,CAGpI,CAAC,CACL,CAEA,YAAYwN,EAAaC,EAAaC,EAAsBC,EAAoB,CAC5E,OAAO3C,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAM4C,EAAW,KAAK,UAAUJ,CAAW,EACrCK,EAAW,KAAK,UAAUJ,CAAW,EAC3C,MAAI,CAACG,GAAY,CAACC,EACP,KAEJb,EAAmB,YAAYY,EAAUC,EAAUH,EAAsBC,CAAkB,CACtG,CAAC,CACL,CACA,OAAO,YAAYG,EAAmBC,EAAmBL,EAAsBC,EAAoB,CAC/F,MAAM1I,EAAgB6I,EAAkB,gBAAgB,EAClD5I,EAAgB6I,EAAkB,gBAAgB,EAQlD1I,EAPe,IAAIL,EAAaC,EAAeC,EAAe,CAChE,yBAA0B,GAC1B,6BAA8B,GAC9B,2BAA4BwI,EAC5B,qBAAsB,GACtB,mBAAoBC,CACxB,CAAC,EAC+B,YAAY,EACtCK,EAAa3I,EAAW,QAAQ,OAAS,EAAI,GAAQ,KAAK,oBAAoByI,EAAmBC,CAAiB,EACxH,MAAO,CACH,UAAW1I,EAAW,UACtB,UAAW2I,EACX,QAAS3I,EAAW,OACxB,CACJ,CACA,OAAO,oBAAoBuI,EAAUC,EAAU,CAC3C,MAAMI,EAAoBL,EAAS,aAAa,EAC1CM,EAAoBL,EAAS,aAAa,EAChD,GAAII,IAAsBC,EACtB,MAAO,GAEX,QAASlF,EAAO,EAAGA,GAAQiF,EAAmBjF,IAAQ,CAClD,MAAMnD,EAAe+H,EAAS,eAAe5E,CAAI,EAC3ClD,EAAe+H,EAAS,eAAe7E,CAAI,EACjD,GAAInD,IAAiBC,EACjB,MAAO,EAEf,CACA,MAAO,EACX,CACA,wBAAwBqI,EAAUC,EAAO,CACrC,OAAOpD,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAM1B,EAAQ,KAAK,UAAU6E,CAAQ,EACrC,GAAI,CAAC7E,EACD,OAAO8E,EAEX,MAAMnR,EAAS,CAAC,EAChB,IAAIoR,EACJD,EAAQA,EAAM,MAAM,CAAC,EAAE,KAAK,CAACjO,EAAGf,IAAM,CAClC,GAAIe,EAAE,OAASf,EAAE,MACb,OAAO,IAAM,yBAAyBe,EAAE,MAAOf,EAAE,KAAK,EAG1D,MAAMkP,EAAOnO,EAAE,MAAQ,EAAI,EACrBoO,EAAOnP,EAAE,MAAQ,EAAI,EAC3B,OAAOkP,EAAOC,CAClB,CAAC,EACD,OAAS,CAAE,MAAAvO,EAAO,KAAAyK,EAAM,IAAA5D,CAAI,IAAKuH,EAAO,CAIpC,GAHI,OAAOvH,GAAQ,WACfwH,EAAUxH,GAEV,IAAM,QAAQ7G,CAAK,GAAK,CAACyK,EAEzB,SAEJ,MAAMmD,EAAWtE,EAAM,gBAAgBtJ,CAAK,EAE5C,GADAyK,EAAOA,EAAK,QAAQ,cAAenB,EAAM,GAAG,EACxCsE,IAAanD,EAEb,SAGJ,GAAI,KAAK,IAAIA,EAAK,OAAQmD,EAAS,MAAM,EAAIZ,EAAmB,WAAY,CACxE/P,EAAO,KAAK,CAAE,MAAA+C,EAAO,KAAAyK,CAAK,CAAC,EAC3B,QACJ,CAEA,MAAM1D,KAAU,MAAW6G,EAAUnD,EAAM,EAAK,EAC1C+D,EAAalF,EAAM,SAAS,IAAM,KAAKtJ,CAAK,EAAE,iBAAiB,CAAC,EACtE,UAAWgH,KAAUD,EAAS,CAC1B,MAAMnG,EAAQ0I,EAAM,WAAWkF,EAAaxH,EAAO,aAAa,EAC1DnG,EAAMyI,EAAM,WAAWkF,EAAaxH,EAAO,cAAgBA,EAAO,cAAc,EAChFyH,EAAU,CACZ,KAAMhE,EAAK,OAAOzD,EAAO,cAAeA,EAAO,cAAc,EAC7D,MAAO,CAAE,gBAAiBpG,EAAM,WAAY,YAAaA,EAAM,OAAQ,cAAeC,EAAI,WAAY,UAAWA,EAAI,MAAO,CAChI,EACIyI,EAAM,gBAAgBmF,EAAQ,KAAK,IAAMA,EAAQ,MACjDxR,EAAO,KAAKwR,CAAO,CAE3B,CACJ,CACA,OAAI,OAAOJ,GAAY,UACnBpR,EAAO,KAAK,CAAE,IAAKoR,EAAS,KAAM,GAAI,MAAO,CAAE,gBAAiB,EAAG,YAAa,EAAG,cAAe,EAAG,UAAW,CAAE,CAAE,CAAC,EAElHpR,CACX,CAAC,CACL,CAEA,aAAakR,EAAU,CACnB,OAAOnD,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAM1B,EAAQ,KAAK,UAAU6E,CAAQ,EACrC,OAAK7E,EAGEY,GAAaZ,CAAK,EAFd,IAGf,CAAC,CACL,CACA,eAAeoF,EAAWC,EAAaC,EAASC,EAAc,CAC1D,OAAO7D,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAM8D,EAAK,IAAI,KAAU,EAAI,EACvBC,EAAgB,IAAI,OAAOH,EAASC,CAAY,EAChDG,EAAO,IAAI,IACjBC,EAAO,UAAW3B,KAAOoB,EAAW,CAChC,MAAMpF,EAAQ,KAAK,UAAUgE,CAAG,EAChC,GAAKhE,GAGL,UAAW4F,KAAQ5F,EAAM,MAAMyF,CAAa,EACxC,GAAI,EAAAG,IAASP,GAAe,CAAC,MAAM,OAAOO,CAAI,CAAC,KAG/CF,EAAK,IAAIE,CAAI,EACTF,EAAK,KAAOhC,EAAmB,mBAC/B,MAAMiC,EAGlB,CACA,MAAO,CAAE,MAAO,MAAM,KAAKD,CAAI,EAAG,SAAUF,EAAG,QAAQ,CAAE,CAC7D,CAAC,CACL,CAGA,kBAAkBX,EAAUnO,EAAO4O,EAASC,EAAc,CACtD,OAAO7D,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAM1B,EAAQ,KAAK,UAAU6E,CAAQ,EACrC,GAAI,CAAC7E,EACD,OAAO,OAAO,OAAO,IAAI,EAE7B,MAAMyF,EAAgB,IAAI,OAAOH,EAASC,CAAY,EAChD5R,EAAS,OAAO,OAAO,IAAI,EACjC,QAAS+L,EAAOhJ,EAAM,gBAAiBgJ,EAAOhJ,EAAM,cAAegJ,IAAQ,CACvE,MAAMqD,EAAQ/C,EAAM,aAAaN,EAAM+F,CAAa,EACpD,UAAWG,KAAQ7C,EAAO,CACtB,GAAI,CAAC,MAAM,OAAO6C,EAAK,IAAI,CAAC,EACxB,SAEJ,IAAIC,EAAQlS,EAAOiS,EAAK,IAAI,EACvBC,IACDA,EAAQ,CAAC,EACTlS,EAAOiS,EAAK,IAAI,EAAIC,GAExBA,EAAM,KAAK,CACP,gBAAiBnG,EACjB,YAAakG,EAAK,YAClB,cAAelG,EACf,UAAWkG,EAAK,SACpB,CAAC,CACL,CACJ,CACA,OAAOjS,CACX,CAAC,CACL,CAEA,iBAAiBkR,EAAUnO,EAAOwK,EAAIoE,EAASC,EAAc,CACzD,OAAO7D,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAM1B,EAAQ,KAAK,UAAU6E,CAAQ,EACrC,GAAI,CAAC7E,EACD,OAAO,KAEX,MAAMyF,EAAgB,IAAI,OAAOH,EAASC,CAAY,EAClD7O,EAAM,cAAgBA,EAAM,YAC5BA,EAAQ,CACJ,gBAAiBA,EAAM,gBACvB,YAAaA,EAAM,YACnB,cAAeA,EAAM,cACrB,UAAWA,EAAM,UAAY,CACjC,GAEJ,MAAMoP,EAAgB9F,EAAM,gBAAgBtJ,CAAK,EAC3CqP,EAAY/F,EAAM,kBAAkB,CAAE,WAAYtJ,EAAM,gBAAiB,OAAQA,EAAM,WAAY,EAAG+O,CAAa,EACzH,GAAI,CAACM,EACD,OAAO,KAEX,MAAMH,EAAO5F,EAAM,gBAAgB+F,CAAS,EAE5C,OADelF,EAAoB,SAAS,iBAAiBnK,EAAOoP,EAAeC,EAAWH,EAAM1E,CAAE,CAE1G,CAAC,CACL,CAEA,kBAAkB8E,EAAUC,EAAYC,EAAoB,CACxD,MAAMC,EAAqB,CAACC,EAAQC,IACzB,KAAK,MAAM,IAAID,EAAQC,CAAI,EAGhCC,EAAM,CACR,KAFgBC,GAAA,GAAwBL,EAAoBC,CAAkB,EAG9E,gBAAiB,IACN,KAAK,WAAW,CAE/B,EACA,OAAI,KAAK,uBACL,KAAK,eAAiB,KAAK,sBAAsBG,EAAKL,CAAU,EAEzD,QAAQ,QAAQM,GAAA,GAAwB,KAAK,cAAc,CAAC,GAahE,QAAQ,OAAO,IAAI,MAAM,kBAAkB,CAAC,CAEvD,CAEA,IAAIH,EAAQC,EAAM,CACd,GAAI,CAAC,KAAK,gBAAkB,OAAO,KAAK,eAAeD,CAAM,GAAM,WAC/D,OAAO,QAAQ,OAAO,IAAI,MAAM,qCAAuCA,CAAM,CAAC,EAElF,GAAI,CACA,OAAO,QAAQ,QAAQ,KAAK,eAAeA,CAAM,EAAE,MAAM,KAAK,eAAgBC,CAAI,CAAC,CACvF,OACOjE,EAAG,CACN,OAAO,QAAQ,OAAOA,CAAC,CAC3B,CACJ,CACJ,CAGAsB,EAAmB,WAAa,IAEhCA,EAAmB,kBAAoB,IAKhC,SAAS8C,GAAO7C,EAAM,CACzB,OAAO,IAAID,EAAmBC,EAAM,IAAI,CAC5C,CACI,OAAO,eAAkB,aAEzB,KAAQ,UAAS,KAAoB,E,4FCnelC,MAAM8C,CAA4B,CACrC,OAAO,yBAAyBzG,EAAOiE,EAASvN,EAAO,CACnD,MAAMgQ,EAAYhQ,EAAQA,EAAM,gBAAkB,EAC5CiQ,EAAUjQ,EAAQA,EAAM,cAAgBsJ,EAAM,aAAa,EAC3D4G,EAAuB,IAAIC,EAAqB5C,CAAO,EACvD6C,EAAaF,EAAqB,uBAAuB,EAC/D,IAAIG,EACAD,IAAe,mBACfC,EAAQ,IAAI,OAAO,0BAA2B,GAAG,EAGjDA,EAAQ,IAAI,OAAO,GAAGC,EAAyB,MAAM,KAAKF,CAAU,CAAC,CAAC,GAAI,GAAG,EAEjF,MAAMG,EAAW,IAAI,KAAS,KAAMF,CAAK,EACnCjE,EAAS,CAAC,EAChB,IAAIoE,EAAU,GACVC,EACAC,EAA0B,EAC1BC,EAA0B,EAC1BC,GAA8B,EAClCC,EAAS,QAAShS,EAAamR,EAAWxG,GAAYyG,EAASpR,GAAc2K,GAAW3K,IAAc,CAClG,MAAMoE,EAAcqG,EAAM,eAAezK,CAAU,EAC7CgO,GAAa5J,EAAY,OAE/BsN,EAAS,MAAM,CAAC,EAChB,EAEI,IADAE,EAAIF,EAAS,KAAKtN,CAAW,EACzBwN,EAAG,CACH,IAAI7N,EAAa6N,EAAE,MACf5N,EAAW4N,EAAE,MAAQA,EAAE,CAAC,EAAE,OAE9B,GAAI7N,EAAa,EAAG,CAChB,MAAMkO,EAAiB7N,EAAY,WAAWL,EAAa,CAAC,EACxD,KAAwBkO,CAAc,GACtClO,GAER,CACA,GAAIC,EAAW,EAAIgK,GAAY,CAC3B,MAAMiE,EAAiB7N,EAAY,WAAWJ,EAAW,CAAC,EACtD,KAAwBiO,CAAc,GACtCjO,GAER,CACA,MAAMkO,GAAM9N,EAAY,UAAUL,EAAYC,CAAQ,EAChDqM,MAAO,MAActM,EAAa,EAAG,KAAqBK,EAAa,CAAC,EACxE+N,EAAkBd,EAAqB,6BAA6Ba,GAAK7B,GAAOA,GAAK,KAAO,IAAI,EACtG,GAAI8B,IAAoB,EAAoC,CAcxD,GAbIA,IAAoB,EACpBN,IAEKM,IAAoB,EACzBL,IAEKK,IAAoB,EACzBJ,QAGA,MAAYI,CAAe,EAG3B5E,EAAO,QADe,IACc,CACpCoE,EAAU,GACV,MAAMK,CACV,CACAzE,EAAO,KAAK,IAAI,IAAMvN,EAAY+D,EAAa,EAAG/D,EAAYgE,EAAW,CAAC,CAAC,CAC/E,CACJ,OACK4N,EACb,CACA,MAAO,CACH,OAAArE,EACA,QAAAoE,EACA,wBAAAE,EACA,wBAAAC,EACA,4BAAAC,EACJ,CACJ,CACA,OAAO,8BAA8BK,EAAM1D,EAAS,CAChD,MAAM2C,EAAuB,IAAIC,EAAqB5C,CAAO,EAE7D,OADe2C,EAAqB,6BAA6Be,EAAM,IAAI,EAC3D,CACZ,IAAK,GACD,OAAO,KACX,IAAK,GACD,MAAO,CAAE,KAAM,CAA+C,EAClE,IAAK,GAAyC,CAC1C,MAAMC,EAAYD,EAAK,YAAY,CAAC,EAC9BE,EAAoBjB,EAAqB,oBAAoB,qBAAqBgB,CAAS,EAC3FE,EAAwB,KAA4B,WAAW,EAAE,OAAQC,GAAM,CAAC,KAA4B,YAAY,IAAI,IAAI,CAAC,GAAG9D,EAAQ,eAAgB8D,CAAC,CAAC,CAAC,EAAE,YAAYH,CAAS,CAAC,EAC7L,MAAO,CAAE,KAAM,EAAgD,eAAgB,OAAO,cAAcC,CAAiB,EAAG,sBAAAC,CAAsB,CAClJ,CACA,IAAK,GACD,MAAO,CAAE,KAAM,CAAmD,CAC1E,CACJ,CACJ,CACA,SAASd,EAAyBgB,EAAYC,EAAO,CAEjD,MADY,IAAI,KAA+BD,EAAW,IAAKlP,GAAM,OAAO,cAAcA,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,GAE3G,CACA,MAAM+N,CAAqB,CACvB,YAAY5C,EAAS,CACjB,KAAK,QAAUA,EACf,KAAK,kBAAoB,IAAI,IAAIA,EAAQ,iBAAiB,EAC1D,KAAK,oBAAsB,KAA4B,YAAY,IAAI,IAAIA,EAAQ,cAAc,CAAC,CACtG,CACA,wBAAyB,CACrB,GAAI,KAAK,QAAQ,cACb,MAAO,mBAEX,MAAMiE,EAAM,IAAI,IAChB,GAAI,KAAK,QAAQ,oBACb,UAAWC,KAAM,KAA4B,WACpCC,EAA4B,OAAO,cAAcD,CAAE,CAAC,GACrDD,EAAI,IAAIC,CAAE,EAItB,GAAI,KAAK,QAAQ,oBACb,UAAWA,KAAM,KAAK,oBAAoB,wBAAwB,EAC9DD,EAAI,IAAIC,CAAE,EAGlB,UAAWA,KAAM,KAAK,kBAClBD,EAAI,OAAOC,CAAE,EAEjB,OAAOD,CACX,CACA,6BAA6BG,EAAWC,EAAa,CACjD,MAAMV,EAAYS,EAAU,YAAY,CAAC,EACzC,GAAI,KAAK,kBAAkB,IAAIT,CAAS,EACpC,MAAO,GAEX,GAAI,KAAK,QAAQ,cACb,MAAO,GAEX,IAAIW,EAA0B,GAC1BC,EAAyC,GAC7C,GAAIF,EACA,UAAWX,KAAQW,EAAa,CAC5B,MAAMV,EAAYD,EAAK,YAAY,CAAC,EAC9Bc,EAAe,KAAqBd,CAAI,EAC9CY,EAA0BA,GAA2BE,EACjD,CAACA,GACD,CAAC,KAAK,oBAAoB,YAAYb,CAAS,GAC/C,CAAC,KAA4B,qBAAqBA,CAAS,IAC3DY,EAAyC,GAEjD,CAEJ,MAC6D,CAACD,GACLC,EAC9C,EAEP,KAAK,QAAQ,qBAET,CAACJ,EAA4BC,CAAS,GAAK,KAA4B,qBAAqBT,CAAS,EAC9F,EAGX,KAAK,QAAQ,qBACT,KAAK,oBAAoB,YAAYA,CAAS,EACvC,EAGR,CACX,CACJ,CACA,SAASQ,EAA4BC,EAAW,CAC5C,OAAOA,IAAc,KAAOA,IAAc;AAAA,GAAQA,IAAc,GACpE,C,4DChLI3G,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,EAAW,CACrF,SAASC,EAAMvD,EAAO,CAAE,OAAOA,aAAiBqD,EAAIrD,EAAQ,IAAIqD,EAAE,SAAUG,EAAS,CAAEA,EAAQxD,CAAK,CAAG,CAAC,CAAG,CAC3G,OAAO,IAAKqD,IAAMA,EAAI,UAAU,SAAUG,EAASC,EAAQ,CACvD,SAASC,EAAU1D,EAAO,CAAE,GAAI,CAAE2D,EAAKL,EAAU,KAAKtD,CAAK,CAAC,CAAG,OAAS4D,EAAG,CAAEH,EAAOG,CAAC,CAAG,CAAE,CAC1F,SAASC,EAAS7D,EAAO,CAAE,GAAI,CAAE2D,EAAKL,EAAU,MAAStD,CAAK,CAAC,CAAG,OAAS4D,EAAG,CAAEH,EAAOG,CAAC,CAAG,CAAE,CAC7F,SAASD,EAAKxO,EAAQ,CAAEA,EAAO,KAAOqO,EAAQrO,EAAO,KAAK,EAAIoO,EAAMpO,EAAO,KAAK,EAAE,KAAKuO,EAAWG,CAAQ,CAAG,CAC7GF,GAAML,EAAYA,EAAU,MAAMH,EAASC,GAAc,CAAC,CAAC,GAAG,KAAK,CAAC,CACxE,CAAC,CACL,EAGO,MAAM8G,CAAqB,CAC9B,aAAc,CACV,KAAK,KAAO,IAAI,IAChB,KAAK,WAAa,IAAI,IACtB,KAAK,aAAe,IAAI,KACxB,KAAK,YAAc,KAAK,aAAa,MACrC,KAAK,UAAY,IACrB,CACA,KAAKC,EAAW,CACZ,KAAK,aAAa,KAAK,CACnB,iBAAkBA,EAClB,gBAAiB,EACrB,CAAC,CACL,CACA,SAASC,EAAUC,EAAS,CACxB,YAAK,KAAK,IAAID,EAAUC,CAAO,EAC/B,KAAK,KAAK,CAACD,CAAQ,CAAC,KACb,KAAa,IAAM,CAClB,KAAK,KAAK,IAAIA,CAAQ,IAAMC,IAGhC,KAAK,KAAK,OAAOD,CAAQ,EACzB,KAAK,KAAK,CAACA,CAAQ,CAAC,EACxB,CAAC,CACL,CACA,gBAAgBE,EAAYC,EAAS,CACjC,IAAIC,GACHA,EAAK,KAAK,WAAW,IAAIF,CAAU,KAAO,MAAQE,IAAO,QAAkBA,EAAG,QAAQ,EACvF,MAAMC,EAAS,IAAIC,EAA+B,KAAMJ,EAAYC,CAAO,EAC3E,YAAK,WAAW,IAAID,EAAYG,CAAM,KAC/B,KAAa,IAAM,CACtB,MAAM7T,EAAI,KAAK,WAAW,IAAI0T,CAAU,EACpC,CAAC1T,GAAKA,IAAM6T,IAGhB,KAAK,WAAW,OAAOH,CAAU,EACjC1T,EAAE,QAAQ,EACd,CAAC,CACL,CACA,YAAY0T,EAAY,CACpB,OAAOpH,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAEhD,MAAMyH,EAAsB,KAAK,IAAIL,CAAU,EAC/C,GAAIK,EACA,OAAOA,EAEX,MAAMJ,EAAU,KAAK,WAAW,IAAID,CAAU,EAC9C,MAAI,CAACC,GAAWA,EAAQ,WAEb,MAEX,MAAMA,EAAQ,QAAQ,EACf,KAAK,IAAID,CAAU,EAC9B,CAAC,CACL,CACA,IAAIF,EAAU,CACV,OAAQ,KAAK,KAAK,IAAIA,CAAQ,GAAK,IACvC,CACA,WAAWE,EAAY,CAEnB,GAD4B,KAAK,IAAIA,CAAU,EAE3C,MAAO,GAEX,MAAMC,EAAU,KAAK,WAAW,IAAID,CAAU,EAC9C,MAAI,IAACC,GAAWA,EAAQ,WAI5B,CACA,YAAYK,EAAU,CAClB,KAAK,UAAYA,EACjB,KAAK,aAAa,KAAK,CACnB,iBAAkB,MAAM,KAAK,KAAK,KAAK,KAAK,CAAC,EAC7C,gBAAiB,EACrB,CAAC,CACL,CACA,aAAc,CACV,OAAO,KAAK,SAChB,CACA,sBAAuB,CACnB,OAAI,KAAK,WAAa,KAAK,UAAU,OAAS,EACnC,KAAK,UAAU,CAAiC,EAEpD,IACX,CACJ,CACA,MAAMF,UAAuC,IAAW,CACpD,YAAYG,EAAWC,EAAaC,EAAU,CAC1C,MAAM,EACN,KAAK,UAAYF,EACjB,KAAK,YAAcC,EACnB,KAAK,SAAWC,EAChB,KAAK,YAAc,GACnB,KAAK,gBAAkB,KACvB,KAAK,YAAc,EACvB,CACA,IAAI,YAAa,CACb,OAAO,KAAK,WAChB,CACA,SAAU,CACN,KAAK,YAAc,GACnB,MAAM,QAAQ,CAClB,CACA,SAAU,CACN,OAAO7H,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,OAAK,KAAK,kBACN,KAAK,gBAAkB,KAAK,QAAQ,GAEjC,KAAK,eAChB,CAAC,CACL,CACA,SAAU,CACN,OAAOA,EAAU,KAAM,OAAQ,OAAQ,WAAa,CAChD,MAAMlD,EAAQ,MAAM,QAAQ,QAAQ,KAAK,SAAS,0BAA0B,CAAC,EAC7E,KAAK,YAAc,GACfA,GAAS,CAAC,KAAK,aACf,KAAK,UAAU,KAAK,UAAU,SAAS,KAAK,YAAaA,CAAK,CAAC,CAEvE,CAAC,CACL,CACJ,C","sources":["webpack://grafana/./node_modules/monaco-editor/esm/vs/base/common/diff/diffChange.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/base/common/functional.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/base/common/lazy.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/base/common/linkedList.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/base/common/process.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/base/common/stopwatch.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/base/common/uint.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/core/position.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/core/range.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/services/editorBaseApi.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/services/unicodeTextModelHighlighter.js","webpack://grafana/./node_modules/monaco-editor/esm/vs/editor/common/tokenizationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * Represents information about a specific difference between two sequences.\n */\nexport class DiffChange {\n    /**\n     * Constructs a new DiffChange with the given sequence information\n     * and content.\n     */\n    constructor(originalStart, originalLength, modifiedStart, modifiedLength) {\n        //Debug.Assert(originalLength > 0 || modifiedLength > 0, \"originalLength and modifiedLength cannot both be <= 0\");\n        this.originalStart = originalStart;\n        this.originalLength = originalLength;\n        this.modifiedStart = modifiedStart;\n        this.modifiedLength = modifiedLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the original sequence.\n     */\n    getOriginalEnd() {\n        return this.originalStart + this.originalLength;\n    }\n    /**\n     * The end point (exclusive) of the change in the modified sequence.\n     */\n    getModifiedEnd() {\n        return this.modifiedStart + this.modifiedLength;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function once(fn) {\n    const _this = this;\n    let didCall = false;\n    let result;\n    return function () {\n        if (didCall) {\n            return result;\n        }\n        didCall = true;\n        result = fn.apply(_this, arguments);\n        return result;\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Lazy {\n    constructor(executor) {\n        this.executor = executor;\n        this._didRun = false;\n    }\n    /**\n     * True if the lazy value has been resolved.\n     */\n    hasValue() { return this._didRun; }\n    /**\n     * Get the wrapped value.\n     *\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n     */\n    getValue() {\n        if (!this._didRun) {\n            try {\n                this._value = this.executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    /**\n     * Get the wrapped value without forcing evaluation.\n     */\n    get rawValue() { return this._value; }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = Node.Undefined;\n        this.prev = Node.Undefined;\n    }\n}\nNode.Undefined = new Node(undefined);\nexport class LinkedList {\n    constructor() {\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    get size() {\n        return this._size;\n    }\n    isEmpty() {\n        return this._first === Node.Undefined;\n    }\n    clear() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            const next = node.next;\n            node.prev = Node.Undefined;\n            node.next = Node.Undefined;\n            node = next;\n        }\n        this._first = Node.Undefined;\n        this._last = Node.Undefined;\n        this._size = 0;\n    }\n    unshift(element) {\n        return this._insert(element, false);\n    }\n    push(element) {\n        return this._insert(element, true);\n    }\n    _insert(element, atTheEnd) {\n        const newNode = new Node(element);\n        if (this._first === Node.Undefined) {\n            this._first = newNode;\n            this._last = newNode;\n        }\n        else if (atTheEnd) {\n            // push\n            const oldLast = this._last;\n            this._last = newNode;\n            newNode.prev = oldLast;\n            oldLast.next = newNode;\n        }\n        else {\n            // unshift\n            const oldFirst = this._first;\n            this._first = newNode;\n            newNode.next = oldFirst;\n            oldFirst.prev = newNode;\n        }\n        this._size += 1;\n        let didRemove = false;\n        return () => {\n            if (!didRemove) {\n                didRemove = true;\n                this._remove(newNode);\n            }\n        };\n    }\n    shift() {\n        if (this._first === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._first.element;\n            this._remove(this._first);\n            return res;\n        }\n    }\n    pop() {\n        if (this._last === Node.Undefined) {\n            return undefined;\n        }\n        else {\n            const res = this._last.element;\n            this._remove(this._last);\n            return res;\n        }\n    }\n    _remove(node) {\n        if (node.prev !== Node.Undefined && node.next !== Node.Undefined) {\n            // middle\n            const anchor = node.prev;\n            anchor.next = node.next;\n            node.next.prev = anchor;\n        }\n        else if (node.prev === Node.Undefined && node.next === Node.Undefined) {\n            // only node\n            this._first = Node.Undefined;\n            this._last = Node.Undefined;\n        }\n        else if (node.next === Node.Undefined) {\n            // last\n            this._last = this._last.prev;\n            this._last.next = Node.Undefined;\n        }\n        else if (node.prev === Node.Undefined) {\n            // first\n            this._first = this._first.next;\n            this._first.prev = Node.Undefined;\n        }\n        // done\n        this._size -= 1;\n    }\n    *[Symbol.iterator]() {\n        let node = this._first;\n        while (node !== Node.Undefined) {\n            yield node.element;\n            node = node.next;\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { globals, isMacintosh, isWindows } from './platform.js';\nlet safeProcess;\n// Native sandbox environment\nif (typeof globals.vscode !== 'undefined' && typeof globals.vscode.process !== 'undefined') {\n    const sandboxProcess = globals.vscode.process;\n    safeProcess = {\n        get platform() { return sandboxProcess.platform; },\n        get arch() { return sandboxProcess.arch; },\n        get env() { return sandboxProcess.env; },\n        cwd() { return sandboxProcess.cwd(); }\n    };\n}\n// Native node.js environment\nelse if (typeof process !== 'undefined') {\n    safeProcess = {\n        get platform() { return process.platform; },\n        get arch() { return process.arch; },\n        get env() { return process.env; },\n        cwd() { return process.env['VSCODE_CWD'] || process.cwd(); }\n    };\n}\n// Web environment\nelse {\n    safeProcess = {\n        // Supported\n        get platform() { return isWindows ? 'win32' : isMacintosh ? 'darwin' : 'linux'; },\n        get arch() { return undefined; /* arch is undefined in web */ },\n        // Unsupported\n        get env() { return {}; },\n        cwd() { return '/'; }\n    };\n}\n/**\n * Provides safe access to the `cwd` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `/`.\n */\nexport const cwd = safeProcess.cwd;\n/**\n * Provides safe access to the `env` property in node.js, sandboxed or web\n * environments.\n *\n * Note: in web, this property is hardcoded to be `{}`.\n */\nexport const env = safeProcess.env;\n/**\n * Provides safe access to the `platform` property in node.js, sandboxed or web\n * environments.\n */\nexport const platform = safeProcess.platform;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { globals } from './platform.js';\nconst hasPerformanceNow = (globals.performance && typeof globals.performance.now === 'function');\nexport class StopWatch {\n    constructor(highResolution) {\n        this._highResolution = hasPerformanceNow && highResolution;\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    static create(highResolution = true) {\n        return new StopWatch(highResolution);\n    }\n    stop() {\n        this._stopTime = this._now();\n    }\n    elapsed() {\n        if (this._stopTime !== -1) {\n            return this._stopTime - this._startTime;\n        }\n        return this._now() - this._startTime;\n    }\n    _now() {\n        return this._highResolution ? globals.performance.now() : Date.now();\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function toUint8(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 255 /* Constants.MAX_UINT_8 */) {\n        return 255 /* Constants.MAX_UINT_8 */;\n    }\n    return v | 0;\n}\nexport function toUint32(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > 4294967295 /* Constants.MAX_UINT_32 */) {\n        return 4294967295 /* Constants.MAX_UINT_32 */;\n    }\n    return v | 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './position.js';\n/**\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n */\nexport class Range {\n    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n            this.startLineNumber = endLineNumber;\n            this.startColumn = endColumn;\n            this.endLineNumber = startLineNumber;\n            this.endColumn = startColumn;\n        }\n        else {\n            this.startLineNumber = startLineNumber;\n            this.startColumn = startColumn;\n            this.endLineNumber = endLineNumber;\n            this.endColumn = endColumn;\n        }\n    }\n    /**\n     * Test if this range is empty.\n     */\n    isEmpty() {\n        return Range.isEmpty(this);\n    }\n    /**\n     * Test if `range` is empty.\n     */\n    static isEmpty(range) {\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n    }\n    /**\n     * Test if position is in this range. If the position is at the edges, will return true.\n     */\n    containsPosition(position) {\n        return Range.containsPosition(this, position);\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\n     */\n    static containsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `position` is in `range`. If the position is at the edges, will return false.\n     * @internal\n     */\n    static strictContainsPosition(range, position) {\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (position.lineNumber === range.startLineNumber && position.column <= range.startColumn) {\n            return false;\n        }\n        if (position.lineNumber === range.endLineNumber && position.column >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if range is in this range. If the range is equal to this range, will return true.\n     */\n    containsRange(range) {\n        return Range.containsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n     */\n    static containsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n     */\n    strictContainsRange(range) {\n        return Range.strictContainsRange(this, range);\n    }\n    /**\n     * Test if `otherRange` is strictly in `range` (must start after, and end before). If the ranges are equal, will return false.\n     */\n    static strictContainsRange(range, otherRange) {\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n            return false;\n        }\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\n            return false;\n        }\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    plusRange(range) {\n        return Range.plusRange(this, range);\n    }\n    /**\n     * A reunion of the two ranges.\n     * The smallest position will be used as the start point, and the largest one as the end point.\n     */\n    static plusRange(a, b) {\n        let startLineNumber;\n        let startColumn;\n        let endLineNumber;\n        let endColumn;\n        if (b.startLineNumber < a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = b.startColumn;\n        }\n        else if (b.startLineNumber === a.startLineNumber) {\n            startLineNumber = b.startLineNumber;\n            startColumn = Math.min(b.startColumn, a.startColumn);\n        }\n        else {\n            startLineNumber = a.startLineNumber;\n            startColumn = a.startColumn;\n        }\n        if (b.endLineNumber > a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = b.endColumn;\n        }\n        else if (b.endLineNumber === a.endLineNumber) {\n            endLineNumber = b.endLineNumber;\n            endColumn = Math.max(b.endColumn, a.endColumn);\n        }\n        else {\n            endLineNumber = a.endLineNumber;\n            endColumn = a.endColumn;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    intersectRanges(range) {\n        return Range.intersectRanges(this, range);\n    }\n    /**\n     * A intersection of the two ranges.\n     */\n    static intersectRanges(a, b) {\n        let resultStartLineNumber = a.startLineNumber;\n        let resultStartColumn = a.startColumn;\n        let resultEndLineNumber = a.endLineNumber;\n        let resultEndColumn = a.endColumn;\n        const otherStartLineNumber = b.startLineNumber;\n        const otherStartColumn = b.startColumn;\n        const otherEndLineNumber = b.endLineNumber;\n        const otherEndColumn = b.endColumn;\n        if (resultStartLineNumber < otherStartLineNumber) {\n            resultStartLineNumber = otherStartLineNumber;\n            resultStartColumn = otherStartColumn;\n        }\n        else if (resultStartLineNumber === otherStartLineNumber) {\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n        }\n        if (resultEndLineNumber > otherEndLineNumber) {\n            resultEndLineNumber = otherEndLineNumber;\n            resultEndColumn = otherEndColumn;\n        }\n        else if (resultEndLineNumber === otherEndLineNumber) {\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n        }\n        // Check if selection is now empty\n        if (resultStartLineNumber > resultEndLineNumber) {\n            return null;\n        }\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n            return null;\n        }\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n    }\n    /**\n     * Test if this range equals other.\n     */\n    equalsRange(other) {\n        return Range.equalsRange(this, other);\n    }\n    /**\n     * Test if range `a` equals `b`.\n     */\n    static equalsRange(a, b) {\n        return (!!a &&\n            !!b &&\n            a.startLineNumber === b.startLineNumber &&\n            a.startColumn === b.startColumn &&\n            a.endLineNumber === b.endLineNumber &&\n            a.endColumn === b.endColumn);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    getEndPosition() {\n        return Range.getEndPosition(this);\n    }\n    /**\n     * Return the end position (which will be after or equal to the start position)\n     */\n    static getEndPosition(range) {\n        return new Position(range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    getStartPosition() {\n        return Range.getStartPosition(this);\n    }\n    /**\n     * Return the start position (which will be before or equal to the end position)\n     */\n    static getStartPosition(range) {\n        return new Position(range.startLineNumber, range.startColumn);\n    }\n    /**\n     * Transform to a user presentable string representation.\n     */\n    toString() {\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n    }\n    /**\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n     */\n    setEndPosition(endLineNumber, endColumn) {\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n    }\n    /**\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n     */\n    setStartPosition(startLineNumber, startColumn) {\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    collapseToStart() {\n        return Range.collapseToStart(this);\n    }\n    /**\n     * Create a new empty range using this range's start position.\n     */\n    static collapseToStart(range) {\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n    }\n    // ---\n    static fromPositions(start, end = start) {\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n    }\n    static lift(range) {\n        if (!range) {\n            return null;\n        }\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    }\n    /**\n     * Test if `obj` is an `IRange`.\n     */\n    static isIRange(obj) {\n        return (obj\n            && (typeof obj.startLineNumber === 'number')\n            && (typeof obj.startColumn === 'number')\n            && (typeof obj.endLineNumber === 'number')\n            && (typeof obj.endColumn === 'number'));\n    }\n    /**\n     * Test if the two ranges are touching in any way.\n     */\n    static areIntersectingOrTouching(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n     */\n    static areIntersecting(a, b) {\n        // Check if `a` is before `b`\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\n            return false;\n        }\n        // Check if `b` is before `a`\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\n            return false;\n        }\n        // These ranges must intersect\n        return true;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the startPosition and then on the endPosition\n     */\n    static compareRangesUsingStarts(a, b) {\n        if (a && b) {\n            const aStartLineNumber = a.startLineNumber | 0;\n            const bStartLineNumber = b.startLineNumber | 0;\n            if (aStartLineNumber === bStartLineNumber) {\n                const aStartColumn = a.startColumn | 0;\n                const bStartColumn = b.startColumn | 0;\n                if (aStartColumn === bStartColumn) {\n                    const aEndLineNumber = a.endLineNumber | 0;\n                    const bEndLineNumber = b.endLineNumber | 0;\n                    if (aEndLineNumber === bEndLineNumber) {\n                        const aEndColumn = a.endColumn | 0;\n                        const bEndColumn = b.endColumn | 0;\n                        return aEndColumn - bEndColumn;\n                    }\n                    return aEndLineNumber - bEndLineNumber;\n                }\n                return aStartColumn - bStartColumn;\n            }\n            return aStartLineNumber - bStartLineNumber;\n        }\n        const aExists = (a ? 1 : 0);\n        const bExists = (b ? 1 : 0);\n        return aExists - bExists;\n    }\n    /**\n     * A function that compares ranges, useful for sorting ranges\n     * It will first compare ranges on the endPosition and then on the startPosition\n     */\n    static compareRangesUsingEnds(a, b) {\n        if (a.endLineNumber === b.endLineNumber) {\n            if (a.endColumn === b.endColumn) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.startColumn - b.startColumn;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return a.endColumn - b.endColumn;\n        }\n        return a.endLineNumber - b.endLineNumber;\n    }\n    /**\n     * Test if the range spans multiple lines.\n     */\n    static spansMultipleLines(range) {\n        return range.endLineNumber > range.startLineNumber;\n    }\n    toJSON() {\n        return this;\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { Token } from '../languages.js';\nimport * as standaloneEnums from '../standalone/standaloneEnums.js';\nexport class KeyMod {\n    static chord(firstPart, secondPart) {\n        return KeyChord(firstPart, secondPart);\n    }\n}\nKeyMod.CtrlCmd = 2048 /* ConstKeyMod.CtrlCmd */;\nKeyMod.Shift = 1024 /* ConstKeyMod.Shift */;\nKeyMod.Alt = 512 /* ConstKeyMod.Alt */;\nKeyMod.WinCtrl = 256 /* ConstKeyMod.WinCtrl */;\nexport function createMonacoBaseAPI() {\n    return {\n        editor: undefined,\n        languages: undefined,\n        CancellationTokenSource: CancellationTokenSource,\n        Emitter: Emitter,\n        KeyCode: standaloneEnums.KeyCode,\n        KeyMod: KeyMod,\n        Position: Position,\n        Range: Range,\n        Selection: Selection,\n        SelectionDirection: standaloneEnums.SelectionDirection,\n        MarkerSeverity: standaloneEnums.MarkerSeverity,\n        MarkerTag: standaloneEnums.MarkerTag,\n        Uri: URI,\n        Token: Token\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\nimport * as strings from '../../../base/common/strings.js';\nconst MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n    const diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n    return diffAlgo.ComputeDiff(pretty);\n}\nclass LineSequence {\n    constructor(lines) {\n        const startColumns = [];\n        const endColumns = [];\n        for (let i = 0, length = lines.length; i < length; i++) {\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\n        }\n        this.lines = lines;\n        this._startColumns = startColumns;\n        this._endColumns = endColumns;\n    }\n    getElements() {\n        const elements = [];\n        for (let i = 0, len = this.lines.length; i < len; i++) {\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n        }\n        return elements;\n    }\n    getStrictElement(index) {\n        return this.lines[index];\n    }\n    getStartLineNumber(i) {\n        return i + 1;\n    }\n    getEndLineNumber(i) {\n        return i + 1;\n    }\n    createCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n        const charCodes = [];\n        const lineNumbers = [];\n        const columns = [];\n        let len = 0;\n        for (let index = startIndex; index <= endIndex; index++) {\n            const lineContent = this.lines[index];\n            const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\n            const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\n            for (let col = startColumn; col < endColumn; col++) {\n                charCodes[len] = lineContent.charCodeAt(col - 1);\n                lineNumbers[len] = index + 1;\n                columns[len] = col;\n                len++;\n            }\n            if (!shouldIgnoreTrimWhitespace && index < endIndex) {\n                // Add \\n if trim whitespace is not ignored\n                charCodes[len] = 10 /* CharCode.LineFeed */;\n                lineNumbers[len] = index + 1;\n                columns[len] = lineContent.length + 1;\n                len++;\n            }\n        }\n        return new CharSequence(charCodes, lineNumbers, columns);\n    }\n}\nclass CharSequence {\n    constructor(charCodes, lineNumbers, columns) {\n        this._charCodes = charCodes;\n        this._lineNumbers = lineNumbers;\n        this._columns = columns;\n    }\n    toString() {\n        return ('[' + this._charCodes.map((s, idx) => (s === 10 /* CharCode.LineFeed */ ? '\\\\n' : String.fromCharCode(s)) + `-(${this._lineNumbers[idx]},${this._columns[idx]})`).join(', ') + ']');\n    }\n    _assertIndex(index, arr) {\n        if (index < 0 || index >= arr.length) {\n            throw new Error(`Illegal index`);\n        }\n    }\n    getElements() {\n        return this._charCodes;\n    }\n    getStartLineNumber(i) {\n        if (i > 0 && i === this._lineNumbers.length) {\n            // the start line number of the element after the last element\n            // is the end line number of the last element\n            return this.getEndLineNumber(i - 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        return this._lineNumbers[i];\n    }\n    getEndLineNumber(i) {\n        if (i === -1) {\n            // the end line number of the element before the first element\n            // is the start line number of the first element\n            return this.getStartLineNumber(i + 1);\n        }\n        this._assertIndex(i, this._lineNumbers);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return this._lineNumbers[i] + 1;\n        }\n        return this._lineNumbers[i];\n    }\n    getStartColumn(i) {\n        if (i > 0 && i === this._columns.length) {\n            // the start column of the element after the last element\n            // is the end column of the last element\n            return this.getEndColumn(i - 1);\n        }\n        this._assertIndex(i, this._columns);\n        return this._columns[i];\n    }\n    getEndColumn(i) {\n        if (i === -1) {\n            // the end column of the element before the first element\n            // is the start column of the first element\n            return this.getStartColumn(i + 1);\n        }\n        this._assertIndex(i, this._columns);\n        if (this._charCodes[i] === 10 /* CharCode.LineFeed */) {\n            return 1;\n        }\n        return this._columns[i] + 1;\n    }\n}\nclass CharChange {\n    constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalStartColumn = originalStartColumn;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.originalEndColumn = originalEndColumn;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedStartColumn = modifiedStartColumn;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.modifiedEndColumn = modifiedEndColumn;\n    }\n    static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n        const originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n        const originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n        const originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        const originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n        const modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n        const modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n        const modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        const modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n    }\n}\nfunction postProcessCharChanges(rawChanges) {\n    if (rawChanges.length <= 1) {\n        return rawChanges;\n    }\n    const result = [rawChanges[0]];\n    let prevChange = result[0];\n    for (let i = 1, len = rawChanges.length; i < len; i++) {\n        const currChange = rawChanges[i];\n        const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n        const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n        const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n            // Merge the current change into the previous one\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n        }\n        else {\n            // Add the current change\n            result.push(currChange);\n            prevChange = currChange;\n        }\n    }\n    return result;\n}\nclass LineChange {\n    constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n        this.originalStartLineNumber = originalStartLineNumber;\n        this.originalEndLineNumber = originalEndLineNumber;\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\n        this.charChanges = charChanges;\n    }\n    static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n        let originalStartLineNumber;\n        let originalEndLineNumber;\n        let modifiedStartLineNumber;\n        let modifiedEndLineNumber;\n        let charChanges = undefined;\n        if (diffChange.originalLength === 0) {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n            originalEndLineNumber = 0;\n        }\n        else {\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n        }\n        if (diffChange.modifiedLength === 0) {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n            modifiedEndLineNumber = 0;\n        }\n        else {\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n        }\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\n            // Compute character changes for diff chunks of at most 20 lines...\n            const originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n            const modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            if (originalCharSequence.getElements().length > 0 && modifiedCharSequence.getElements().length > 0) {\n                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\n                if (shouldPostProcessCharChanges) {\n                    rawChanges = postProcessCharChanges(rawChanges);\n                }\n                charChanges = [];\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\n                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n                }\n            }\n        }\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n    }\n}\nexport class DiffComputer {\n    constructor(originalLines, modifiedLines, opts) {\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n        this.originalLines = originalLines;\n        this.modifiedLines = modifiedLines;\n        this.original = new LineSequence(originalLines);\n        this.modified = new LineSequence(modifiedLines);\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\n    }\n    computeDiff() {\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\n            // empty original => fast path\n            if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n                return {\n                    quitEarly: false,\n                    changes: []\n                };\n            }\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: 1,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: this.modified.lines.length,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\n            // empty modified => fast path\n            return {\n                quitEarly: false,\n                changes: [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: this.original.lines.length,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: 1,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }]\n            };\n        }\n        const diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\n        const rawChanges = diffResult.changes;\n        const quitEarly = diffResult.quitEarly;\n        // The diff is always computed with ignoring trim whitespace\n        // This ensures we get the prettiest diff\n        if (this.shouldIgnoreTrimWhitespace) {\n            const lineChanges = [];\n            for (let i = 0, length = rawChanges.length; i < length; i++) {\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n            }\n            return {\n                quitEarly: quitEarly,\n                changes: lineChanges\n            };\n        }\n        // Need to post-process and introduce changes where the trim whitespace is different\n        // Note that we are looping starting at -1 to also cover the lines before the first change\n        const result = [];\n        let originalLineIndex = 0;\n        let modifiedLineIndex = 0;\n        for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n            const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\n            const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\n            const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n                const originalLine = this.originalLines[originalLineIndex];\n                const modifiedLine = this.modifiedLines[modifiedLineIndex];\n                if (originalLine !== modifiedLine) {\n                    // These lines differ only in trim whitespace\n                    // Check the leading whitespace\n                    {\n                        let originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\n                        let modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n                            const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n                            const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalStartColumn--;\n                            modifiedStartColumn--;\n                        }\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n                        }\n                    }\n                    // Check the trailing whitespace\n                    {\n                        let originalEndColumn = getLastNonBlankColumn(originalLine, 1);\n                        let modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\n                        const originalMaxColumn = originalLine.length + 1;\n                        const modifiedMaxColumn = modifiedLine.length + 1;\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n                            const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n                            const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n                            if (originalChar !== modifiedChar) {\n                                break;\n                            }\n                            originalEndColumn++;\n                            modifiedEndColumn++;\n                        }\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n                        }\n                    }\n                }\n                originalLineIndex++;\n                modifiedLineIndex++;\n            }\n            if (nextChange) {\n                // Emit the actual change\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                originalLineIndex += nextChange.originalLength;\n                modifiedLineIndex += nextChange.modifiedLength;\n            }\n        }\n        return {\n            quitEarly: quitEarly,\n            changes: result\n        };\n    }\n    _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n            // Merged into previous\n            return;\n        }\n        let charChanges = undefined;\n        if (this.shouldComputeCharChanges) {\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n        }\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n    }\n    _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n        const len = result.length;\n        if (len === 0) {\n            return false;\n        }\n        const prevChange = result[len - 1];\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n            // Don't merge with inserts/deletes\n            return false;\n        }\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n            prevChange.originalEndLineNumber = originalLineNumber;\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n            }\n            return true;\n        }\n        return false;\n    }\n}\nfunction getFirstNonBlankColumn(txt, defaultValue) {\n    const r = strings.firstNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 1;\n}\nfunction getLastNonBlankColumn(txt, defaultValue) {\n    const r = strings.lastNonWhitespaceIndex(txt);\n    if (r === -1) {\n        return defaultValue;\n    }\n    return r + 2;\n}\nfunction createContinueProcessingPredicate(maximumRuntime) {\n    if (maximumRuntime === 0) {\n        return () => true;\n    }\n    const startTime = Date.now();\n    return () => {\n        return Date.now() - startTime < maximumRuntime;\n    };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { splitLines } from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { PrefixSumComputer } from './prefixSumComputer.js';\nexport class MirrorTextModel {\n    constructor(uri, lines, eol, versionId) {\n        this._uri = uri;\n        this._lines = lines;\n        this._eol = eol;\n        this._versionId = versionId;\n        this._lineStarts = null;\n        this._cachedTextValue = null;\n    }\n    dispose() {\n        this._lines.length = 0;\n    }\n    get version() {\n        return this._versionId;\n    }\n    getText() {\n        if (this._cachedTextValue === null) {\n            this._cachedTextValue = this._lines.join(this._eol);\n        }\n        return this._cachedTextValue;\n    }\n    onEvents(e) {\n        if (e.eol && e.eol !== this._eol) {\n            this._eol = e.eol;\n            this._lineStarts = null;\n        }\n        // Update my lines\n        const changes = e.changes;\n        for (const change of changes) {\n            this._acceptDeleteRange(change.range);\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\n        }\n        this._versionId = e.versionId;\n        this._cachedTextValue = null;\n    }\n    _ensureLineStarts() {\n        if (!this._lineStarts) {\n            const eolLength = this._eol.length;\n            const linesLength = this._lines.length;\n            const lineStartValues = new Uint32Array(linesLength);\n            for (let i = 0; i < linesLength; i++) {\n                lineStartValues[i] = this._lines[i].length + eolLength;\n            }\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\n        }\n    }\n    /**\n     * All changes to a line's text go through this method\n     */\n    _setLineText(lineIndex, newValue) {\n        this._lines[lineIndex] = newValue;\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.setValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\n        }\n    }\n    _acceptDeleteRange(range) {\n        if (range.startLineNumber === range.endLineNumber) {\n            if (range.startColumn === range.endColumn) {\n                // Nothing to delete\n                return;\n            }\n            // Delete text on the affected line\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\n            return;\n        }\n        // Take remaining text on last line and append it to remaining text on first line\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\n        // Delete middle lines\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\n        }\n    }\n    _acceptInsertText(position, insertText) {\n        if (insertText.length === 0) {\n            // Nothing to insert\n            return;\n        }\n        const insertLines = splitLines(insertText);\n        if (insertLines.length === 1) {\n            // Inserting text on one line\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n                + insertLines[0]\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\n            return;\n        }\n        // Append overflowing text from first line to the end of text to insert\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\n        // Delete overflowing text from first line and insert text on first line\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\n            + insertLines[0]);\n        // Insert new lines & store lengths\n        const newLengths = new Uint32Array(insertLines.length - 1);\n        for (let i = 1; i < insertLines.length; i++) {\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\n        }\n        if (this._lineStarts) {\n            // update prefix sum\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\n        }\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nexport class Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* State.Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* State.Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* CharacterClass.None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* State.Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* State.Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* CharCode.OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 41 /* CharCode.CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 91 /* CharCode.OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 93 /* CharCode.CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 123 /* CharCode.OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 125 /* CharCode.CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        /* The following three rules make it that ' or \" or ` are allowed inside links if the link didn't begin with them */\n                        case 39 /* CharCode.SingleQuote */:\n                            chClass = (linkBeginChCode === 39 /* CharCode.SingleQuote */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */);\n                            break;\n                        case 34 /* CharCode.DoubleQuote */:\n                            chClass = (linkBeginChCode === 34 /* CharCode.DoubleQuote */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */);\n                            break;\n                        case 96 /* CharCode.BackTick */:\n                            chClass = (linkBeginChCode === 96 /* CharCode.BackTick */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */);\n                            break;\n                        case 42 /* CharCode.Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 124 /* CharCode.Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 32 /* CharCode.Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* State.End */) {\n                    let chClass;\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* CharacterClass.None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* State.Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* State.Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* State.Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* State.Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        const n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { globals } from '../../../base/common/platform.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { DiffComputer } from '../diff/diffComputer.js';\nimport { MirrorTextModel as BaseMirrorModel } from '../model/mirrorTextModel.js';\nimport { ensureValidWordDefinition, getWordAtText } from '../core/wordHelper.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport * as types from '../../../base/common/types.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\n/**\n * @internal\n */\nexport class MirrorModel extends BaseMirrorModel {\n    get uri() {\n        return this._uri;\n    }\n    get eol() {\n        return this._eol;\n    }\n    getValue() {\n        return this.getText();\n    }\n    getLinesContent() {\n        return this._lines.slice(0);\n    }\n    getLineCount() {\n        return this._lines.length;\n    }\n    getLineContent(lineNumber) {\n        return this._lines[lineNumber - 1];\n    }\n    getWordAtPosition(position, wordDefinition) {\n        const wordAtText = getWordAtText(position.column, ensureValidWordDefinition(wordDefinition), this._lines[position.lineNumber - 1], 0);\n        if (wordAtText) {\n            return new Range(position.lineNumber, wordAtText.startColumn, position.lineNumber, wordAtText.endColumn);\n        }\n        return null;\n    }\n    words(wordDefinition) {\n        const lines = this._lines;\n        const wordenize = this._wordenize.bind(this);\n        let lineNumber = 0;\n        let lineText = '';\n        let wordRangesIdx = 0;\n        let wordRanges = [];\n        return {\n            *[Symbol.iterator]() {\n                while (true) {\n                    if (wordRangesIdx < wordRanges.length) {\n                        const value = lineText.substring(wordRanges[wordRangesIdx].start, wordRanges[wordRangesIdx].end);\n                        wordRangesIdx += 1;\n                        yield value;\n                    }\n                    else {\n                        if (lineNumber < lines.length) {\n                            lineText = lines[lineNumber];\n                            wordRanges = wordenize(lineText, wordDefinition);\n                            wordRangesIdx = 0;\n                            lineNumber += 1;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    getLineWords(lineNumber, wordDefinition) {\n        const content = this._lines[lineNumber - 1];\n        const ranges = this._wordenize(content, wordDefinition);\n        const words = [];\n        for (const range of ranges) {\n            words.push({\n                word: content.substring(range.start, range.end),\n                startColumn: range.start + 1,\n                endColumn: range.end + 1\n            });\n        }\n        return words;\n    }\n    _wordenize(content, wordDefinition) {\n        const result = [];\n        let match;\n        wordDefinition.lastIndex = 0; // reset lastIndex just to be sure\n        while (match = wordDefinition.exec(content)) {\n            if (match[0].length === 0) {\n                // it did match the empty string\n                break;\n            }\n            result.push({ start: match.index, end: match.index + match[0].length });\n        }\n        return result;\n    }\n    getValueInRange(range) {\n        range = this._validateRange(range);\n        if (range.startLineNumber === range.endLineNumber) {\n            return this._lines[range.startLineNumber - 1].substring(range.startColumn - 1, range.endColumn - 1);\n        }\n        const lineEnding = this._eol;\n        const startLineIndex = range.startLineNumber - 1;\n        const endLineIndex = range.endLineNumber - 1;\n        const resultLines = [];\n        resultLines.push(this._lines[startLineIndex].substring(range.startColumn - 1));\n        for (let i = startLineIndex + 1; i < endLineIndex; i++) {\n            resultLines.push(this._lines[i]);\n        }\n        resultLines.push(this._lines[endLineIndex].substring(0, range.endColumn - 1));\n        return resultLines.join(lineEnding);\n    }\n    offsetAt(position) {\n        position = this._validatePosition(position);\n        this._ensureLineStarts();\n        return this._lineStarts.getPrefixSum(position.lineNumber - 2) + (position.column - 1);\n    }\n    positionAt(offset) {\n        offset = Math.floor(offset);\n        offset = Math.max(0, offset);\n        this._ensureLineStarts();\n        const out = this._lineStarts.getIndexOf(offset);\n        const lineLength = this._lines[out.index].length;\n        // Ensure we return a valid position\n        return {\n            lineNumber: 1 + out.index,\n            column: 1 + Math.min(out.remainder, lineLength)\n        };\n    }\n    _validateRange(range) {\n        const start = this._validatePosition({ lineNumber: range.startLineNumber, column: range.startColumn });\n        const end = this._validatePosition({ lineNumber: range.endLineNumber, column: range.endColumn });\n        if (start.lineNumber !== range.startLineNumber\n            || start.column !== range.startColumn\n            || end.lineNumber !== range.endLineNumber\n            || end.column !== range.endColumn) {\n            return {\n                startLineNumber: start.lineNumber,\n                startColumn: start.column,\n                endLineNumber: end.lineNumber,\n                endColumn: end.column\n            };\n        }\n        return range;\n    }\n    _validatePosition(position) {\n        if (!Position.isIPosition(position)) {\n            throw new Error('bad position');\n        }\n        let { lineNumber, column } = position;\n        let hasChanged = false;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            column = 1;\n            hasChanged = true;\n        }\n        else if (lineNumber > this._lines.length) {\n            lineNumber = this._lines.length;\n            column = this._lines[lineNumber - 1].length + 1;\n            hasChanged = true;\n        }\n        else {\n            const maxCharacter = this._lines[lineNumber - 1].length + 1;\n            if (column < 1) {\n                column = 1;\n                hasChanged = true;\n            }\n            else if (column > maxCharacter) {\n                column = maxCharacter;\n                hasChanged = true;\n            }\n        }\n        if (!hasChanged) {\n            return position;\n        }\n        else {\n            return { lineNumber, column };\n        }\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker {\n    constructor(host, foreignModuleFactory) {\n        this._host = host;\n        this._models = Object.create(null);\n        this._foreignModuleFactory = foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    dispose() {\n        this._models = Object.create(null);\n    }\n    _getModel(uri) {\n        return this._models[uri];\n    }\n    _getModels() {\n        const all = [];\n        Object.keys(this._models).forEach((key) => all.push(this._models[key]));\n        return all;\n    }\n    acceptNewModel(data) {\n        this._models[data.url] = new MirrorModel(URI.parse(data.url), data.lines, data.EOL, data.versionId);\n    }\n    acceptModelChanged(strURL, e) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        const model = this._models[strURL];\n        model.onEvents(e);\n    }\n    acceptRemovedModel(strURL) {\n        if (!this._models[strURL]) {\n            return;\n        }\n        delete this._models[strURL];\n    }\n    computeUnicodeHighlights(url, options, range) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(url);\n            if (!model) {\n                return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n            }\n            return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n        });\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    computeDiff(originalUrl, modifiedUrl, ignoreTrimWhitespace, maxComputationTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const original = this._getModel(originalUrl);\n            const modified = this._getModel(modifiedUrl);\n            if (!original || !modified) {\n                return null;\n            }\n            return EditorSimpleWorker.computeDiff(original, modified, ignoreTrimWhitespace, maxComputationTime);\n        });\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, ignoreTrimWhitespace, maxComputationTime) {\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const diffComputer = new DiffComputer(originalLines, modifiedLines, {\n            shouldComputeCharChanges: true,\n            shouldPostProcessCharChanges: true,\n            shouldIgnoreTrimWhitespace: ignoreTrimWhitespace,\n            shouldMakePrettyDiff: true,\n            maxComputationTime: maxComputationTime\n        });\n        const diffResult = diffComputer.computeDiff();\n        const identical = (diffResult.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        return {\n            quitEarly: diffResult.quitEarly,\n            identical: identical,\n            changes: diffResult.changes\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    computeMoreMinimalEdits(modelUrl, edits) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return edits;\n            }\n            const result = [];\n            let lastEol = undefined;\n            edits = edits.slice(0).sort((a, b) => {\n                if (a.range && b.range) {\n                    return Range.compareRangesUsingStarts(a.range, b.range);\n                }\n                // eol only changes should go to the end\n                const aRng = a.range ? 0 : 1;\n                const bRng = b.range ? 0 : 1;\n                return aRng - bRng;\n            });\n            for (let { range, text, eol } of edits) {\n                if (typeof eol === 'number') {\n                    lastEol = eol;\n                }\n                if (Range.isEmpty(range) && !text) {\n                    // empty change\n                    continue;\n                }\n                const original = model.getValueInRange(range);\n                text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n                if (original === text) {\n                    // noop\n                    continue;\n                }\n                // make sure diff won't take too long\n                if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                    result.push({ range, text });\n                    continue;\n                }\n                // compute diff between original and edit.text\n                const changes = stringDiff(original, text, false);\n                const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n                for (const change of changes) {\n                    const start = model.positionAt(editOffset + change.originalStart);\n                    const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                    const newEdit = {\n                        text: text.substr(change.modifiedStart, change.modifiedLength),\n                        range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                    };\n                    if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                        result.push(newEdit);\n                    }\n                }\n            }\n            if (typeof lastEol === 'number') {\n                result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n            }\n            return result;\n        });\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    computeLinks(modelUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            return computeLinks(model);\n        });\n    }\n    textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const sw = new StopWatch(true);\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const seen = new Set();\n            outer: for (const url of modelUrls) {\n                const model = this._getModel(url);\n                if (!model) {\n                    continue;\n                }\n                for (const word of model.words(wordDefRegExp)) {\n                    if (word === leadingWord || !isNaN(Number(word))) {\n                        continue;\n                    }\n                    seen.add(word);\n                    if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                        break outer;\n                    }\n                }\n            }\n            return { words: Array.from(seen), duration: sw.elapsed() };\n        });\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return Object.create(null);\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            const result = Object.create(null);\n            for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n                const words = model.getLineWords(line, wordDefRegExp);\n                for (const word of words) {\n                    if (!isNaN(Number(word.word))) {\n                        continue;\n                    }\n                    let array = result[word.word];\n                    if (!array) {\n                        array = [];\n                        result[word.word] = array;\n                    }\n                    array.push({\n                        startLineNumber: line,\n                        startColumn: word.startColumn,\n                        endLineNumber: line,\n                        endColumn: word.endColumn\n                    });\n                }\n            }\n            return result;\n        });\n    }\n    //#endregion\n    navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = this._getModel(modelUrl);\n            if (!model) {\n                return null;\n            }\n            const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n            if (range.startColumn === range.endColumn) {\n                range = {\n                    startLineNumber: range.startLineNumber,\n                    startColumn: range.startColumn,\n                    endLineNumber: range.endLineNumber,\n                    endColumn: range.endColumn + 1\n                };\n            }\n            const selectionText = model.getValueInRange(range);\n            const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n            if (!wordRange) {\n                return null;\n            }\n            const word = model.getValueInRange(wordRange);\n            const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n            return result;\n        });\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.fhr(method, args);\n        };\n        const foreignHost = types.createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(types.getAllMethodNames(this._foreignModule));\n        }\n        // ESM-comment-begin\n        // \t\treturn new Promise<any>((resolve, reject) => {\n        // \t\t\trequire([moduleId], (foreignModule: { create: IForeignModuleFactory }) => {\n        // \t\t\t\tthis._foreignModule = foreignModule.create(ctx, createData);\n        // \n        // \t\t\t\tresolve(types.getAllMethodNames(this._foreignModule));\n        // \n        // \t\t\t}, reject);\n        // \t\t});\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        return Promise.reject(new Error(`Unexpected usage`));\n        // ESM-uncomment-end\n    }\n    // foreign method request\n    fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n// ---- END diff --------------------------------------------------------------------------\n// ---- BEGIN minimal edits ---------------------------------------------------------------\nEditorSimpleWorker._diffLimit = 100000;\n// ---- BEGIN suggest --------------------------------------------------------------------------\nEditorSimpleWorker._suggestionsLimit = 10000;\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host) {\n    return new EditorSimpleWorker(host, null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globals.monaco = createMonacoBaseAPI();\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../core/range.js';\nimport { Searcher } from '../model/textModelSearch.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { assertNever } from '../../../base/common/types.js';\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from '../core/wordHelper.js';\nexport class UnicodeTextModelHighlighter {\n    static computeUnicodeHighlights(model, options, range) {\n        const startLine = range ? range.startLineNumber : 1;\n        const endLine = range ? range.endLineNumber : model.getLineCount();\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const candidates = codePointHighlighter.getCandidateCodePoints();\n        let regex;\n        if (candidates === 'allNonBasicAscii') {\n            regex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n        }\n        else {\n            regex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n        }\n        const searcher = new Searcher(null, regex);\n        const ranges = [];\n        let hasMore = false;\n        let m;\n        let ambiguousCharacterCount = 0;\n        let invisibleCharacterCount = 0;\n        let nonBasicAsciiCharacterCount = 0;\n        forLoop: for (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n            const lineContent = model.getLineContent(lineNumber);\n            const lineLength = lineContent.length;\n            // Reset regex to search from the beginning\n            searcher.reset(0);\n            do {\n                m = searcher.next(lineContent);\n                if (m) {\n                    let startIndex = m.index;\n                    let endIndex = m.index + m[0].length;\n                    // Extend range to entire code point\n                    if (startIndex > 0) {\n                        const charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            startIndex--;\n                        }\n                    }\n                    if (endIndex + 1 < lineLength) {\n                        const charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n                        if (strings.isHighSurrogate(charCodeBefore)) {\n                            endIndex++;\n                        }\n                    }\n                    const str = lineContent.substring(startIndex, endIndex);\n                    const word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);\n                    const highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n                    if (highlightReason !== 0 /* SimpleHighlightReason.None */) {\n                        if (highlightReason === 3 /* SimpleHighlightReason.Ambiguous */) {\n                            ambiguousCharacterCount++;\n                        }\n                        else if (highlightReason === 2 /* SimpleHighlightReason.Invisible */) {\n                            invisibleCharacterCount++;\n                        }\n                        else if (highlightReason === 1 /* SimpleHighlightReason.NonBasicASCII */) {\n                            nonBasicAsciiCharacterCount++;\n                        }\n                        else {\n                            assertNever(highlightReason);\n                        }\n                        const MAX_RESULT_LENGTH = 1000;\n                        if (ranges.length >= MAX_RESULT_LENGTH) {\n                            hasMore = true;\n                            break forLoop;\n                        }\n                        ranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n                    }\n                }\n            } while (m);\n        }\n        return {\n            ranges,\n            hasMore,\n            ambiguousCharacterCount,\n            invisibleCharacterCount,\n            nonBasicAsciiCharacterCount\n        };\n    }\n    static computeUnicodeHighlightReason(char, options) {\n        const codePointHighlighter = new CodePointHighlighter(options);\n        const reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n        switch (reason) {\n            case 0 /* SimpleHighlightReason.None */:\n                return null;\n            case 2 /* SimpleHighlightReason.Invisible */:\n                return { kind: 1 /* UnicodeHighlighterReasonKind.Invisible */ };\n            case 3 /* SimpleHighlightReason.Ambiguous */: {\n                const codePoint = char.codePointAt(0);\n                const primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint);\n                const notAmbiguousInLocales = strings.AmbiguousCharacters.getLocales().filter((l) => !strings.AmbiguousCharacters.getInstance(new Set([...options.allowedLocales, l])).isAmbiguous(codePoint));\n                return { kind: 0 /* UnicodeHighlighterReasonKind.Ambiguous */, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n            }\n            case 1 /* SimpleHighlightReason.NonBasicASCII */:\n                return { kind: 2 /* UnicodeHighlighterReasonKind.NonBasicAscii */ };\n        }\n    }\n}\nfunction buildRegExpCharClassExpr(codePoints, flags) {\n    const src = `[${strings.escapeRegExpCharacters(codePoints.map((i) => String.fromCodePoint(i)).join(''))}]`;\n    return src;\n}\nclass CodePointHighlighter {\n    constructor(options) {\n        this.options = options;\n        this.allowedCodePoints = new Set(options.allowedCodePoints);\n        this.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n    }\n    getCandidateCodePoints() {\n        if (this.options.nonBasicASCII) {\n            return 'allNonBasicAscii';\n        }\n        const set = new Set();\n        if (this.options.invisibleCharacters) {\n            for (const cp of strings.InvisibleCharacters.codePoints) {\n                if (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n                    set.add(cp);\n                }\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            for (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n                set.add(cp);\n            }\n        }\n        for (const cp of this.allowedCodePoints) {\n            set.delete(cp);\n        }\n        return set;\n    }\n    shouldHighlightNonBasicASCII(character, wordContext) {\n        const codePoint = character.codePointAt(0);\n        if (this.allowedCodePoints.has(codePoint)) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.nonBasicASCII) {\n            return 1 /* SimpleHighlightReason.NonBasicASCII */;\n        }\n        let hasBasicASCIICharacters = false;\n        let hasNonConfusableNonBasicAsciiCharacter = false;\n        if (wordContext) {\n            for (const char of wordContext) {\n                const codePoint = char.codePointAt(0);\n                const isBasicASCII = strings.isBasicASCII(char);\n                hasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n                if (!isBasicASCII &&\n                    !this.ambiguousCharacters.isAmbiguous(codePoint) &&\n                    !strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                    hasNonConfusableNonBasicAsciiCharacter = true;\n                }\n            }\n        }\n        if (\n        /* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n            /* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter) {\n            return 0 /* SimpleHighlightReason.None */;\n        }\n        if (this.options.invisibleCharacters) {\n            // TODO check for emojis\n            if (!isAllowedInvisibleCharacter(character) && strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n                return 2 /* SimpleHighlightReason.Invisible */;\n            }\n        }\n        if (this.options.ambiguousCharacters) {\n            if (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n                return 3 /* SimpleHighlightReason.Ambiguous */;\n            }\n        }\n        return 0 /* SimpleHighlightReason.None */;\n    }\n}\nfunction isAllowedInvisibleCharacter(character) {\n    return character === ' ' || character === '\\n' || character === '\\t';\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Emitter } from '../../base/common/event.js';\nimport { Disposable, toDisposable } from '../../base/common/lifecycle.js';\nexport class TokenizationRegistry {\n    constructor() {\n        this._map = new Map();\n        this._factories = new Map();\n        this._onDidChange = new Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    fire(languages) {\n        this._onDidChange.fire({\n            changedLanguages: languages,\n            changedColorMap: false\n        });\n    }\n    register(language, support) {\n        this._map.set(language, support);\n        this.fire([language]);\n        return toDisposable(() => {\n            if (this._map.get(language) !== support) {\n                return;\n            }\n            this._map.delete(language);\n            this.fire([language]);\n        });\n    }\n    registerFactory(languageId, factory) {\n        var _a;\n        (_a = this._factories.get(languageId)) === null || _a === void 0 ? void 0 : _a.dispose();\n        const myData = new TokenizationSupportFactoryData(this, languageId, factory);\n        this._factories.set(languageId, myData);\n        return toDisposable(() => {\n            const v = this._factories.get(languageId);\n            if (!v || v !== myData) {\n                return;\n            }\n            this._factories.delete(languageId);\n            v.dispose();\n        });\n    }\n    getOrCreate(languageId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check first if the support is already set\n            const tokenizationSupport = this.get(languageId);\n            if (tokenizationSupport) {\n                return tokenizationSupport;\n            }\n            const factory = this._factories.get(languageId);\n            if (!factory || factory.isResolved) {\n                // no factory or factory.resolve already finished\n                return null;\n            }\n            yield factory.resolve();\n            return this.get(languageId);\n        });\n    }\n    get(language) {\n        return (this._map.get(language) || null);\n    }\n    isResolved(languageId) {\n        const tokenizationSupport = this.get(languageId);\n        if (tokenizationSupport) {\n            return true;\n        }\n        const factory = this._factories.get(languageId);\n        if (!factory || factory.isResolved) {\n            return true;\n        }\n        return false;\n    }\n    setColorMap(colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: Array.from(this._map.keys()),\n            changedColorMap: true\n        });\n    }\n    getColorMap() {\n        return this._colorMap;\n    }\n    getDefaultBackground() {\n        if (this._colorMap && this._colorMap.length > 2 /* ColorId.DefaultBackground */) {\n            return this._colorMap[2 /* ColorId.DefaultBackground */];\n        }\n        return null;\n    }\n}\nclass TokenizationSupportFactoryData extends Disposable {\n    constructor(_registry, _languageId, _factory) {\n        super();\n        this._registry = _registry;\n        this._languageId = _languageId;\n        this._factory = _factory;\n        this._isDisposed = false;\n        this._resolvePromise = null;\n        this._isResolved = false;\n    }\n    get isResolved() {\n        return this._isResolved;\n    }\n    dispose() {\n        this._isDisposed = true;\n        super.dispose();\n    }\n    resolve() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._resolvePromise) {\n                this._resolvePromise = this._create();\n            }\n            return this._resolvePromise;\n        });\n    }\n    _create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const value = yield Promise.resolve(this._factory.createTokenizationSupport());\n            this._isResolved = true;\n            if (value && !this._isDisposed) {\n                this._register(this._registry.register(this._languageId, value));\n            }\n        });\n    }\n}\n"],"names":["DiffChange","originalStart","originalLength","modifiedStart","modifiedLength","once","fn","_this","didCall","result","Lazy","executor","err","Node","element","LinkedList","node","next","atTheEnd","newNode","oldLast","oldFirst","didRemove","res","anchor","safeProcess","sandboxProcess","cwd","env","platform","hasPerformanceNow","StopWatch","highResolution","toUint8","v","toUint32","Position","lineNumber","column","newLineNumber","newColumn","deltaLineNumber","deltaColumn","other","b","aLineNumber","bLineNumber","aColumn","bColumn","pos","obj","Range","startLineNumber","startColumn","endLineNumber","endColumn","range","position","otherRange","a","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","start","end","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","aEndColumn","bEndColumn","KeyMod","firstPart","secondPart","createMonacoBaseAPI","MINIMUM_MATCHING_CHARACTER_LENGTH","computeDiff","originalSequence","modifiedSequence","continueProcessingPredicate","pretty","LineSequence","lines","startColumns","endColumns","i","length","getFirstNonBlankColumn","getLastNonBlankColumn","elements","len","index","shouldIgnoreTrimWhitespace","startIndex","endIndex","charCodes","lineNumbers","columns","lineContent","col","CharSequence","s","idx","arr","CharChange","originalStartLineNumber","originalStartColumn","originalEndLineNumber","originalEndColumn","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","diffChange","originalCharSequence","modifiedCharSequence","postProcessCharChanges","rawChanges","prevChange","currChange","originalMatchingLength","modifiedMatchingLength","LineChange","charChanges","originalLineSequence","modifiedLineSequence","continueCharDiff","shouldComputeCharChanges","shouldPostProcessCharChanges","DiffComputer","originalLines","modifiedLines","opts","createContinueProcessingPredicate","diffResult","quitEarly","lineChanges","originalLineIndex","modifiedLineIndex","nextChange","originalStop","modifiedStop","originalLine","modifiedLine","originalChar","modifiedChar","originalMaxColumn","modifiedMaxColumn","originalLineNumber","modifiedLineNumber","txt","defaultValue","r","strings","maximumRuntime","startTime","MirrorTextModel","uri","eol","versionId","changes","change","eolLength","linesLength","lineStartValues","lineIndex","newValue","insertText","insertLines","newLengths","Uint8Matrix","rows","cols","data","row","value","StateMachine","edges","maxCharCode","maxState","from","chCode","to","states","currentState","_stateMachine","getStateMachine","_classifier","getClassifier","FORCE_TERMINATION_CHARACTERS","CANNOT_END_WITH_CHARACTERS","LinkComputer","classifier","line","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","charCodeBeforeLink","lastCharCodeInLink","model","stateMachine","lineCount","j","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","chClass","computeLinks","BasicInplaceReplace","range1","text1","range2","text2","up","text","numberResult","precision","n1","n2","valueSets","valueSet","__awaiter","thisArg","_arguments","P","generator","adopt","resolve","reject","fulfilled","step","e","rejected","MirrorModel","wordDefinition","wordAtText","wordenize","lineText","wordRangesIdx","wordRanges","content","ranges","words","match","lineEnding","startLineIndex","endLineIndex","resultLines","offset","out","lineLength","hasChanged","maxCharacter","EditorSimpleWorker","host","foreignModuleFactory","all","key","strURL","url","options","originalUrl","modifiedUrl","ignoreTrimWhitespace","maxComputationTime","original","modified","originalTextModel","modifiedTextModel","identical","originalLineCount","modifiedLineCount","modelUrl","edits","lastEol","aRng","bRng","editOffset","newEdit","modelUrls","leadingWord","wordDef","wordDefFlags","sw","wordDefRegExp","seen","outer","word","array","selectionText","wordRange","moduleId","createData","foreignHostMethods","proxyMethodRequest","method","args","ctx","types","create","UnicodeTextModelHighlighter","startLine","endLine","codePointHighlighter","CodePointHighlighter","candidates","regex","buildRegExpCharClassExpr","searcher","hasMore","m","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","forLoop","charCodeBefore","str","highlightReason","char","codePoint","primaryConfusable","notAmbiguousInLocales","l","codePoints","flags","set","cp","isAllowedInvisibleCharacter","character","wordContext","hasBasicASCIICharacters","hasNonConfusableNonBasicAsciiCharacter","isBasicASCII","TokenizationRegistry","languages","language","support","languageId","factory","_a","myData","TokenizationSupportFactoryData","tokenizationSupport","colorMap","_registry","_languageId","_factory"],"sourceRoot":""}