{"version":3,"file":"barChartPanel.0badf1c77669baf760d5.js","mappings":"qKAkBO,MAAMA,EAAoB,CAAC,CAChC,MAAAC,EACA,SAAAC,EACA,SAAAC,EACA,WAAAC,EAAa,GACb,UAAAC,CACF,IAA8B,CAC5B,MAAMC,KAAS,MAAWC,CAAS,EAE7BC,EAAiCJ,EACnC,CACE,UAAAC,EACA,UAAW,MACb,EACA,CAAC,EAEL,SACE,QAAC,OAAI,UAAWC,EAAO,QAAS,MAAOE,EACpC,UAAAP,EAAM,IAAI,CAAC,CAAE,MAAAQ,EAAO,MAAAC,EAAO,MAAAC,EAAO,eAAAC,EAAgB,eAAAC,EAAgB,SAAAC,EAAU,UAAAC,CAAU,EAAGC,OACxF,OAAC,KAEC,MAAAP,EACA,MAAAC,EACA,MAAAC,EACA,eAAAC,EACA,eAAAC,EACA,SAAAC,EACA,QAAS,gBACT,SAAAX,EACA,UAAAY,EACA,gBAAiB,CAACX,CAAA,EAVbY,CAWP,CACD,EACAd,CAAA,EACH,CAEJ,EAEMK,EAAaU,IAA0B,CAC3C,WAAS,OAAI,CACX,QAAS,OACT,cAAe,SACf,KAAM,EACN,IAAK,EACL,UAAW,aAAaA,EAAM,OAAO,OAAO,MAAM,GAClD,QAASA,EAAM,QAAQ,CAAC,CAC1B,CAAC,CACH,E,0GCtDO,SAASC,EAAa,CAAE,OAAAC,EAAQ,GAAGC,CAAY,EAAsB,CAC1E,SACE,OAACC,EAAA,GAAM,CAAC,QAAQ,UAAU,KAAK,KAAK,QAASF,EAAO,QAAU,GAAGC,EAC9D,SAAAD,EAAO,MACV,CAEJ,CCHO,MAAMG,EAAoB,wBAE3BC,EAAkB,CAACC,EAAwBlB,OAE7C,OAACmB,EAAA,EAAK,CAAC,UAAU,SAAS,eAAe,aAAa,IAAK,GACxD,SAAAD,EAAU,IAAI,CAACE,EAAMV,OACpB,OAACW,EAAA,EAAc,CAAC,KAAAD,EAAoB,YAAa,CAAE,UAAWpB,EAAO,eAAgB,KAAM,MAAO,GAAjEU,CAAoE,CACtG,EACH,EAIEY,EAAiBC,MAEnB,OAACJ,EAAA,EAAK,CAAC,UAAU,SAAS,eAAe,aACtC,SAAAI,EAAQ,IAAI,CAACV,EAAQH,OACpB,OAACE,EAAY,CAAS,OAAAC,EAAgB,QAAQ,WAAY,EAAvCH,CAAuC,CAC3D,EACH,EAISc,EAAmB,CAAC,CAAE,UAAAN,EAAW,QAAAK,EAAS,SAAAE,CAAS,IAA6B,CAC3F,MAAMzB,KAAS,MAAWC,CAAS,EAEnC,SACE,QAAC,OAAI,UAAWD,EAAO,QACpB,UAAAkB,EAAU,OAAS,MAAK,OAAC,OAAI,UAAWlB,EAAO,UAAY,SAAAiB,EAAgBC,EAAWlB,CAAM,EAAE,EAC9FuB,GAAWA,EAAQ,OAAS,MAAK,OAAC,OAAI,UAAWvB,EAAO,UAAY,SAAAsB,EAAcC,CAAO,EAAE,EAC3FE,GAAY,SACX,OAAC,OAAI,UAAWzB,EAAO,eACrB,mBAACe,EAAA,GAAM,CAAC,KAAK,cAAc,QAAQ,YAAY,KAAK,KAAK,GAAIC,EAAmB,QAASS,EAAU,0BAEnG,EACF,GAEJ,CAEJ,EAEMxB,EAAaU,IAA0B,CAC3C,WAAS,OAAI,CACX,QAAS,OACT,cAAe,SACf,KAAM,EACN,QAASA,EAAM,QAAQ,CAAC,CAC1B,CAAC,EACD,aAAW,OAAI,CACb,UAAW,aAAaA,EAAM,OAAO,OAAO,MAAM,GAClD,QAASA,EAAM,QAAQ,CAAC,CAC1B,CAAC,EACD,kBAAgB,OAAI,CAClB,UAAW,aAAaA,EAAM,OAAO,OAAO,MAAM,GAClD,QAASA,EAAM,QAAQ,CAAC,CAC1B,CAAC,EACD,kBAAgB,OAAI,CAClB,OAAQ,UACR,UAAW,CACT,eAAgB,YAChB,WAAY,MACd,CACF,CAAC,CACH,E,oFC/DO,MAAMe,EAAmB,CAAC,CAAE,KAAAC,EAAM,SAAA9B,CAAS,IAAa,CAC7D,MAAMG,KAAS,MAAWC,CAAS,EAE7B,CAAE,MAAAE,EAAO,MAAAC,EAAO,MAAAC,EAAO,eAAAC,CAAe,EAAIqB,EAEhD,SACE,OAAC,OAAI,UAAW3B,EAAO,QACrB,mBAAC,KACC,MAAAG,EACA,MAAAC,EACA,MAAAC,EACA,eAAAC,EACA,YAAa,OACb,SAAAT,CAAA,CACF,EACF,CAEJ,EAEMI,EAAaU,IAA0B,CAC3C,WAAS,OAAI,CACX,QAAS,OACT,cAAe,SACf,KAAM,EACN,QAASA,EAAM,QAAQ,CAAC,EACxB,WAAY,CACd,CAAC,CACH,E,sJC7BYiB,GAAAA,IACVA,EAAAA,EAAA,qBACAA,EAAAA,EAAA,uBAFUA,IAAAA,GAAA,IAcL,MAAMC,EAA2B,CAAC,CACvC,MAAAxB,EAAQ,IACR,eAAAC,EAAiB,KACjB,SAAAwB,EAAW,EACX,UAAArB,CACF,IAAa,CACX,MAAMT,KAAS,MAAWC,CAAS,EAEnC,OAAIK,IAAmB,KAAe,UAElC,OAACyB,EAAA,GACC,MAAA1B,EACA,UAAAI,EACA,UAAWqB,IAAa,EAAiC9B,EAAO,QAAUA,EAAO,SACnF,KAKF,OAAC,QACC,MAAO,CAAE,gBAAiBK,CAAM,EAChC,aAAW,MACTyB,IAAa,EAAiC9B,EAAO,QAAUA,EAAO,YACtE,MAAuBM,EAAgBN,CAAM,CAC/C,EACF,CAEJ,EAGMC,EAAaU,IAA0B,CAC3C,WAAS,OAAI,CACX,YAAaA,EAAM,QAAQ,EAAG,CAChC,CAAC,EACD,YAAU,OAAI,CACZ,WAAYA,EAAM,QAAQ,EAAG,CAC/B,CAAC,EACD,SAAO,OAAI,CACT,MAAO,OACP,OAAQ,OACR,aAAcA,EAAM,MAAM,OAAO,QACjC,WAAY,IACZ,SAAU,MACZ,CAAC,EACD,WAAS,OAAI,CAAC,CAAC,EACf,WAAS,OAAI,CAAC,CAAC,EACf,WAAS,OAAI,CAAC,CAAC,EACf,WAAS,OAAI,CAAC,CAAC,EACf,aAAW,OAAI,CACb,MAAO,MACP,OAAQ,MACR,aAAcA,EAAM,MAAM,OAAO,OACjC,SAAU,KACZ,CAAC,EACD,aAAW,OAAI,CACb,MAAO,MACP,OAAQ,MACR,aAAcA,EAAM,MAAM,OAAO,OACjC,SAAU,KACZ,CAAC,EACD,aAAW,OAAI,CACb,MAAO,OACP,OAAQ,OACR,aAAcA,EAAM,MAAM,OAAO,OACjC,SAAU,MACZ,CAAC,CACH,GCrEA,IAAKqB,GAAAA,IACHA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QAFLA,IAAAA,GAAA,IAKL,MAAMC,EAA2B,sBAC3BC,EAAwB,EAAI,IAC5BC,EAAyB,EAElBC,EAAgB,CAAC,CAC5B,MAAAjC,EACA,MAAAC,EACA,MAAAC,EACA,eAAAC,EACA,eAAAC,EAAiB,KAAe,MAChC,QAAA8B,EAAU,aACV,SAAA7B,GAAW,GACX,YAAA8B,GAAc,MACd,SAAAzC,GACA,UAAAY,EACA,gBAAA8B,EACF,IAA0B,CACxB,MAAMvC,KAAS,MAAW,EAAWqC,EAASC,EAAW,EAEnDE,GAAuCD,GACzC,CACE,UAAW,GACX,WAAY,OACZ,UAAW,aACX,UAAW,MACb,EACA,CACE,WAAY,OACZ,UAAW,YACb,EAEE,CAACE,GAAkBC,EAAmB,KAAI,YAAS,EAAK,EAExD,CAACC,GAAYC,EAAa,KAAI,YAAwC,IAAI,EAC1E,CAACC,GAAiBC,EAAkB,KAAI,YAAS,EAAK,EAEtDC,MAAW,UAA8B,IAAI,EAC7CC,MAAW,UAA8B,IAAI,KAEnD,aAAU,IAAM,CACd,IAAIC,EAEJ,OAAIJ,KACFI,EAAY,WAAW,IAAM,CAC3BH,GAAmB,EAAK,CAC1B,EAAGZ,CAAqB,GAGnB,IAAM,CACX,OAAO,aAAae,CAAS,CAC/B,CACF,EAAG,CAACJ,EAAe,CAAC,EAEpB,MAAMK,GAAkB,MAAOC,EAAcC,KAA0B,CACrE,GAAI,EAAE,WAAW,WAAa,OAAO,iBAAkB,CACrDC,GAAwBF,EAAMC,EAAI,EAClC,MACF,CAEA,GAAI,CACF,MAAM,UAAU,UAAU,UAAUD,CAAI,EACxCP,GAAc,CAAE,CAAC,GAAGQ,EAAI,EAAE,EAAGD,CAAK,CAAC,EACnCL,GAAmB,EAAI,CACzB,MAAgB,CACdF,GAAc,IAAI,CACpB,CACF,EAEMS,GAA0B,CAACF,EAAcC,KAA0B,CAEvE,MAAME,GAAW,SAAS,cAAc,UAAU,EAClDP,GAAS,SAAS,YAAYO,EAAQ,EACtCA,GAAS,MAAQH,EACjBG,GAAS,MAAM,EACfA,GAAS,OAAO,EAChB,GAAI,CACiB,SAAS,YAAY,MAAM,IAE5CV,GAAc,CAAE,CAAC,GAAGQ,EAAI,EAAE,EAAGD,CAAK,CAAC,EACnCL,GAAmB,EAAI,EAE3B,OAASS,GAAK,CACZ,QAAQ,MAAM,8BAA+BA,EAAG,CAClD,CAEAD,GAAS,OAAO,CAClB,EAEME,GAAqBC,GAA4C,CACjEA,EAAM,cAAc,YAAcA,EAAM,cAAc,aACxDf,GAAoB,EAAI,CAE5B,EAEMgB,GAAoB,IAAMhB,GAAoB,EAAK,EAGzD,OAAIvC,EAAM,OAASgC,EAAyB,OAAO,WAAa,IAC9DhC,EAAQA,EAAM,WAAW,IAAK;AAAA,GAAO,EAAE,WAAW,IAAK;AAAA,EAAK,EAAE,WAAW,KAAM;AAAA,GAAO,MAItF,QAAC,OAAI,UAAWH,EAAO,eACnB,WAAAK,GAASF,OACT,QAAC,OAAI,UAAWH,EAAO,aACpB,UAAAK,GAASE,IAAmB,KAAe,UAC1C,OAACsB,EAAwB,CAAC,MAAAxB,EAAc,eAAAC,EAAgC,UAAAG,CAAA,CAAsB,EAE9FZ,MAGA,mBACE,mBAAC8D,EAAA,EAAO,CAAC,QAASxD,EAAO,YAAa,GAAO,KAAMsC,GACjD,gCACG,UAAAI,IAAmBF,IAAY,UAC9B,OAACiB,EAAA,EAAW,CAAC,UAAU,MAAM,iBAAkBb,GAAS,QACrD,SAAAd,CAAA,CACH,KAGF,OAAC,OACC,aAAW,MAAGjC,EAAO,MAAOQ,IAAYR,EAAO,aAAc,WAAW,WAAaA,EAAO,IAAI,EAChG,aAAcwD,GACd,aAAcE,GACd,QAAS,IAAMR,GAAgB/C,EAAO,OAAqB,EAC3D,IAAK4C,GAEJ,SAAA5C,CAAA,CACH,GACF,EACF,EACF,KAtBA,OAAC,OAAI,aAAW,MAAGH,EAAO,MAAOQ,IAAYR,EAAO,YAAY,EAAI,SAAAG,CAAA,CAAM,CAsB1E,EAEJ,KAGF,QAAC,OAAI,UAAWH,EAAO,aACpB,UAAAK,GAASE,IAAmB,KAAe,YAC1C,OAACsB,EAAA,CACC,MAAAxB,EACA,eAAAC,EACA,SAAUsB,EAAuB,QACjC,UAAAnB,CAAA,CACF,EAGAZ,MAKA,oBACG,UAAAgD,IAAmBF,IAAY,UAC9B,OAACiB,EAAA,EAAW,CAAC,UAAU,MAAM,iBAAkBZ,GAAS,QACrD,SAAAf,CAAA,CACH,KAGF,OAAC,OACC,aAAW,MAAGjC,EAAO,MAAOQ,GAAU,WAAW,WAAaR,EAAO,IAAI,EACzE,MAAOwC,GACP,QAAS,IAAMU,GAAgB9C,EAAQA,EAAM,SAAS,EAAI,GAAI,OAAqB,EACnF,IAAK4C,GAEJ,SAAA5C,CAAA,CACH,GACF,KAnBA,OAAC,OAAI,aAAW,MAAGJ,EAAO,MAAOQ,EAAQ,EAAG,MAAOgC,GAChD,SAAApC,CAAA,CACH,EAoBDC,GAASE,IAAmB,KAAe,aAC1C,OAACsB,EAAA,CACC,MAAAxB,EACA,eAAAC,EACA,SAAUsB,EAAuB,SACjC,UAAAnB,CAAA,CACF,GAEJ,GACF,CAEJ,EAEM,EAAY,CAACE,EAAsB0B,EAAiBC,KAAyB,CACjF,kBAAgB,OAAI,CAClB,QAAS,OACT,WAAY,QACZ,eAAgBD,EAChB,YAAAC,CACF,CAAC,EACD,SAAO,OAAI,CACT,MAAO3B,EAAM,OAAO,KAAK,UACzB,WAAY,IACZ,aAAc,WACd,SAAU,SACV,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,EACD,SAAO,OAAI,CACT,WAAY,IACZ,aAAc,WACd,SAAU,QACZ,CAAC,EACD,gBAAc,OAAI,CAChB,QAAS,OACT,WAAY,QACd,CAAC,EACD,gBAAc,OAAI,CAChB,WAAYA,EAAM,WAAW,eAC7B,MAAOA,EAAM,OAAO,KAAK,WAC3B,CAAC,EACD,QAAM,OAAI,CACR,OAAQ,SACV,CAAC,CACH,E,yECpOO,MAAMkD,EAAoB,CAAC,CAAE,SAAAjE,EAAU,UAAAkE,CAAU,IAAa,CACnE,MAAM9D,KAAS,MAAWC,CAAS,EAEnC,SAAO,OAAC,OAAI,aAAW,MAAGD,EAAO,QAAS8D,CAAS,EAAI,SAAAlE,CAAA,CAAS,CAClE,EAEMK,EAAaU,IAA0B,CAC3C,WAAS,OAAI,CACX,QAAS,OACT,cAAe,SACf,SAAUA,EAAM,WAAW,UAAU,QACvC,CAAC,CACH,E,uICDO,MAAMoD,EAAa,CACxBC,EACAC,EACAC,EACAC,EACA5C,EACA6C,IAEI,CAAC7C,GAAWA,EAAQ,SAAW,EAC1B,CAAC,EAGWA,EAAQ,IAAKV,GAAmB,CACnD,MAAMwD,KAAoC,MAAyBL,EAAOC,EAAOC,CAAe,EAC1FI,EAAmB,CACvB,GAAGJ,EACH,cAAeG,CACjB,EAEME,EAA6C,CAACnE,GAAOoE,GAAYC,KAC9DN,EAAiB/D,GAAO,CAAE,GAAGkE,EAAkB,GAAGE,EAAW,EAAGC,EAAM,EAI3EL,EAAO,gBAAkB,QAAa,CAAC,MAAMA,EAAO,aAAa,EACnEC,EAAY,MAAM,SAAWD,EAAO,cAEpCC,EAAY,MAAM,gBAAkBD,EAAO,gBAG7C,IAAIM,EAAkC,CAAE,MAAO,GAAI,QAAUC,IAAM,CAAC,CAAE,EAEtE,OAAAD,EAAc,CACZ,MAAOP,EAAiBtD,EAAO,OAAS,GAAIyD,CAAgB,EAC5D,QAAS,CAACM,GAAiBC,KAAkB,CAC3CC,EAAmBjE,EAAQ0D,CAAqB,CAClD,CACF,EAEOG,CACT,CAAC,EAEmB,OAAQ7D,GAAkC,CAAC,CAACA,CAAM,EAIlEiE,EAAqB,CAACjE,EAAgBsD,IAA0C,CACpF,GAAI,CACF,MAAMY,EAAM,IAAI,IAAIC,EAAOb,EAAiBtD,EAAO,MAAM,GAAG,CAAC,CAAC,EAExDoE,EAAyC,CAAC,EAEhD,IAAIC,EAA6B,CAC/B,IAAKH,EAAI,SAAS,EAClB,OAAQlE,EAAO,MAAM,OACrB,KAAMsE,EAAQtE,EAAQsD,CAAgB,EACtC,QAASc,CACX,EAEIpE,EAAO,MAAM,SACfA,EAAO,MAAM,QAAQ,QAAQ,CAAC,CAACuE,EAAMhF,CAAK,IAAM,CAC9C6E,EAAed,EAAiBiB,CAAI,CAAC,EAAIjB,EAAiB/D,CAAK,CACjE,CAAC,EAGCS,EAAO,MAAM,cACfA,EAAO,MAAM,aAAa,QAAQ,CAAC,CAACuE,EAAMhF,CAAK,IAAM,CACnD2E,EAAI,aAAa,OAAOZ,EAAiBiB,CAAI,EAAGjB,EAAiB/D,CAAK,CAAC,CACzE,CAAC,EAED8E,EAAQ,IAAMH,EAAI,SAAS,GAG7BE,EAAe,kBAAkB,EAAI,IACrCC,EAAQ,QAAUD,KAElB,MAAc,EACX,MAAMC,CAAO,EACb,UAAU,CACT,MAAQG,GAAU,CAChB,KAAU,KAAK,KAAU,WAAY,CAAC,+DAA+D,CAAC,EACtG,QAAQ,MAAMA,CAAK,CACrB,EACA,SAAU,IAAM,CACd,KAAU,KAAK,KAAU,aAAc,CAAC,yBAAyB,CAAC,CACpE,CACF,CAAC,CACL,OAASA,EAAO,CACd,KAAU,KAAK,KAAU,WAAY,CAAC,+DAA+D,CAAC,EACtG,QAAQ,MAAMA,CAAK,EACnB,MACF,CACF,EAIaC,EAAyB,CAACpE,EAAwB,CAAC,EAAGK,EAAoB,CAAC,KAC/E,CACL,KAAM,gBACN,KAAM,KAAU,OAChB,OAAQ,CAAE,MAAOL,EAAW,QAAAK,CAAiB,EAC7C,OAAQ,CAAC,CACX,GAIIyD,EAAUO,GAAqB,CAEnC,GADsBA,EAAS,WAAW,GAAG,EAC1B,CAEjB,MAAMC,EAAuB,KAAS,YAAYD,CAAQ,EAC1DA,KAAW,KAAkBC,EAAsB,CAAC,CAAC,CACvD,CAEA,OAAOD,CACT,EAGMJ,EAAU,CAACtE,EAAgBsD,IAA0C,CACzE,IAAIsB,EAA2B5E,EAAO,MAAM,KAAOsD,EAAiBtD,EAAO,MAAM,IAAI,EAAI,KACzF,OAAIA,EAAO,MAAM,SAAW,KAAkB,MAC5C4E,EAAO,QAGFA,CACT,C,iYCxHO,SAASC,EAAuBtB,EAA4BqB,EAAmB,CACpF,OAAOA,EAAK,CAAC,EAAE,OAAO,MAAM,CAAC,EAAE,KAAMxB,GAAU,CAASA,EAAM,OAAO,QAAQ,UAAU,MAAO,CAQhG,CAEO,MAAM0B,MAAiB,QAC5B,CAAC,CAAE,KAAAF,EAAM,UAAAG,EAAW,MAAAC,EAAO,YAAAC,EAAa,WAAAC,EAAY,GAAGC,CAAqB,IAA4B,CACtG,MAAMrF,KAAQ,MAAU,EAElBsF,GAAcR,EAAK,CAAC,EAAE,OAAO,CAAC,EAAE,OAChCS,EAAYD,GAAY,OAAO,KAE/BE,EAAkC,CAAC,EACzC,GAAID,IAAc,IAAiB,WAAY,CAC7C,MAAME,EAAuC,CAAE,KAAM,KAAe,SAAU,MAAO,CAAC,CAAE,EAClFC,EAAsC,CAAE,KAAM,KAAe,WAAY,MAAO,CAAC,CAAE,EAEzF,QAAS3F,GAAI,EAAGA,GAAI+E,EAAK,CAAC,EAAE,OAAO,OAAQ/E,KAAK,CAC9C,MAAMuD,GAAQwB,EAAK,CAAC,EAAE,OAAO/E,EAAC,EAE9B,GAAIuD,GAAM,OAAO,YAAcA,GAAM,OAAO,WAAW,MAAM,OAAS,EACpE,GAAIA,GAAM,OAAO,WAAW,OAAS,KAAe,SAClD,UAAWqC,KAAQrC,GAAM,OAAO,WAAW,SACpC,YAASmC,EAAmB,MAAOE,CAAI,GAC1CF,EAAmB,MAAM,KAAKE,CAAI,MAItC,WAAWA,KAAQrC,GAAM,OAAO,WAAW,SACpC,YAASoC,EAAkB,MAAOC,CAAI,GACzCD,EAAkB,MAAM,KAAKC,CAAI,CAK3C,CAEA,MAAMC,MAA0C,OAAkBN,GAAatF,EAAOyF,CAAkB,EAClGI,MAAyC,OAAkBP,GAAatF,EAAO0F,CAAiB,EACtGF,EAAe,KAAK,GAAGI,GAAwB,GAAGC,EAAqB,CACzE,CAEA,MAAMC,GAAgC,CAAC,EACvC,QAAS/F,EAAI,EAAGA,EAAI+E,EAAK,CAAC,EAAE,OAAO,OAAQ/E,IAAK,CAC9C,MAAMgG,EAAWjB,EAAK,CAAC,EAAE,OAAO/E,CAAC,EAAE,OAAO,SAC1C,GAAIgG,EACF,UAAWC,MAAWD,KACf,YAASD,GAAeE,EAAO,GAClCF,GAAc,KAAKE,EAAO,CAIlC,CACA,MAAMC,MAAqC,OAAqBH,GAAe9F,CAAK,EAE9EkG,GAAcpB,EAAK,CAAC,EAAE,OACzB,MAAM,CAAC,EACP,IAAI,CAACxB,EAAOvD,IAAM,CAEjB,MAAMoG,GAAapG,EAAI,EAIvB,GAAI,CAACuD,GAASA,EAAM,OAAO,QAAQ,UAAU,OAC3C,OAKF,MAAM9D,GAAQ8D,EAAM,OAAO,aAAeA,EAAM,KAE1C5D,MAAQ,OAAoB4D,EAAOtD,CAAK,EAAE,MAWhD,MAT4B,CAC1B,SAAUsD,EAAM,OAAO,UAAU,IACjC,MAAA5D,GACA,MAAAF,GACA,MAAO8D,EAAM,OAAO,QAAQ,gBAAkB,KAAc,MAAQ,EAAI,EACxE,iBAAkB,OAAM,MAAyB4B,EAAO5B,EAAOtD,CAAK,EACpE,WAAY,IAAM,GAAGR,EAAK,MAAkB2G,EAAU,EACxD,CAGF,CAAC,EACA,OAAQpG,GAA0BA,IAAM,MAAS,EAEpD,SACE,OAACqG,EAAA,GAAU,OAAV,CAAiB,UAAAnB,EAAuB,GAAGI,EAC1C,mBAACgB,GAAA,GACC,UAAApB,EACA,MAAOiB,GACP,eAAAV,EACA,aAAcS,GACd,YAAAd,EACA,OAAQE,EAAqB,OAC7B,SAAUA,EAAqB,SAC/B,WAAY,GACd,EACF,CAEJ,CACF,EAEAL,GAAe,YAAc,iB,0KCxH7B,MAAMsB,GAAY,MAAkB,SAK9BC,GAAa,KACbC,GAAW,KAEXC,GAAsB,EACtBC,GAAsB,GAEtBC,GAAsB,IAEtBC,GAAyB,GACzBC,GAAyB,IAEzBC,GAAsB,EACtBC,GAAsB,GAKtBC,GAAwB,GA0D9B,SAASC,GACPzE,EACA0E,EACAC,EACAC,EACAC,EACA,CAEA,MAAMC,KAAWC,EAAA,IAAY/E,EAAM,EAAE,EAE/BgF,EAAwBN,GAASI,EAAS,MAAQ,GAAM,GACxDG,GAAwBN,EAASC,EAGjCM,EAAc,KAAK,IAAID,GAAuBD,CAAoB,EACxE,MAAO,CACL,SAAU,KAAK,IAAIE,EAAaL,GAAWK,CAAW,EACtD,YAAaJ,CACf,CACF,CAKO,SAASK,GAAUC,EAAmB5H,EAAsB,CACjE,KAAM,CACJ,KAAA6H,EACA,KAAMC,EACN,SAAAC,EACA,SAAAC,EACA,YAAAC,EACA,iBAAAC,GACA,YAAAC,EAAc,EACd,UAAAC,EACA,SAAAC,GAAW,EACX,WAAAC,GAAa,GACb,SAAAC,GAAW,SACb,EAAIX,EACEY,EAAgBX,IAAS,KAAiB,WAC1CY,EAAmB,CAASb,EAAK,MAAM,UACvCc,GAAYd,EAAK,WAAa,KAAa,KAC3Ce,GAAaf,EAAK,WAAa,KAAa,QAElD,GAAI,CAAE,WAAAgB,GAAY,SAAAC,GAAU,UAAAC,EAAY,CAAE,EAAIlB,EAE1Cc,KACF,CAACE,GAAYC,EAAQ,EAAI,CAACA,GAAUD,EAAU,GAGhD,IAAIG,EAEJ,MAAMC,GAA8B,MADlB,EACiC,EAAE,KAAK,IAAI,EAC9D,IAAIC,GAGJ,MAAMC,GAAoCC,GAAM,MAAM,KAAKA,EAAE,KAAK,CAAC,EAAE,IAAI,CAACC,EAAGrJ,IAAMA,CAAC,CAAC,EAE/EsJ,GACJhB,KAAa,EACT,OACA,CAACc,EAAGG,IAAW,CAEb,MAAMC,EAAMJ,EAAE,KAAK,MACbK,EAAO1B,GAAOU,EAAgB,EAAI,IAExC,IAAIiB,EAAUH,EAAO,OACjBI,EAAUD,EAAU,EAEpBE,EAAU,EAEVC,GAASL,EAAM,KAAM,QACrBM,GAAW,KAAK,IAAI,KAAK,MAAMD,GAASvB,EAAQ,CAAC,EAErDsB,EAAUF,EAAUI,GAAW,EAAI,KAAK,KAAKJ,EAAUI,EAAQ,EAE/D,IAAIC,GAAUR,EAAO,IAAI,CAACF,GAAGrJ,KACV4J,IAAY,IAAMtB,GAAW,EAAItI,GAAI2J,EAAU3J,IAAK4J,EAAU,EAC3D,KAAOP,EAC5B,EAED,OAAOI,IAAS,EAAIM,GAAUA,GAAQ,QAAQ,CAChD,EAGAC,GAAuB,CAACZ,EAAGG,EAAQU,EAASC,EAAYC,IAAc,CAC1E,GAAItC,EAAK,UAAW,CAClB,IAAI9D,EAASwC,GAAU,KAEvB,OAAI4D,EAAY,KAAa,OAC3BpG,EAASwC,GAAU,YACV4D,EAAY,KAAa,OAClCpG,EAASwC,GAAU,OACV4D,EAAY,KAAa,KAClCpG,EAASwC,GAAU,OACV4D,EAAY,KAAa,IAClCpG,EAASwC,GAAU,KACV4D,EAAY,KAAa,MAClCpG,EAASwC,GAAU,IACV4D,EAAY,KAAa,KAClCpG,EAASwC,GAAU,MAEnBxC,EAASwC,GAAU,KAGdgD,EAAO,IAAKF,GAAOA,GAAK,KAAO,MAAK,OAAeA,EAAG,CAAE,OAAAtF,EAAQ,SAAAyE,EAAS,CAAC,CAAE,CACrF,CAEA,OAAOe,EAAO,IAAKF,GAAOZ,EAAgBN,GAAiB,EAAGkB,CAAC,EAAInB,EAAY,EAAGmB,CAAC,CAAE,CACvF,EAGMe,GAAsB,CAAChB,EAAGiB,EAAKC,IAAQ,CAC3CD,EAAM,EACNC,EAAM,KAAK,IAAI,EAAGlB,EAAE,KAAK,CAAC,EAAE,OAAS,CAAC,EAEtC,IAAImB,EAAY,KAGhBC,EAAA,IAAWpB,EAAE,KAAK,CAAC,EAAE,OAAQP,GAAYrC,GAAY,EAAG,CAACiE,EAAIC,EAAQC,KAAW,CAC9EJ,EAAYG,EAASC,GAAS,CAChC,CAAC,EAGD,IAAIC,EAAKN,EAAMD,EAEf,GAAIE,IAAc,GAChBF,GAAOO,MACF,CAEL,IAAIC,GADU,GAAK,EAAIN,EAAY,GACXK,EAAKA,GAAM,EAEnCP,GAAOQ,EACPP,GAAOO,CACT,CAEA,MAAO,CAACR,EAAKC,CAAG,CAClB,EAEA,IAAIQ,GAAW,CAACC,EAAoBC,IAAqB,CACvD,IAAIC,EAAM,MAAM,KAAK,CAAE,OAAQD,CAAS,EAAG,KAAO,CAChD,KAAM,MAAMD,CAAU,EAAE,KAAK,CAAC,EAC9B,KAAM,MAAMA,CAAU,EAAE,KAAK,CAAC,CAChC,EAAE,EAEF,SAAAP,EAAA,IAAWO,EAAYlC,GAAYrC,GAAY,KAAM,CAAC0E,EAAUC,EAAaC,IAAgB,IAC3FZ,EAAA,IAAWQ,EAAUlC,GAAUrC,GAAU,KAAM,CAAC4E,EAAQC,GAAWC,KAAc,CAC/EN,EAAII,CAAM,EAAE,KAAKH,CAAQ,EAAIC,EAAcC,EAAcE,GACzDL,EAAII,CAAM,EAAE,KAAKH,CAAQ,EAAIE,EAAcG,EAC7C,CAAC,CACH,CAAC,EAEMN,CACT,EAEIO,GAAW,CAACT,EAAoBC,IAAqB,CACvD,IAAIC,EAAM,MAAM,KAAK,CAAE,OAAQD,CAAS,EAAG,KAAO,CAChD,KAAM,MAAMD,CAAU,EAAE,KAAK,CAAC,EAC9B,KAAM,MAAMA,CAAU,EAAE,KAAK,CAAC,CAChC,EAAE,EAEF,SAAAP,EAAA,IAAWO,EAAYlC,GAAYrC,GAAY,KAAM,CAAC0E,EAAUC,EAAaC,IAAgB,IAC3FZ,EAAA,IAAWQ,EAAUlC,GAAUrC,GAAU,KAAM,CAAC4E,EAAQC,GAAWC,KAAc,CAC/EN,EAAII,CAAM,EAAE,KAAKH,CAAQ,EAAIC,EAC7BF,EAAII,CAAM,EAAE,KAAKH,CAAQ,EAAIE,CAC/B,CAAC,CACH,CAAC,EAEMH,CACT,EAEA,MAAMQ,GAAsBhD,EAAgB5B,GAAyBC,GAC/D4E,GAAmBjD,EAAgB1B,GAAsBC,GAE/D,IAAI2E,GAAkE,CAAC,EACnEC,EAAyF,CAAC,EAC1FC,EAAc,EACdC,EACAC,EAAWlE,EAAK,MAAM,WAAalB,GACnCqF,GAAcN,GAGdO,GAAS,IACTC,GAAS,IAETC,GAAkBlE,GAAY,KAE9BmE,GAAkBD,GAClB,CACE,KAAM,CACJ,KAAM,EACN,OAAQ,CAAC/C,EAAUiD,IAAsBT,EAAWS,CAAS,EAAG,IAClE,EACA,OAAQ,CACN,KAAM,EACN,OAAQ,CAACjD,EAAUiD,IAAsBT,EAAWS,CAAS,EAAG,MAClE,CACF,EACA,CAAC,EAEDC,GAAc,KAAM,MAAM,KAAM,CAClC,OAAQ1D,GACJ,EACCD,GAEC,CAACS,EAAUiD,IACaA,IAAcjD,EAAE,KAAK,OAAS,EAC3B,CAACL,EAAW,CAAC,EAAI,CAAC,EAAG,CAAC,EAHjDA,EAKN,KAAM,CACJ,GAAI,CACF,KAAM,EACN,OAAQ,CAACK,EAAGiD,IAAcV,GAAcU,CAAS,EAAG,IACtD,EACA,KAAM,CACJ,KAAM,EACN,OAAQ,CAACjD,EAAGiD,IAAcV,GAAcU,CAAS,EAAG,IACtD,EACA,GAAGD,EACL,EAEA,KAAM,CAAChD,EAAGiD,EAAWE,EAASC,EAAKC,EAAKC,EAAKC,IAAQ,CAGnDH,GAAOpD,EAAE,KAAK,KACdqD,GAAOrD,EAAE,KAAK,IAEd,IAAIwD,GAAMxD,EAAE,KAAKiD,CAAS,EAAEE,CAAO,EAE/B9D,GACFwD,GAAS,KAAK,IAAIA,GAAQW,GAAM,EAAIxD,EAAE,KAAK,QAAUqD,EAAME,GAAOF,CAAG,EACrEP,GAASQ,IAETT,GAASU,EACTT,GAAS,KAAK,IAAIA,GAAQU,GAAM,EAAIJ,EAAMpD,EAAE,KAAK,OAASoD,EAAME,EAAI,GAGtE,IAAIG,GAAU,CAAE,EAAGL,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,KAAMN,EAAW,KAAME,CAAQ,EAc/E,GAZI,CAAC5D,IAAad,EAAK,gBACjBA,EAAK,OAAS,KAAiB,YACjCgF,GAAQ,EAAI,EACZA,GAAQ,EAAIzD,EAAE,KAAK,SAEnByD,GAAQ,EAAI,EACZA,GAAQ,EAAIzD,EAAE,KAAK,QAIvBJ,EAAG,IAAI6D,EAAO,EAEVxE,IAAc,KAAe,MAAO,CACtC,MAAMyE,GAAM9E,EAASqE,EAAWE,CAAO,EACvC,IAAIQ,GAAU,EAEVnE,IAAcoE,GAAeX,CAAS,EAAEE,CAAO,IACjDQ,GAAUC,GAAeX,CAAS,EAAEE,CAAO,GAG7C,MAAMlD,GAAI0D,KAAY,EAAI,EAAID,GAAMC,GAE9BtK,GAAOyF,EAAYmE,EAAWhD,EAAC,EASrC,GARA2C,GAAc,KAAK,IAAIA,GAAa,KAAK,MAAMP,IAAuBhD,EAAgBiE,EAAMC,EAAI,CAAC,EAE7Fb,EAAOS,CAAO,IAAM,SACtBT,EAAOS,CAAO,EAAI,CAAC,GAErBT,EAAOS,CAAO,EAAEF,CAAS,EAAI,CAAE,KAAA5J,GAAY,MAAOuF,EAASqE,EAAWE,CAAO,EAAG,OAAQ,EAAM,EAG1F7D,EAAkB,CACpB,KAAM,CAAE,SAAUuE,GAAgB,YAAAC,EAAY,EAAIhG,GAChD4E,EAAOS,CAAO,EAAEF,CAAS,EAAE,KAC3BH,IAAUzD,EAAgB7B,GAAsB,IAAM6B,EAAgB,EAAIuD,IAC1EC,IAAUxD,EAAgB,EAAI7B,KAAwB6B,EAAgBuD,GAAc,GACpF,CACF,EAGAF,EAAOS,CAAO,EAAEF,CAAS,EAAE,YAAca,GAGzC,IAAIC,GAAe,KAAK,MAAM,KAAK,IAAIpB,EAAUpF,GAAqBsG,EAAc,CAAC,EAKrFpB,EAAesB,GAAepB,GAAaoB,GAAe,IAG1DpB,EAAWoB,EACb,MACErB,EAAOS,CAAO,EAAEF,CAAS,EAAE,eAAc7E,EAAA,IAAYsE,EAAOS,CAAO,EAAEF,CAAS,EAAE,KAAMN,CAAQ,EAGhG,IAAIqB,GAAc3E,EAAgB,EAAI,CAAC,KAAK,MAAMxB,GAAwB8E,CAAQ,EAC9ErM,GAAQsI,EAASqE,EAAWE,CAAO,EAMvC,GAJI1E,EAAK,OAAOwE,CAAS,GAAK3M,IAAS,OACrCA,IAAS,IAGPA,IAAS,KAAM,CAEjB,MAAM2N,GACJjE,EAAE,KAAK,MAAQX,EAAgB+D,EAAME,EAAM,EAAIhN,GAAQ,EAAI8M,EAAMR,GAAcQ,EAAME,EAAMV,IAC7F,IAAIsB,GACFlE,EAAE,KAAK,KACNX,EAAiB/I,GAAQ,EAAI+M,EAAME,EAAMX,GAAcS,EAAMT,GAAeS,EAAME,EAAM,EAAIS,IAK/F,KAAM,CACJ,YAAAF,GAAc,CACZ,MAAO,EACP,wBAAyB,EACzB,yBAA0B,CAC5B,CACF,EAAIpB,EAAOS,CAAO,EAAEF,CAAS,EAI7B,IAAIkB,GAAU,EACZC,GAAU,EAER/E,GAEF8E,GAAWL,GAAY,MAAQrB,EAAe,EAG9C2B,GACE9N,GAAQ,GACHwN,GAAY,wBAA0BA,GAAY,0BAA4BrB,EAC/E,IAGN2B,IAAYN,GAAY,wBAA0BA,GAAY,0BAA4BrB,EAAe,EAGzG0B,GAAU7N,GAAQ,EAAIwN,GAAY,MAAQrB,EAAc,GAItDyB,GAAIE,GAAU,IAChBF,GAAIE,IAIN1B,EAAOS,CAAO,EAAEF,CAAS,EAAE,EAAIgB,GAC/BvB,EAAOS,CAAO,EAAEF,CAAS,EAAE,EAAIiB,GAC/BxB,EAAOS,CAAO,EAAEF,CAAS,EAAE,KAAO,CAChC,EAAGgB,GAAIE,GACP,EAAGD,GAAIE,GACP,EAAGN,GAAY,MAAQrB,EACvB,GAAIqB,GAAY,wBAA0BA,GAAY,0BAA4BrB,CACpF,CACF,CACF,CACF,CACF,CAAC,EAED,MAAM4B,GAAQrE,GAAa,CACzBA,EAAE,KAAK,iBAAiC,cAAc,EAAE,QAASsE,GAAO,CACtEA,EAAG,MAAM,aAAe,IAEpB7F,EAAK,gBACP6F,EAAG,MAAM,OAAS,KAEtB,CAAC,CACH,EAEMC,GAAuB,CAC3B,EAAG,GACH,EAAG,GACH,KAAM,CACJ,EAAG,GACH,EAAG,EACL,EACA,QAAS,CAACvE,EAAGiD,IAAc,CACzB,GAAIA,IAAc,EAAG,CACnBpD,GAAQ,KAAK,IAAI,EACjBC,GAAQ,KAER,IAAI0E,EAAKxE,EAAE,OAAO,KAAQ,KAAM,QAC5ByE,EAAKzE,EAAE,OAAO,IAAO,KAAM,QAE/BJ,EAAG,IAAI4E,EAAIC,EAAI,EAAG,EAAIC,GAAM,IACtB,OAAYF,EAAIC,EAAIC,EAAE,EAAGA,EAAE,EAAGA,EAAE,EAAIA,EAAE,EAAGA,EAAE,EAAIA,EAAE,CAAC,IACpD5E,GAAQD,GAAQ,CAAC,EAAI6E,EACrB7E,GAAQC,GAAM,IAAI,EAAIA,GAEtBX,OACE,OAAUS,EAAI,OAAWE,GAAM,IAAI,EAAE,QAAS6E,GAAM,CAClD9E,GAAQ8E,EAAE,IAAI,EAAIA,CACpB,CAAC,EAEP,CAAC,CACH,CAEA,OAAO9E,GAAQoD,CAAS,GAAG,IAC7B,EACA,OAAQ,CACN,KAAM,wBACN,KAAM,CAACjD,EAAGiD,IAAc,CACtB,IAAI2B,EAAS/E,GAAQoD,CAAS,EAC1B4B,EAAYD,GAAU,KAE1B,MAAO,CACL,KAAMC,EAAYD,EAAQ,EAAI,KAAM,QAAU,IAC9C,IAAKC,EAAYD,EAAQ,EAAI,KAAM,QAAU,IAC7C,MAAOC,EAAYD,EAAQ,EAAI,KAAM,QAAU,EAC/C,OAAQC,EAAYD,EAAQ,EAAI,KAAM,QAAU,CAClD,CACF,CACF,EACA,MAAO,CACL,KAAM,IACN,KAAM,CAAC5E,EAAGiD,IAAenD,IAAO,OAASmD,EAAY,EAAI,GAC3D,CACF,EAGM6B,GAAa9E,GAAa,CAgB9B,GAfAJ,EAAKA,GAAM,IAAI,MAAS,EAAG,EAAGI,EAAE,KAAK,MAAOA,EAAE,KAAK,MAAM,EACzDJ,EAAG,MAAM,EAGTI,EAAE,OAAO,QAAS+E,GAAM,CAEtBA,EAAE,OAAS,IACb,CAAC,EAEGxF,GACFgD,GAAgB,CAAC,KAAM,GAAGH,GAASpC,EAAE,KAAK,CAAC,EAAE,OAAQA,EAAE,KAAK,OAAS,CAAC,CAAC,EAEvEuC,GAAgB,CAAC,KAAM,GAAGb,GAAS1B,EAAE,KAAK,CAAC,EAAE,OAAQA,EAAE,KAAK,OAAS,CAAC,CAAC,EAGrE+C,GAAiB,CACnBP,EAAa,CAAC,IAAI,EAGlB,QAAS5L,EAAI,EAAGA,EAAIoJ,EAAE,KAAK,OAAQpJ,IAAK,CACtC,IAAIoO,EAAUhF,EAAE,KAAKpJ,CAAC,EAA2B,IAAI,CAACN,EAAO2O,IACvD3O,GAAS,KACJuI,EAAUjI,EAAGqO,EAAU3O,CAAK,EAG9B,IACR,EAEDkM,EAAW,KAAK,CACd,KAAMxD,EAAc,EAAIgG,EAAO,IAAKE,GAAOA,GAAK,QAAO,OAAMA,EAAGlG,CAAW,EAAI,IAAK,EAAIgG,EACxF,OAAQA,CACV,CAAC,CACH,CACF,CAEAtC,EAAS,CAAC,EACVC,EAAWlE,EAAK,MAAM,WAAalB,GACnCqF,GAAcN,GACdO,GAASC,GAAS,GACpB,EAGMqC,GAAQnF,GAAa,CACzB,GAAIf,IAAc,KAAe,OAAS0D,EAAWrF,GACnD,OAGF0C,EAAE,IAAI,KAAK,EACXA,EAAE,IAAI,UAAYnJ,EAAM,OAAO,KAAK,QACpCmJ,EAAE,IAAI,KAAO,GAAG2C,CAAQ,MAAM9L,EAAM,WAAW,UAAU,GAEzD,IAAIuO,EACFC,EAEF,UAAWC,KAAQ5C,EAAQ,CAEzB,IAAI6C,EAAQ,GAEZ,UAAWC,KAAQ9C,EAAO4C,CAAI,EAAG,CAC/B,MAAMjP,EAAQqM,EAAO4C,CAAI,EAAEE,CAAI,EACzB,CAAE,KAAAnM,GAAM,EAAA4K,GAAI,EAAG,EAAAC,GAAI,CAAE,EAAI7N,EAC/B,GAAI,CAAE,MAAAC,EAAM,EAAID,EAEZoI,EAAK,OAAO+G,CAAI,GAAKlP,IAAS,OAChCA,IAAS,IAGX,IAAImP,GAAyBpG,EAAgB,SAAW/I,KAAU,MAAQA,GAAQ,EAAI,QAAU,OAC5FoP,GAA+BrG,EAC/B/I,KAAU,MAAQA,GAAQ,EACxB,MACA,aACF,SAUJ,GARImP,KAAUL,IACZpF,EAAE,IAAI,UAAYoF,EAAWK,IAG3BC,KAAaL,IACfrF,EAAE,IAAI,aAAeqF,EAAcK,IAGjCzG,IAAc,KAAe,OAC/Be,EAAE,IAAI,SAAS3G,GAAM4K,GAAGC,EAAC,UAChBjF,IAAc,KAAe,KAAM,CAC5C,GAAI,CAAE,KAAA0G,EAAK,EAAItP,EAEXuP,GAAkB,GAEtB,GAAID,IAAQ,KACVC,GAAkB,GAClBvP,EAAM,OAAS,WACN,CAACkP,EAEV,UAAWM,MAAWnD,EAAO4C,CAAI,EAAG,CAClC,GAAIO,KAAYL,EACd,SAGF,MAAMM,GAASpD,EAAO4C,CAAI,EAAEO,EAAO,EAC7B,CAAE,KAAME,GAAO,OAAAC,EAAO,EAAIF,GAEhC,GAAI,CAACE,IAAUD,OAAS,OAAWJ,GAAMI,EAAK,EAAG,CAC/CH,GAAkB,GAClBvP,EAAM,OAAS,GACf,KACF,CACF,CAGFkP,EAAQ,GAER,CAACK,IAAmB5F,EAAE,IAAI,SAAS3G,GAAM4K,GAAGC,EAAC,CAC/C,CACF,CACF,CAEAlE,EAAE,IAAI,QAAQ,CAChB,EAEA,IAAI4D,GAAoC,KAExC,SAASqC,GAASC,EAAqBC,EAAiC,CACtE,OAAAvC,GAAgB,QACT,MAAiBsC,EAAO,CAAC,EAAGC,EAAgB,CAAC,CAAE,OAAAC,CAAO,IAAM,CACjExC,GAAgBwC,CAClB,CAAC,CACH,CAEA,MAAO,CACL,OAAA7B,GAEA,OAAAvD,GACA,QAAAJ,GACA,QAAAb,GACA,QAAAG,GAEA,YAAAgD,GAGA,KAAAmB,GACA,UAAAS,GACA,KAAAK,GACA,SAAAc,EACF,CACF,CCvlBO,MAAMI,GAAmC,CAC9C,UAAW,EACX,SAAU,IACV,cAAe,GACf,WAAY,GACZ,YAAa,KAAsB,KACnC,UAAW,KAAsB,KACjC,SAAU,KAAoB,KAC9B,mBAAoB,EACpB,kBAAmB,CACrB,EAsBaC,GAA2C,CACtD,YAAa,GACb,aAAc,KAAyB,KACvC,UAAW,CACb,EClDO,SAASC,GACdL,EACA/J,EACAqK,EACA3P,EACA4P,EACAC,EACW,CACX,GAAIR,EAAO,SAAW,GAAKA,EAAO,MAAOS,GAAOA,EAAG,SAAW,CAAC,EAC7D,MAAO,CAAE,OAAQ,CAAC,EAAG,MAAO,CAAC,EAAG,KAAM,qBAAsB,KAG9D,OAAuBT,CAAM,KAC7B,OAAsBA,EAAQ/J,CAAW,EAEzC,IAAIjC,EAA+B,CAAE,GAAGgM,EAAO,CAAC,CAAE,EAIlD,MAAMU,GAAe1M,EAAM,OAAO,UAAW2M,GAAMA,EAAE,OAAS,KAAU,IAAI,EAExED,IAAgB,GAAKV,EAAO,OAAS,IACvChM,KAAQ,OAAoB,CAAE,OAAAgM,EAAQ,iBAAkB,EAAK,CAAC,GAAKhM,GAGrE,MAAM4M,EAEJ5M,EAAM,OAAO,KAAMC,GAAUA,EAAM,OAAO,cAAgBsM,GAActM,EAAM,OAASsM,CAAU,GACjGvM,EAAM,OAAO,KAAMC,GAAUA,EAAM,OAAS,KAAU,MAAM,GAC5DD,EAAM,OAAO0M,EAAY,EAE3B,GAAIE,GAAU,KAAM,CAClB,MAAMC,EAAkB,CAACD,CAAM,EACzBE,GAAiB,CAAC,EAElB/K,GACJyK,GAAkB,KACd,OACAxM,EAAM,OAAO,KAEVC,GAAUA,EAAM,OAAO,cAAgBuM,GAAkBvM,EAAM,OAASuM,CAC3E,EAENxM,EAAM,OAAO,QAASC,GAAU,CAC9B,GAAIA,IAAU2M,EACZ,GAAI3M,EAAM,OAAS,KAAU,QAAU,CAACA,EAAM,OAAO,QAAQ,UAAU,IAAK,CAC1E,MAAM8M,GAAS,CACb,GAAG9M,EACH,OAAQA,EAAM,OAAO,IAAK8F,IAAO,OAAO,SAASA,EAAC,EAAIA,GAAI,IAAK,EAE/D,OAAQ,CACN,GAAG9F,EAAM,OACT,OAAQ,CACN,GAAGA,EAAM,OAAO,OAChB,SAAU,CACR,MAAO,IACP,KAAMqM,CACR,CACF,CACF,CACF,EAEAO,EAAO,KAAKE,EAAM,CACpB,MACED,GAAM,KAAK7M,CAAK,CAGtB,CAAC,EAED,IAAI+M,GAAsB,KAEtBH,EAAO,SAAW,IACpBG,GAAO,2BAGThN,EAAM,OAAS6M,EAEf,MAAMI,EAAS,CAACjN,CAAK,EAErB,gBAAsBiN,EAAQtQ,EAAO,CAAC,EAE/B,CACL,OAAAsQ,EACA,MAAAH,GACA,MAAO/K,GACP,KAAAiL,EACF,CACF,CAEA,MAAO,CACL,OAAQ,CAAC,EACT,MAAO,CAAC,EACR,MAAO,KACP,KAAM,4CACR,CACF,CAYO,MAAME,GAAa,CAAC,CAAE,OAAAD,EAAQ,YAAAE,EAAa,MAAA9Q,EAAO,YAAA+Q,EAAa,QAAAC,EAAS,SAAAnI,EAAU,MAAAvI,CAAM,IAAsB,CACnH,GAAI,CACF,UAAAoI,GACA,WAAAQ,EACA,SAAAC,EACA,UAAAC,GAAY,EACZ,SAAA6G,GACA,KAAAnN,GACA,QAAAmO,EACA,mBAAAC,EACA,oBAAAC,GACA,kBAAAC,GAAoB,EACpB,OAAAC,GACA,cAAAC,EACF,EAAIN,EAEArN,EAAQiN,EAAO,CAAC,EAEpB,MAAMW,EAAU,IAAIC,GAAA,EAEdC,GAAa9N,EAAM,OAAO,IAAI,CAAC2M,EAAGjQ,IAClC4P,KAAa,KAAa,WACrB,MAAoB,CACzB,MAAO,CACL,GAAGK,EACH,OAAQ,CACN,GAAGA,EAAE,OACL,KAAM,aACR,CACF,EACA,MAAAhQ,CACF,CAAC,EAGIgQ,EAAE,OACV,EAEK/H,GAAc,CAACmE,EAAmB3M,OAC/B,OAAuB0R,GAAW/E,CAAS,EAAE3M,CAAK,CAAC,EAGtDyI,GAAmB,CAACkE,EAAmB3M,IACpC2R,GAAanJ,GAAYmE,EAAW3M,CAAK,EAAGoR,EAAmB,EAIlEQ,GAAiBC,GAAoBb,CAAW,EAGlDpN,EAAM,OAAO,SAAW,GAAKsM,KAAa,KAAa,OACrDa,IAAgB,IAClB5H,EAAaC,GAGfA,EAAW,GAGb,MAAMd,GAAW,CAACqE,EAAmBgC,IAC5B/K,EAAM,OAAO+I,CAAS,EAAE,OAAOgC,CAAQ,EAIhD,IAAIpG,GAEAG,GAAc,EAElB,GAAIzI,GAAS,KAAM,CACjB,MAAM6R,EAAO7R,EAAM,QACnByI,IAAezI,EAAM,OAAO,OAAO,aAAe,KAAO,IAEzDsI,GAAW,CAACoE,EAAmBgC,IAAqBmD,EAAK7R,EAAO,OAAO0O,CAAQ,CAAC,EAAE,KACpF,MACyB/K,EAAM,OAAO,KAAM2M,GACjBA,EAAE,OAAO,OAAO,OAAS,MAAiB,YAI/DA,EAAE,OAAO,UAAU,KAAMwB,GAEnBA,EAAE,OAAS,QAEN,OAAO,OAAOA,EAAE,OAAO,EAAE,KAAMC,IAAWA,GAAO,OAAS,IAAI,EAEhED,EAAE,QAAQ,OAAO,OAAS,IAClC,CAEJ,IAMCrJ,IAFmB9E,EAAM,OAAO,KAAM,GAAM,EAAE,OAAS,KAAU,MAAM,EAE3C,OAAO,OAAO,aAAe,KAAO,IAEhE2E,GAAW,CAACoE,EAAmBgC,IAAqB,CAClD,IAAI9K,GAAQD,EAAM,OAAO+I,CAAS,EAClC,OAAO9I,GAAM,QAASA,GAAM,OAAO8K,CAAQ,CAAC,EAAE,KAChD,GAIJ,MAAMxG,GAAoB,CACxB,KAAMyJ,GAAe,KACrB,KAAMA,GAAe,KACrB,WAAAzI,EACA,SAAAC,EACA,UAAAC,GACA,SAAA6G,GACA,SAAA5H,GACA,SAAAC,GACA,YAAAG,GACA,YAAAF,GACA,iBAAAC,GACA,SAAAK,EACA,KAAA/F,GACA,UAAA4F,GACA,OAAA2I,GACA,SAAUD,GACV,UAAWzN,EAAM,OAAO,CAAC,GAAG,OAAS,KAAU,MAAQ,CAACA,EAAM,OAAO,CAAC,EAAE,OAAO,MAAM,WAAW,OAAO,EACvG,KAAMA,EAAM,OAAO,IAAK2M,GAAMA,EAAE,OAAO,QAAQ,YAAc,KAAe,SAAS,EACrF,cAAAgB,GACA,WAAYL,EAAQ,OAAS,KAAmB,KAClD,EAEMlN,GAASkE,GAAUC,GAAM5H,CAAK,EAQpC,GANAiR,EAAQ,UAAUxN,GAAO,MAAM,EAE/BwN,EAAQ,QAAQ,OAAQxN,GAAO,IAAI,EACnCwN,EAAQ,QAAQ,YAAaxN,GAAO,SAAS,EAC7CwN,EAAQ,QAAQ,OAAQxN,GAAO,IAAI,EAE/BmN,IAAuB,EAAG,CAG5B,IAAIc,EAAW,GACXC,EAAWN,GAAe,OAAS,KAAiB,WAAa,GAAK,EAE1EJ,EAAQ,WAAWW,GAAmBvO,EAAOuN,EAAoBC,GAAqBa,EAAUC,CAAQ,CAAC,CAC3G,CAEAV,EAAQ,YAAYxN,GAAO,QAAQ,EAEnCwN,EAAQ,SAAS,CACf,SAAU,IACV,OAAQ,GACR,MAAOxN,GAAO,OACd,aAAc,KAAkB,QAChC,YAAa4N,GAAe,KAC5B,UAAWA,GAAe,IAC5B,CAAC,EAED,MAAMQ,GACJxO,EAAM,OAAO,CAAC,GAAG,OAAO,QAAQ,gBAAkB,KAAc,OAC5DgO,GAAe,OAAS,KAAiB,WACvC,KAAc,OACd,KAAc,KAChB,KAAc,OACdS,GAAiBzO,EAAM,OAAO,CAAC,GAAG,OAAO,QAAQ,gBAAkB,KAAc,OAEvF4N,EAAQ,QAAQ,CACd,SAAU,IACV,OAAQ,GACR,UAAWY,GACX,MAAOxO,EAAM,OAAO,CAAC,GAAG,OAAO,QAAQ,UACvC,OAAQI,GAAO,QACf,OAAQ4N,GAAe,OAAS,EAAI5N,GAAO,QAAU,OACrD,OAAQA,GAAO,QACf,SAAA8E,EACA,KAAM,CAAE,KAAM,EAAM,EACpB,MAAO,CAAE,KAAM,EAAM,EACrB,IAAK,GACL,kBAAmB8I,GAAe,OAAS,EAAIT,EAAqB,GAAK,EACzE,MAAA5Q,EACA,KAAM8R,EACR,CAAC,EAMD,QAAS/R,EAAI,EAAGA,EAAIsD,EAAM,OAAO,OAAQtD,IAAK,CAC5C,MAAMuD,EAAQD,EAAM,OAAOtD,CAAC,EAItBgS,EAA4B,CAAE,GAAGtC,GAAoB,GAAGnM,EAAM,OAAO,MAAO,EAE5E0O,EAAW1O,EAAM,OAAO,MAAQ,KAChCiC,MAAY,OAA0BjC,CAAK,EAE3C2O,MADa,OAAoB3O,EAAOtD,CAAK,EACpB,MAG/B,IAAIkS,GAAUH,EAAa,YACvBI,GAAUJ,EAAa,YAsE3B,GApEIG,IAAW,MAAQ5O,EAAM,OAAO,KAAO,OACzC4O,GAAU,GAGRC,IAAW,MAAQ7O,EAAM,OAAO,KAAO,OACzC6O,GAAU,GAIRJ,EAAa,iBAAmBzO,EAAM,OAAO,aACtByO,EAAa,gBAAgB,MAAQ,KAAyB,OAC9D,KAAyB,KAChDd,EAAQ,cAAc,CACpB,OAAQc,EAAa,gBACrB,WAAYzO,EAAM,OAAO,WACzB,SAAA0O,EACA,MAAAhS,EACA,QAASsD,EAAM,OAAO,IACtB,QAASA,EAAM,OAAO,IACtB,QAASyO,EAAa,YACtB,QAASA,EAAa,WACxB,CAAC,EAILd,EAAQ,UAAU,CAChB,SAAAe,EACA,QAAS,GACT,UAAWD,EAAa,UACxB,UAAWE,GACX,YAAaF,EAAa,YAC1B,MAAA/R,EACA,UAAAuF,GACA,YAAa9B,GAAO,YACpB,KAAM,CAACsO,EAAa,UAAU,IAC9B,aAAcA,EAAa,aAC3B,WAAYzO,EAAM,OAAO,WACzB,QAASA,EAAM,OAAO,IACtB,QAASA,EAAM,OAAO,IACtB,QAASyO,EAAa,YACtB,QAASA,EAAa,WAYxB,CAAC,EAGDd,EAAQ,SAAS,CACf,SAAAe,EACA,IAAK1O,EAAM,OAAO,IAClB,IAAKA,EAAM,OAAO,IAClB,QAAA4O,GACA,QAAAC,GACA,aAAcJ,EAAa,iBAC3B,YAAaV,GAAe,KAC5B,UAAWA,GAAe,KAC1B,aAAcU,EAAa,mBAAmB,KAC9C,IAAKA,EAAa,mBAAmB,GACvC,CAAC,EAEGA,EAAa,gBAAkB,KAAc,OAAQ,CACvD,IAAI9M,GAAY8M,EAAa,eACzB,CAAC9M,IAAaA,KAAc,KAAc,QAC5CA,GAAY,KAAc,MAExBoM,GAAe,OAAS,IACtBpM,KAAc,KAAc,OAC9BA,GAAY,KAAc,QAExBA,KAAc,KAAc,QAC9BA,GAAY,KAAc,MAI9B,IAAImN,GAAsB,CACxB,SAAAJ,EACA,MAAOD,EAAa,UACpB,KAAMA,EAAa,UACnB,UAAA9M,GACA,YAAa,CAACmE,GAAGiJ,QAAa,OAAuB/O,EAAM,QAAS8F,GAAGiJ,EAAQ,CAAC,EAChF,OAAQhB,GAAe,OAAS,EAAI5N,GAAO,QAAU,OACrD,kBAAmB4N,GAAe,OAAS,EAAIT,EAAqB,GAAK,EACzE,MAAA5Q,EACA,KAAM,CAAE,KAAM+R,EAAa,YAAa,CAC1C,EAEIA,EAAa,iBACfK,GAAS,OAAS,CAChB,KAAM,EACR,GAGEL,EAAa,gBAAkB,KAAc,SAC/CK,GAAS,MAAQH,IAGnBhB,EAAQ,QAAQmB,EAAQ,CAC1B,CACF,CAEA,IAAI9C,MAAiB,MAAkBjM,CAAK,EAE5C,OAAA4N,EAAQ,kBAAkB3B,EAAc,EAEjC,CACL,QAAA2B,EACA,SAAU,CAACqB,EAAsBC,KAC/BjC,EAASgC,EACTjP,EAAQiN,EAAO,CAAC,EAChB5Q,EAAQ6S,EAEDtB,EAAQ,SAAUX,CAAM,EAEnC,CACF,EAEA,SAASc,GAAa3R,EAAe+S,EAAgB,CACnD,OAAI/S,EAAM,OAAS+S,EACV/S,EAAM,UAAU,EAAG+S,CAAM,EAAE,OAAO,KAAK,EAEvC/S,CAEX,CAEA,SAASmS,GACPvO,EACAoP,EACAC,EACAhB,EAAW,EACXC,EAAW,EACF,CACT,MAAMgB,EAAStP,EAAM,OAAO,CAAC,EAAE,OACzByI,EAAW,KACX8G,GAAmBvP,EAAM,OAAO,CAAC,EAAE,QACnCwP,EAAqB9S,GAClB6S,GAAmBA,GAAiBD,EAAO5S,CAAC,CAAC,EAAI4S,EAAO5S,CAAC,EAElE,IAAI+S,EAAY,EAChB,QAAS/S,EAAI,EAAGA,EAAI4S,EAAO,OAAQ5S,IAAK,CACtC,IAAIgT,KAAOxL,EAAA,IAAY6J,MAAa,OAAuByB,EAAkB9S,CAAC,CAAC,EAAG2S,CAAc,EAAG5G,CAAQ,EAC3GgH,EAAYC,EAAK,MAAQD,EAAYC,EAAK,MAAQD,CACpD,CAGA,MAAME,GACJP,EAAc,EACV,KAAK,IAAKA,EAAc,KAAK,GAAM,GAAG,KACtClL,EAAA,IACE6J,MAAa,OAAuByB,EAAkBF,EAAO,OAAS,CAAC,CAAC,EAAGD,CAAc,EACzF5G,CACF,EAAE,MACF,EAGAmH,GACJR,EAAc,EACV,KAAK,IAAKA,EAAc,GAAK,KAAK,GAAM,GAAG,KAC3ClL,EAAA,IAAY6J,MAAa,OAAuByB,EAAkB,CAAC,CAAC,EAAGH,CAAc,EAAG5G,CAAQ,EAAE,MAClG,EAGAoH,GACJ,KAAK,KAAMT,GAAe,EAAIA,EAAcA,EAAc,IAAM,KAAK,GAAM,GAAG,EAAIK,EAAYnB,EAEhG,MAAO,CACL,KAAK,MAAM,KAAuB,KAAM,OAAO,EAC/CqB,GACAE,GACA,KAAK,IAAI,EAAGD,GAAcvB,CAAQ,CACpC,CACF,CAEA,SAASJ,GAAoBb,EAA6B,CACxD,OAAIA,IAAgB,KAAe,SAC1B,CACL,KAAM,KAAiB,WACvB,KAAM,KAAe,MACrB,KAAM,KAAiB,SACvB,KAAM,KAAe,EACvB,EAGK,CACL,KAAM,KAAiB,SACvB,KAAM,KAAe,KACrB,KAAM,KAAiB,WACvB,KAAM,KAAe,KACvB,CACF,CCjhBA,MAAM0C,MAAY5L,EAAA,IAAY,IAAK,IAAoB,EAAE,MACnD6L,GAAS,KAAK,GAAK,IAEZC,GAAiBC,GAA+B,CAC3D,KAAM,CAAE,KAAAxO,EAAM,QAAA4L,EAAS,YAAApL,EAAa,MAAA4B,EAAO,OAAAC,EAAQ,SAAAoB,EAAU,GAAAgL,GAAI,iBAAA/P,CAAiB,EAAI8P,EAKhFtT,KAAQ,MAAU,EAElB,CACJ,SAAA6I,GACA,UAAAC,GAAY,EACZ,UAAAV,GACA,WAAAQ,EACA,SAAA+G,EACA,OAAAoB,GACA,QAAAJ,GACA,KAAAnO,GACA,mBAAAoO,GACA,kBAAAE,EACA,cAAAE,EACA,OAAAf,GACA,aAAAuD,EACF,EAAI9C,EAGJ,GAAI,CAAE,YAAAD,GAAa,oBAAAI,GAAsB,CAAE,EAAIH,EAE/CD,GACEA,KAAgB,KAAe,KAC3BvJ,EAAQC,EACN,KAAe,WACf,KAAe,SACjBsJ,GAINI,GACED,KAAuB,EACnB,IACAC,IAEA,KAAK,MAAM1J,EAAS,EAAI,KAAK,IAAI,KAAK,IAAIyJ,GAAqBwC,EAAM,CAAC,EAAID,GAAY,CAAC,EAG7F,MAAMM,MAAO,WACX,IAAM/D,GAAW5K,EAAK,OAAQQ,EAAaqK,EAAU3P,EAAOiQ,GAAQuD,EAAY,EAChF,CAAC1O,EAAK,OAAQQ,EAAaqK,EAAU3P,EAAOiQ,GAAQuD,EAAY,CAClE,EAEME,MAAY,WAChB,IACED,GAAK,OAAO,IAAKpQ,IAAW,CAC1B,GAAGA,EACH,OAAQA,EAAM,OAAO,OAAO,CAACC,EAAOvD,IAAMA,IAAM,GAAK,CAACuD,EAAM,OAAO,UAAU,GAAG,CAClF,EAAE,EACJ,CAACmQ,GAAK,MAAM,CACd,EAEME,GAAeD,GAAU,CAAC,GAAG,QAAU,EACvCE,GAAcF,GAAU,CAAC,GAAG,OAAO,QAAU,EAC7ClD,GAAc,KAAK,IAAI,GAAIiD,GAAK,OAAO,CAAC,GAAG,OAAO,QAAU,GAAK,CAAC,EAExE,GAAI,CAAE,QAAAxC,GAAS,SAAA7B,EAAS,KAAI,WAC1B,IACSuE,KAAiB,EACpB,CAAE,QAAS,KAAM,SAAU,IAAK,EAChCpD,GAAW,CAAE,OAAQmD,GAAW,YAAAlD,GAAa,MAAOiD,GAAK,MAAO,YAAAhD,GAAa,QAAAC,EAAS,SAAAnI,EAAU,MAAAvI,CAAM,CAAC,EAG7G,CACEyQ,GACAlI,EACA+K,EAAM,KAAK,aAEX9C,GACAoD,GACAD,GAEA9K,GACAC,GACAV,GACAQ,EACA+G,EACAoB,GACAJ,GACAnO,IAAM,UACNoO,GACAE,EACAE,EACAf,GACAuD,GACA3C,EAEF,CACF,EAEA,MAAMgD,MAAW,WACf,IAAOzE,IAAY,KAAO,CAAC,EAAIA,GAASsE,GAAWD,GAAK,KAAK,EAC7D,CAACrE,GAAUsE,GAAWD,GAAK,KAAK,CAClC,EAEA,GAAIA,GAAK,MAAQ,MAAQxC,IAAW,KAClC,SACE,OAAC6C,EAAA,GACC,QAASP,GACT,YAAAjO,EACA,KAAAR,EACA,QAAS2O,GAAK,MAAQ,GACtB,iBAAkB,GACpB,EAIJ,MAAMM,EACJhD,GAAO,YAAchM,EAAuBkM,GAASwC,GAAK,MAAO,KAC/D,OAACzO,GAAc,CAAC,KAAMyO,GAAK,OAAS,WAAYA,GAAK,MAAQ,GAAG1C,EAAA,CAAQ,EACtE,KAEN,SACE,OAAC3K,EAAA,IACC,MAAOkN,EAAM,MACb,OAAQA,EAAM,OAEd,OAAQS,EAEP,UAACC,EAAUC,OACV,OAAC,IAAU,CAAC,OAAQhD,GAAU,KAAM4C,GAAU,MAAOG,EAAU,OAAQC,EACpE,SAAAX,EAAM,QAAQ,QAAQ,OAAS,KAAmB,SACjD,OAACY,EAAA,IACC,OAAQjD,GACR,SAAUP,EAAQ,QAAQ,SAC1B,UACEA,EAAQ,QAAQ,OAAS,KAAmB,OAAS,KAAiB,KAAO,KAAiB,KAEhG,OAAQ,CAACvH,EAAGgL,GAAU/H,GAAWlN,GAAUkV,GAASC,QAEhD,OAACC,EAAA,GACC,OAAQZ,GAAU,CAAC,EACnB,MAAOD,GAAK,MACZ,SAAAU,GACA,UAAA/H,GACA,KAAMsE,EAAQ,QAAQ,KACtB,UAAWA,EAAQ,QAAQ,KAC3B,SAAAxR,GACA,UAAWwR,EAAQ,QAAQ,UAC3B,iBAAAlN,CAAA,CACF,CAEJ,CACF,EAEJ,EAEJ,CAEJ,E,oDCjLA,MAAM+Q,GAA+C,CACnD,CACE,MAAO,OACP,MAAO,EACP,YAAa,qBACf,EACA,CACE,MAAO,QACP,MAAO,IACP,YAAa,uBACf,EACA,CACE,MAAO,SACP,MAAO,IACP,YAAa,uBACf,EACA,CACE,MAAO,QACP,MAAO,IACP,YAAa,uBACf,CACF,EAEaC,GAAqBlB,GAAuC,CACvE,IAAI7T,EAAQ6T,EAAM,OAAS,EAC3B,MAAMmB,EAAQhV,EAAQ,EAClBgV,IACFhV,GAAS,IAEX,IAAIiV,EAAMH,GAAa,CAAC,EACxB,UAAWnL,KAAKmL,GAEd,GADAG,EAAMtL,EACF3J,GAASiV,EAAI,MACf,MAIJ,MAAMC,EAAmBhI,GAAgB,CACvC2G,EAAM,SAAS3G,GAAO8H,EAAQ,GAAK,EAAE,CACvC,EAEMG,EAAc,IAAM,CACxBtB,EAAM,SAASA,EAAM,MAAQ,EAAE,CACjC,EAEA,SACE,QAAC,MAAe,CACd,oBAACuB,GAAA,EAAgB,CAAC,MAAOH,EAAI,MAAO,QAASH,GAAc,SAAUI,CAAA,CAAiB,EACrFlV,IAAU,MACT,OAACuD,GAAA,EAAO,CAAC,QAAQ,oCAAoC,UAAU,MAC7D,mBAAC,OACC,mBAAC8R,GAAA,EAAQ,CAAC,MAAOL,EAAO,SAAUG,EAAa,MAAM,KAAM,GAC7D,EACF,GAEJ,CAEJ,E,2BCtDO,MAAMG,GAAiE,CAACC,EAAOC,EAAcC,IAAgB,CAClH,GAAID,IAAiB,QAAS,CAC5B,MAAME,EAA6BD,EAAY,QAEzC5P,EAAc0P,EAAM,aAAe,CAAE,SAAU,CAAC,EAAG,UAAW,CAAC,CAAE,EAEvE,GAAIG,EAAa,OAAO,OAAS,SAAU,CACzC,MAAMC,EAAkBJ,EAAM,iBAAmB,CAAC,EAClDI,EAAgB,KACd,CACE,GAAI,SACJ,QAAS,CACP,SAAUC,GAAWF,EAAa,OAAO,MAAM,CACjD,CACF,EACA,CACE,GAAI,YACJ,QAAS,CAAC,CACZ,CACF,EAEAH,EAAM,gBAAkBI,EAGxB9P,EAAY,UAAU,KAAK,CACzB,QAAS,CACP,GAAI,MAAe,OACnB,QAAS,OACX,EACA,WAAY,CACV,CACE,GAAI,uBACJ,MAAO,KAAc,MACvB,CACF,CACF,CAAC,EAED0P,EAAM,YAAc1P,EACpB0P,EAAM,QAAU,CACd,GAAGA,EAAM,QACT,WAAY,CACd,CACF,CACF,CAEA,MAAO,CAAC,CACV,EAGMK,GAAcC,GAAmC,CACrD,MAAMC,EAA8B,CAAC,EAErC,OAAAD,GAAU,QAASE,GAAY,CAExB,OAAO,OAAO,KAAS,EAAE,SAASA,CAAoB,EASzDD,EAAkB,KAAKC,CAAO,EAR1BA,IAAY,UACdD,EAAkB,KAAK,MAAU,WAAW,EACnCC,IAAY,QACrBD,EAAkB,KAAK,MAAU,GAAG,EAC3BC,IAAY,OACrBD,EAAkB,KAAK,MAAU,IAAI,CAK3C,CAAC,EAEMD,EAAWC,EAAoB,CAAC,MAAU,GAAG,CACtD,E,gBCpEO,MAAME,EAA4B,CACvC,oBAAoBxE,EAA0C,CAC5D,OAAOA,EAAQ,gBAAsC,CACnD,KAAM,KAAe,SACrB,SAAU,WACV,QAAS,CACP,UAAW,KAAe,MAC1B,OAAQ,CACN,MAAO,CAAC,EACR,YAAa,KAAkB,KAC/B,WAAY,GACZ,UAAW,OACb,CACF,EACA,YAAa,CACX,SAAU,CACR,KAAM,QACN,OAAQ,CAAC,CACX,EACA,UAAW,CAAC,CACd,EACA,YAAa,CACX,gBAAkB/C,GAAM,CACtBA,EAAE,QAAS,SAAW,EACxB,CACF,CACF,CAAC,CACH,CAEA,sBAAsB+C,EAA0C,CAC9D,MAAMyE,EAAO,KAAK,oBAAoBzE,CAAO,EACvC,CAAE,YAAA0E,CAAY,EAAI1E,EAEpB0E,EAAY,aAAe,IAI3B,CAACA,EAAY,gBAAkB,CAACA,EAAY,gBAK5CA,EAAY,cAAgB,KAKhCD,EAAK,OAAO,CACV,KAAM,KAAe,QACvB,CAAC,EAEGC,EAAY,iBAAmB,IACjCD,EAAK,OAAO,CACV,KAAM,KAAe,gBACrB,QAAS,CACP,SAAU,KAAa,MACzB,CACF,CAAC,EACDA,EAAK,OAAO,CACV,KAAM,KAAe,uBACrB,QAAS,CACP,SAAU,KAAa,OACzB,CACF,CAAC,GAIHA,EAAK,OAAO,CACV,KAAM,KAAe,mBACrB,QAAS,CACP,YAAa,KAAe,UAC9B,CACF,CAAC,EAEGC,EAAY,iBAAmB,IACjCD,EAAK,OAAO,CACV,KAAM,KAAe,0BACrB,QAAS,CACP,SAAU,KAAa,OACvB,YAAa,KAAe,UAC9B,CACF,CAAC,EAEDA,EAAK,OAAO,CACV,KAAM,KAAe,iCACrB,QAAS,CACP,YAAa,KAAe,WAC5B,SAAU,KAAa,OACzB,CACF,CAAC,IAEL,CACF,CC9EO,MAAM,GAAS,IAAIE,EAAA,EAAkCvC,EAAa,EACtE,sBAAsB0B,EAAqC,EAC3D,eAAe,CACd,gBAAiB,CACf,CAAC,KAAoB,KAAK,EAAG,CAC3B,SAAU,CACR,eAAgB,GAChB,qBAAsB,EACxB,EACA,aAAc,CACZ,KAAM,IAAiB,cACzB,CACF,CACF,EACA,gBAAkB9D,GAAY,CAC5B,MAAM4E,EAAMpG,GAEZwB,EACG,eAAe,CACd,KAAM,YACN,KAAM,aACN,aAAc4E,EAAI,UAClB,SAAU,CACR,IAAK,EACL,IAAK,GACL,KAAM,CACR,CACF,CAAC,EACA,eAAe,CACd,KAAM,cACN,KAAM,eACN,aAAcA,EAAI,YAClB,SAAU,CACR,IAAK,EACL,IAAK,IACL,KAAM,CACR,CACF,CAAC,EACA,SAAS,CACR,KAAM,eACN,KAAM,gBACN,aAAc,IAAkB,aAAa,CAAC,EAAE,MAChD,SAAU,CACR,QAAS,IAAkB,YAC7B,CACF,CAAC,EAEH5E,EAAQ,UAAU,CAChB,SAAU,CAAC,cAAc,EACzB,KAAM,YACN,KAAM,YACN,SAAU,CACR,QAAS,CACP,CACE,MAAO,WACP,MAAO,KAAe,SACtB,YAAa,kDACf,EACA,CACE,MAAO,aACP,MAAO,KAAe,UACtB,YAAa,mDACf,CACF,EACA,YAAa,EACf,EACA,iBAAkB,EACpB,CAAC,EAEDA,EAAQ,gBAAgB,CACtB,GAAI,kBACJ,KAAM,kBACN,KAAM,kBACN,SAAU,CAAC,YAAY,EACvB,aAAc,CAAE,KAAM,KAAyB,GAAI,EACnD,SAAU,CACR,QAAS,IAAkB,sBAC7B,EACA,OAAQ6E,EAAA,EACR,SAAUA,EAAA,EACV,QAAS,KACT,YAAa,IAAM,EACrB,CAAC,EAED,IAAmC7E,EAAS4E,EAAK,EAAK,EACtD,IAAiC5E,CAAO,CAC1C,CACF,CAAC,EACA,gBAAiBA,GAAY,CAC5BA,EACG,mBAAmB,CAClB,KAAM,SACN,KAAM,SACN,SAAU,CACR,gBAAiB,4BACnB,CACF,CAAC,EACA,SAAS,CACR,KAAM,cACN,KAAM,cACN,SAAU,CACR,QAAS,CACP,CAAE,MAAO,KAAe,KAAM,MAAO,MAAO,EAC5C,CAAE,MAAO,KAAe,WAAY,MAAO,YAAa,EACxD,CAAE,MAAO,KAAe,SAAU,MAAO,UAAW,CACtD,CACF,EACA,aAAczB,GAAe,WAC/B,CAAC,EACA,eAAe,CACd,KAAM,qBACN,KAAM,4BACN,aAAcA,GAAe,mBAC7B,SAAU,CACR,IAAK,IACL,IAAK,GACL,KAAM,GACN,MAAO,CAAE,MAAO,UAAQ,MAAO,UAAQ,EAAG,QAAM,GAAI,SAAO,GAAI,QAAM,EACrE,SAAU,EACZ,CACF,CAAC,EACA,eAAe,CACd,KAAM,sBACN,KAAM,+BACN,YAAa,yDACb,SAAU,CACR,YAAa,OACb,IAAK,CACP,EACA,OAAS5H,GAASA,EAAK,qBAAuB,CAChD,CAAC,EACA,gBAAgB,CACf,GAAI,oBACJ,KAAM,oBACN,KAAM,gCACN,aAAc4H,GAAe,kBAC7B,OAAQgF,EACV,CAAC,EACA,SAAS,CACR,KAAM,YACN,KAAM,cACN,SAAU,CACR,QAAS,CACP,CAAE,MAAO,KAAe,KAAM,MAAO,MAAO,EAC5C,CAAE,MAAO,KAAe,OAAQ,MAAO,QAAS,EAChD,CAAE,MAAO,KAAe,MAAO,MAAO,OAAQ,CAChD,CACF,EACA,aAAchF,GAAe,SAC/B,CAAC,EACA,SAAS,CACR,KAAM,WACN,KAAM,WACN,SAAU,CACR,QAAS,IAAkB,QAC7B,EACA,aAAcA,GAAe,QAC/B,CAAC,EACA,eAAe,CACd,KAAM,aACN,KAAM,cACN,aAAcA,GAAe,WAC7B,SAAU,CACR,IAAK,EACL,IAAK,EACL,KAAM,GACR,EACA,OAAQ,CAACnB,EAAGvJ,IACNuJ,EAAE,UAAYA,EAAE,WAAa,KAAa,KACrC,GAEF0H,GAAkBjR,CAAI,IAAM,CAEvC,CAAC,EACA,eAAe,CACd,KAAM,WACN,KAAM,YACN,aAAc0K,GAAe,SAC7B,SAAU,CACR,IAAK,EACL,IAAK,EACL,KAAM,GACR,CACF,CAAC,EACA,eAAe,CACd,KAAM,YACN,KAAM,aACN,aAAcA,GAAe,UAC7B,SAAU,CACR,IAAK,EACL,IAAK,GACL,KAAM,GACR,CACF,CAAC,EACA,iBAAiB,CAChB,KAAM,gBACN,KAAM,+BACN,aAAcA,GAAe,cAC7B,OAASnB,GAAMA,EAAE,WAAa,KAAa,IAC7C,CAAC,EAEH4C,EAAQ,mBAAmB,CACzB,KAAM,eACN,KAAM,iBACN,YAAa,kEACf,CAAC,EAED,IAAuCA,CAAO,EAC9C,IAAsCA,CAAO,EAC7C,IAAwCA,EAAS,EAAK,CACxD,CAAC,EACA,uBAAuB,IAAIwE,EAA6B,EAE3D,SAASM,GAAkBjR,EAA4B,CACrD,IAAIkR,EAAQ,EACZ,GAAIlR,EACF,UAAWzB,KAASyB,EAClB,UAAWxB,KAASD,EAAM,OACpBC,EAAM,OAAS,KAAU,QAC3B0S,IAKR,OAAOA,CACT,C,gECzOO,IAAKC,GAAAA,IACVA,EAAA,OAAS,SACTA,EAAA,KAAO,OACPA,EAAA,UAAY,YACZA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QALEA,IAAAA,GAAA,IAQAC,GAAAA,IACVA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,MAAQ,QACRA,EAAA,IAAM,MACNA,EAAA,UAAY,YALFA,IAAAA,GAAA,IAuBAC,GAAAA,IACVA,EAAA,QAAU,UACVA,EAAA,MAAQ,QACRA,EAAA,KAAO,OACPA,EAAA,SAAW,WACXA,EAAA,KAAO,OALGA,IAAAA,GAAA,IAoBAC,GAAAA,IACVA,EAAA,IAAM,MACNA,EAAA,KAAO,OACPA,EAAA,IAAM,MAHIA,IAAAA,GAAA,IAWAC,GAAAA,IACVA,EAAA,SAAW,WADDA,IAAAA,GAAA,IAgBL,MAAMC,EAAqD,CAChE,SAAU,CAAC,CACb,EAgBaC,EAA6D,CACxE,YAAa,CAAC,CAChB,EAuCa/G,EAAmC,CAC9C,YAAa,GACb,cAAe,GACf,QAAS,GACT,kBAAmB,EACrB,C,sECrJO,MAAMgH,EAAe,CAAClT,EAAcmT,IAAmB,CAC5D,MAAMC,EAAiC,CAAC,EAExC,IAAKpT,EAAM,OAAO,OAAO,QAAU,GAAK,GAAKA,EAAM,UAAY,KAAM,CACnE,MAAM8F,EAAI9F,EAAM,OAAOmT,CAAM,EACvBlF,EAAOjO,EAAM,QAAUA,EAAM,QAAQ8F,CAAC,EAAI,CAAE,KAAM,GAAGA,CAAC,GAAI,QAAS,CAACA,CAAE,EAEtEuN,EAAa,IAAI,IAEvBrT,EAAM,SAAS,CAAE,gBAAiBiO,EAAM,cAAekF,CAAO,CAAC,EAAE,QAAShW,GAAS,CACjF,MAAMmW,EAAM,GAAGnW,EAAK,KAAK,IAAIA,EAAK,IAAI,GACjCkW,EAAW,IAAIC,CAAG,IACrBF,EAAM,KAAKjW,CAAI,EACfkW,EAAW,IAAIC,CAAG,EAEtB,CAAC,CACH,CAEA,OAAOF,CACT,EAEaG,EAAkB,CAC7BC,EACAxT,EACAyT,EACAC,IACG,CACH,GAAI,CAAC,IAAO,gBAAgB,WAC1B,MAAO,CAAC,EAGV,MAAMpW,EAAqC,CAAC,EACtCqW,EAAe,IAAI,IAMzB,SAJqB,KAAWH,EAAWxT,EAAOA,EAAM,MAAO,WAAayT,EAAazT,EAAM,OAAO,SAAW,CAAC,EAAG,CACnH,cAAe0T,CACjB,CAAC,EAEY,QAAS9W,GAAW,CAC/B,MAAM0W,EAAM,GAAG1W,EAAO,KAAK,GACtB+W,EAAa,IAAIL,CAAG,IACvBhW,EAAQ,KAAKV,CAAM,EACnB+W,EAAa,IAAIL,CAAG,EAExB,CAAC,EAEMhW,CACT,C,2KCXO,MAAM0T,EAAoB,CAAC,CAChC,OAAAhE,EACA,MAAAH,EACA,SAAAgE,EACA,UAAA/H,EACA,KAAA8K,EAAO,KAAmB,OAC1B,UAAAC,EAAY,KAAU,KACtB,SAAAjY,EACA,SAAA4B,EACA,UAAA1B,EACA,iBAAAoE,CACF,IAA8B,CAC5B,MAAMyM,EAASK,EAAO,OAAO,CAAC,EACxB8G,KAAO,MAAuBnH,EAAO,QAASA,EAAO,OAAOkE,EAAS,CAAC,CAAE,CAAC,CAAC,EAE1EkD,MAAe,MACnB/G,EAAO,OACPL,EACAkE,EACA/H,EACA8K,EACAC,EACC7T,GAAUA,EAAM,OAAS,KAAU,QAAUA,EAAM,OAAS,KAAU,IACzE,EAEA6M,GAAO,QAAS7M,GAAU,CACnBA,EAAM,OAAO,QAAQ,UAAU,SAClC+T,GAAa,KAAK,CAChB,MAAO/T,EAAM,OAAO,aAAeA,EAAM,KACzC,SAAO,KAAIA,EAAOA,EAAM,OAAO6Q,EAAS,CAAC,CAAE,CAAC,CAC9C,CAAC,CAEL,CAAC,EAED,IAAImD,GAEJ,GAAIpY,GAAYkN,GAAa,KAAM,CACjC,MAAM9I,EAAQgN,EAAO,OAAOlE,CAAS,EAC/BE,GAAU6H,EAAS/H,CAAS,EAC5BsK,KAAQ,KAAapT,EAAOgJ,EAAO,EACnC1L,MAAU,KAAgB0P,EAAQhN,EAAOE,EAAmB8I,EAAO,EAEzEgL,MAAS,OAAC,IAAgB,CAAC,UAAWZ,EAAO,QAAA9V,GAAkB,SAAAE,CAAA,CAAoB,CACrF,CAEA,MAAMyW,GAAoCtH,EAAO,OAAO,QAAQ,UAAU,QACtE,KACA,CACE,MAAOA,EAAO,OAAS,KAAU,KAAO,GAAMA,EAAO,OAAO,aAAeA,EAAO,KAClF,MAAOmH,CACT,EAEJ,SACE,QAAC,IAAiB,CACf,UAAAG,IAAc,SAAQ,OAAC,IAAgB,CAAC,KAAMA,GAAY,SAAArY,CAAA,CAAoB,KAC/E,OAAC,KACC,MAAOmY,GACP,SAAAnY,EACA,cAAY,MAAoB,CAAE,KAAAgY,EAAM,UAAA9X,CAAU,CAAC,EACnD,UAAAA,CAAA,CACF,EACCkY,EAAA,EACH,CAEJ,C,uKCnFA,SAASE,EAAanI,EAAkC,CACtD,IAAIoI,EAAyC,IAAI,IA2CjD,OAzC2BpI,EAAO,IAAKhM,IAC9B,CACL,GAAGA,EACH,OAAQA,EAAM,OAAO,IAAKC,GAAU,CAClC,GAAIA,EAAM,OAAS,KAAU,KAAM,CACjC,IAAI0O,KAAW,KAAc1O,EAAM,OAAQA,EAAM,IAAI,EACjDoU,EAAWD,EAAc,IAAIzF,CAAQ,EAEpC0F,IACHA,EAAW,CAAC,EACZD,EAAc,IAAIzF,EAAU0F,CAAQ,GAGtC,IAAIC,EAAiBrU,EAAM,OAAO,QAAQ,EAAE,MAAM,EAC9CsU,EAAOtU,EAAM,OAAO,KAAM,KAAM,KAGpC,GAAIoU,EAAS,OAAS,EACpB,QAAS3X,EAAI,EAAGA,EAAI4X,EAAK,OAAQ5X,IAC/B4X,EAAK5X,CAAC,GAAK2X,EAAS,OAIxB,OAAAA,EAAS,KAAK,GAAGE,CAAI,EAGrBtU,EAAM,OAAO,KAAM,KAAM,KAAQoU,EAE1B,CACL,GAAGpU,EACH,OAAQqU,CACV,CAGF,CAEA,OAAOrU,CACT,CAAC,CACH,EACD,CAGH,CAKO,SAASuU,EACdvH,EACAtQ,EACA8X,EAEAC,EACoB,CACpB,GAAI,CAACzH,GAAQ,OACX,OAAO,QAGT,MAAuBA,CAAM,EAE7B,IAAI0H,EAAcD,GAAgB,KAG9BA,GAAgB,MAAQA,EAAe,IACzCzH,EAAS,CACP,CACE,GAAGA,EAAO,CAAC,EACX,OAAQ,CAACA,EAAO,CAAC,EAAE,OAAOyH,CAAY,EAAG,GAAGzH,EAAO,CAAC,EAAE,OAAO,OAAO,CAACN,EAAGjQ,IAAMA,IAAMgY,CAAY,CAAC,CACnG,CACF,GAMF,QAAS1U,KAASiN,EAChB,QAAShN,KAASD,EAAM,OAClBC,EAAM,OAAS,KAAU,MAAQ,OAAOA,EAAM,OAAO,CAAC,GAAM,WAC9DA,EAAM,UAAS,MAAiBA,EAAO,CAAE,gBAAiB,KAAU,IAAK,CAAC,EAAE,QAKlF,IAAI2U,EAAkB,EAEtBC,EAAO,QAAS7U,KAASiN,EACvB,QAAShN,KAASD,EAAM,OACtB,GAAIC,EAAM,OAAS,KAAU,MAAQ,EAAE2U,EAAkB,EAAG,CAC1D3H,EAASkH,EAAalH,CAAM,EAC5B,MAAM4H,CACR,CAIJ,IAAIC,EAEJ,MAAM9I,EAAsB,CAAC,EAE7B,QAAShM,KAASiN,EAAQ,CACxB,MAAMJ,EAAkB,CAAC,EAEzB,IAAIkI,GAAe,GACfC,GAAgB,GAEhBC,GAAcN,EACd3U,KACA,KAAyB,CACvB,MAAAA,EACA,kBAAmByU,GAAW,KAAK,QAAQ,EAC3C,kBAAmBA,GAAW,GAAG,QAAQ,CAC3C,CAAC,EAEL,MAAMS,KAAc,KAAYD,EAAW,EAAE,OAE7C,QAASE,GAAW,EAAGA,GAAWD,GAAa,OAAaC,KAAY,CACtE,MAAMlV,EAAQiV,EAAYC,EAAQ,EAElC,OAAQlV,EAAM,KAAM,CAClB,KAAK,KAAU,KACb8U,GAAe,GACflI,EAAO,KAAK5M,CAAK,EACjB,MACF,KAAK,KAAU,OACb+U,GAAgBL,EAAcQ,GAAW,EAAI,GAC7CL,EAAO,CACL,GAAG7U,EACH,OAAQA,EAAM,OAAO,IAAK8F,IAClB,OAAO,SAASA,EAAC,GAAKA,IAAK,KAG1BA,GAFE,IAGV,CACH,EAEA8G,EAAO,KAAKiI,CAAI,EAChB,MACF,KAAK,KAAU,KACbE,GAAgB,GAClB,KAAK,KAAU,OACbF,EAAO,CACL,GAAG7U,EACH,OAAQA,EAAM,MAChB,EAEA4M,EAAO,KAAKiI,CAAI,EAChB,MACF,KAAK,KAAU,QACbE,GAAgB,GAChB,MAAMI,GAA2BnV,EAAM,QAAQ,QAAU,CAAC,EACpDG,GAAS,CACb,GAAGH,EAAM,OACT,IAAK,EACL,IAAK,EACL,OAAAmV,EACF,EAGIA,GAAO,oBAAsB,KAAkB,aACjDA,GAAO,kBAAoB,KAAkB,WAG/CN,EAAO,CACL,GAAG7U,EACH,OAAAG,GACA,KAAM,KAAU,OAChB,OAAQH,EAAM,OAAO,IAAK8F,IACpBA,IAAK,KACAA,GAEMA,GAAK,EAAI,CACzB,CACH,KAEK,MAAc3F,GAAO,IAAI,IAC5BA,GAAO,KAAO,OACd0U,EAAK,WAAU,KAAoB,CAAE,MAAOA,EAAM,MAAAnY,CAAM,CAAC,GAG3DkQ,EAAO,KAAKiI,CAAI,EAChB,KACJ,CACF,EAEKH,GAAeI,KAAiBC,IACnChJ,EAAO,KAAK,CACV,GAAGhM,EACH,OAAQiV,GAAY,OACpB,OAAApI,CACF,CAAC,CAEL,CAEA,OAAIb,EAAO,QACTqJ,EAAsBrJ,EAAQrP,EAAO,CAAC,EACtC2Y,EAA4BtJ,EAAQrP,CAAK,EAClCqP,GAGF,IACT,CAEA,MAAMsJ,EAA8B,CAACtJ,EAAqBrP,IAAyB,CACjF,KAAM,CAAE,QAAA4Y,CAAQ,EAAI5Y,EAAM,cAC1B,UAAWqD,KAASgM,EAClB,UAAW/L,KAASD,EAAM,OACxB,GAAIC,EAAM,OAAS,KAAU,KAAM,CACjC,MAAMuV,EAAaD,EAAQtV,EAAM,OAAO,YAAesV,EAAQ,MAAM,EAC/DE,EAAW9Y,EAAM,cAAc,eAAe6Y,CAAU,EACxDE,EAAazV,EAAM,OAAO,KAAM,KAEtCyV,EAAW,MAAQ,MAAMA,EAAW,KAAM,MAAM,EAAE,KAAKD,CAAQ,EAC/DxV,EAAM,WAAU,KAAoB,CAAE,MAAAA,EAAO,MAAAtD,CAAM,CAAC,CACtD,CAGN,EAEa0Y,EAAwB,CAACrJ,EAAqBrP,EAAsBgZ,IAA0B,CACzG,IAAIC,EAAc,EAClB5J,EAAO,QAAShM,GAAU,CACxBA,EAAM,OAAO,QAAQ,CAACC,EAAOkV,IAAa,CAEtCA,IAAaQ,IACZ1V,EAAM,OAAS,KAAU,QAAUA,EAAM,OAAS,KAAU,SAAWA,EAAM,OAAS,KAAU,QAEjGA,EAAM,MAAQ,CACZ,GAAGA,EAAM,MACT,YAAa2V,GACf,EACA3V,EAAM,WAAU,KAAoB,CAAE,MAAAA,EAAO,MAAAtD,CAAM,CAAC,EAExD,CAAC,CACH,CAAC,CACH,EAEO,SAASkZ,EAAaC,EAAiCC,EAAmC,CAC/F,MAAI,CAACD,GAAa,CAACA,EAAU,OACpB,CAACC,CAAe,EAElBD,EAAU,IAAK/P,GAAOA,GAAG,OAASA,EAAIgQ,CAAgB,CAC/D,CAEO,MAAMC,EAAuBC,GAC3BA,EAAe,OAAS,KAAmB,OAASA,EAAe,WAAa,I,kDC1QlF,SAASC,EAAIjW,EAAcqJ,EAAqB,CACrD,OAAIrJ,EAAM,WACD,MAAuBA,EAAM,QAAQqJ,CAAG,CAAC,EAG3C,GAAGA,CAAG,EACf,C","sources":["webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipContent.tsx","webpack://grafana/./packages/grafana-ui/src/components/Actions/ActionButton.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipFooter.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipHeader.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipColorIndicator.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipRow.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipWrapper.tsx","webpack://grafana/./public/app/features/actions/utils.ts","webpack://grafana/./public/app/plugins/panel/barchart/BarChartLegend.tsx","webpack://grafana/./public/app/plugins/panel/barchart/bars.ts","webpack://grafana/./public/app/plugins/panel/barchart/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/barchart/utils.ts","webpack://grafana/./public/app/plugins/panel/barchart/BarChartPanel.tsx","webpack://grafana/./public/app/plugins/panel/barchart/TickSpacingEditor.tsx","webpack://grafana/./public/app/plugins/panel/barchart/migrations.ts","webpack://grafana/./public/app/plugins/panel/barchart/suggestions.ts","webpack://grafana/./public/app/plugins/panel/barchart/module.tsx","webpack://grafana/./public/app/plugins/panel/canvas/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/status-history/utils.ts","webpack://grafana/./public/app/plugins/panel/timeseries/TimeSeriesTooltip.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/utils.ts","webpack://grafana/./public/app/plugins/panel/xychart/utils.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { CSSProperties, ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface VizTooltipContentProps {\n  items: VizTooltipItem[];\n  children?: ReactNode;\n  scrollable?: boolean;\n  isPinned: boolean;\n  maxHeight?: number;\n}\n\nexport const VizTooltipContent = ({\n  items,\n  children,\n  isPinned,\n  scrollable = false,\n  maxHeight,\n}: VizTooltipContentProps) => {\n  const styles = useStyles2(getStyles);\n\n  const scrollableStyle: CSSProperties = scrollable\n    ? {\n        maxHeight: maxHeight,\n        overflowY: 'auto',\n      }\n    : {};\n\n  return (\n    <div className={styles.wrapper} style={scrollableStyle}>\n      {items.map(({ label, value, color, colorIndicator, colorPlacement, isActive, lineStyle }, i) => (\n        <VizTooltipRow\n          key={i}\n          label={label}\n          value={value}\n          color={color}\n          colorIndicator={colorIndicator}\n          colorPlacement={colorPlacement}\n          isActive={isActive}\n          justify={'space-between'}\n          isPinned={isPinned}\n          lineStyle={lineStyle}\n          showValueScroll={!scrollable}\n        />\n      ))}\n      {children}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    gap: 2,\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n});\n","import { ActionModel, Field } from '@grafana/data';\n\nimport { Button, ButtonProps } from '../Button';\n\ntype ActionButtonProps = ButtonProps & {\n  action: ActionModel<Field>;\n};\n\n/**\n * @internal\n */\nexport function ActionButton({ action, ...buttonProps }: ActionButtonProps) {\n  return (\n    <Button variant=\"primary\" size=\"sm\" onClick={action.onClick} {...buttonProps}>\n      {action.title}\n    </Button>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { ActionModel, Field, GrafanaTheme2, LinkModel } from '@grafana/data';\n\nimport { Button, DataLinkButton, Stack } from '..';\nimport { useStyles2 } from '../../themes';\nimport { ActionButton } from '../Actions/ActionButton';\n\ninterface VizTooltipFooterProps {\n  dataLinks: Array<LinkModel<Field>>;\n  actions?: Array<ActionModel<Field>>;\n  annotate?: () => void;\n}\n\nexport const ADD_ANNOTATION_ID = 'add-annotation-button';\n\nconst renderDataLinks = (dataLinks: LinkModel[], styles: ReturnType<typeof getStyles>) => {\n  return (\n    <Stack direction=\"column\" justifyContent=\"flex-start\" gap={0.5}>\n      {dataLinks.map((link, i) => (\n        <DataLinkButton link={link} key={i} buttonProps={{ className: styles.dataLinkButton, fill: 'text' }} />\n      ))}\n    </Stack>\n  );\n};\n\nconst renderActions = (actions: ActionModel[]) => {\n  return (\n    <Stack direction=\"column\" justifyContent=\"flex-start\">\n      {actions.map((action, i) => (\n        <ActionButton key={i} action={action} variant=\"secondary\" />\n      ))}\n    </Stack>\n  );\n};\n\nexport const VizTooltipFooter = ({ dataLinks, actions, annotate }: VizTooltipFooterProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {dataLinks.length > 0 && <div className={styles.dataLinks}>{renderDataLinks(dataLinks, styles)}</div>}\n      {actions && actions.length > 0 && <div className={styles.dataLinks}>{renderActions(actions)}</div>}\n      {annotate != null && (\n        <div className={styles.addAnnotations}>\n          <Button icon=\"comment-alt\" variant=\"secondary\" size=\"sm\" id={ADD_ANNOTATION_ID} onClick={annotate}>\n            Add annotation\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(0),\n  }),\n  dataLinks: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  addAnnotations: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  dataLinkButton: css({\n    cursor: 'pointer',\n    '&:hover': {\n      textDecoration: 'underline',\n      background: 'none',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface Props {\n  item: VizTooltipItem;\n  isPinned: boolean;\n}\nexport const VizTooltipHeader = ({ item, isPinned }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { label, value, color, colorIndicator } = item;\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipRow\n        label={label}\n        value={value}\n        color={color}\n        colorIndicator={colorIndicator}\n        marginRight={'22px'}\n        isPinned={isPinned}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(1),\n    lineHeight: 1,\n  }),\n});\n","import { css, cx } from '@emotion/css';\n\nimport { FALLBACK_COLOR, GrafanaTheme2 } from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\n\nimport { useStyles2 } from '../../themes';\nimport { SeriesIcon } from '../VizLegend/SeriesIcon';\n\nimport { ColorIndicator, DEFAULT_COLOR_INDICATOR } from './types';\nimport { getColorIndicatorClass } from './utils';\n\nexport enum ColorIndicatorPosition {\n  Leading,\n  Trailing,\n}\n\ninterface Props {\n  color?: string;\n  colorIndicator?: ColorIndicator;\n  position?: ColorIndicatorPosition;\n  lineStyle?: LineStyle;\n}\n\nexport type ColorIndicatorStyles = ReturnType<typeof getStyles>;\n\nexport const VizTooltipColorIndicator = ({\n  color = FALLBACK_COLOR,\n  colorIndicator = DEFAULT_COLOR_INDICATOR,\n  position = ColorIndicatorPosition.Leading,\n  lineStyle,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (colorIndicator === ColorIndicator.series) {\n    return (\n      <SeriesIcon\n        color={color}\n        lineStyle={lineStyle}\n        className={position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing}\n      />\n    );\n  }\n\n  return (\n    <span\n      style={{ backgroundColor: color }}\n      className={cx(\n        position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing,\n        getColorIndicatorClass(colorIndicator, styles)\n      )}\n    />\n  );\n};\n\n// @TODO Update classes/add svgs\nconst getStyles = (theme: GrafanaTheme2) => ({\n  leading: css({\n    marginRight: theme.spacing(0.5),\n  }),\n  trailing: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n  value: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.default,\n    fontWeight: 500,\n    minWidth: '12px',\n  }),\n  hexagon: css({}),\n  pie_1_4: css({}),\n  pie_2_4: css({}),\n  pie_3_4: css({}),\n  marker_sm: css({\n    width: '4px',\n    height: '4px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '4px',\n  }),\n  marker_md: css({\n    width: '8px',\n    height: '8px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '8px',\n  }),\n  marker_lg: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '12px',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { CSSProperties, ReactNode, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { InlineToast } from '../InlineToast/InlineToast';\nimport { Tooltip } from '../Tooltip';\n\nimport { ColorIndicatorPosition, VizTooltipColorIndicator } from './VizTooltipColorIndicator';\nimport { ColorPlacement, VizTooltipItem } from './types';\n\ninterface VizTooltipRowProps extends Omit<VizTooltipItem, 'value'> {\n  value: string | number | null | ReactNode;\n  justify?: string;\n  isActive?: boolean; // for series list\n  marginRight?: string;\n  isPinned: boolean;\n  showValueScroll?: boolean;\n}\n\nenum LabelValueTypes {\n  label = 'label',\n  value = 'value',\n}\n\nconst SUCCESSFULLY_COPIED_TEXT = 'Copied to clipboard';\nconst SHOW_SUCCESS_DURATION = 2 * 1000;\nconst HORIZONTAL_PX_PER_CHAR = 7;\n\nexport const VizTooltipRow = ({\n  label,\n  value,\n  color,\n  colorIndicator,\n  colorPlacement = ColorPlacement.first,\n  justify = 'flex-start',\n  isActive = false,\n  marginRight = '0px',\n  isPinned,\n  lineStyle,\n  showValueScroll,\n}: VizTooltipRowProps) => {\n  const styles = useStyles2(getStyles, justify, marginRight);\n\n  const innerValueScrollStyle: CSSProperties = showValueScroll\n    ? {\n        maxHeight: 55,\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n        overflowY: 'auto',\n      }\n    : {\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n      };\n\n  const [showLabelTooltip, setShowLabelTooltip] = useState(false);\n\n  const [copiedText, setCopiedText] = useState<Record<string, string> | null>(null);\n  const [showCopySuccess, setShowCopySuccess] = useState(false);\n\n  const labelRef = useRef<null | HTMLDivElement>(null);\n  const valueRef = useRef<null | HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (showCopySuccess) {\n      timeoutId = setTimeout(() => {\n        setShowCopySuccess(false);\n      }, SHOW_SUCCESS_DURATION);\n    }\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [showCopySuccess]);\n\n  const copyToClipboard = async (text: string, type: LabelValueTypes) => {\n    if (!(navigator?.clipboard && window.isSecureContext)) {\n      fallbackCopyToClipboard(text, type);\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText({ [`${type}`]: text });\n      setShowCopySuccess(true);\n    } catch (error) {\n      setCopiedText(null);\n    }\n  };\n\n  const fallbackCopyToClipboard = (text: string, type: LabelValueTypes) => {\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    const textarea = document.createElement('textarea');\n    labelRef.current?.appendChild(textarea);\n    textarea.value = text;\n    textarea.focus();\n    textarea.select();\n    try {\n      const successful = document.execCommand('copy');\n      if (successful) {\n        setCopiedText({ [`${type}`]: text });\n        setShowCopySuccess(true);\n      }\n    } catch (err) {\n      console.error('Unable to copy to clipboard', err);\n    }\n\n    textarea.remove();\n  };\n\n  const onMouseEnterLabel = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.currentTarget.offsetWidth < event.currentTarget.scrollWidth) {\n      setShowLabelTooltip(true);\n    }\n  };\n\n  const onMouseLeaveLabel = () => setShowLabelTooltip(false);\n\n  // if label is > 50% window width, try to put label/value pairs on new lines\n  if (label.length * HORIZONTAL_PX_PER_CHAR > window.innerWidth / 2) {\n    label = label.replaceAll('{', '{\\n  ').replaceAll('}', '\\n}').replaceAll(', ', ',\\n  ');\n  }\n\n  return (\n    <div className={styles.contentWrapper}>\n      {(color || label) && (\n        <div className={styles.valueWrapper}>\n          {color && colorPlacement === ColorPlacement.first && (\n            <VizTooltipColorIndicator color={color} colorIndicator={colorIndicator} lineStyle={lineStyle} />\n          )}\n          {!isPinned ? (\n            <div className={cx(styles.label, isActive && styles.activeSeries)}>{label}</div>\n          ) : (\n            <>\n              <Tooltip content={label} interactive={false} show={showLabelTooltip}>\n                <>\n                  {showCopySuccess && copiedText?.label && (\n                    <InlineToast placement=\"top\" referenceElement={labelRef.current}>\n                      {SUCCESSFULLY_COPIED_TEXT}\n                    </InlineToast>\n                  )}\n                  {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n                  <div\n                    className={cx(styles.label, isActive && styles.activeSeries, navigator?.clipboard && styles.copy)}\n                    onMouseEnter={onMouseEnterLabel}\n                    onMouseLeave={onMouseLeaveLabel}\n                    onClick={() => copyToClipboard(label, LabelValueTypes.label)}\n                    ref={labelRef}\n                  >\n                    {label}\n                  </div>\n                </>\n              </Tooltip>\n            </>\n          )}\n        </div>\n      )}\n\n      <div className={styles.valueWrapper}>\n        {color && colorPlacement === ColorPlacement.leading && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Leading}\n            lineStyle={lineStyle}\n          />\n        )}\n\n        {!isPinned ? (\n          <div className={cx(styles.value, isActive)} style={innerValueScrollStyle}>\n            {value}\n          </div>\n        ) : (\n          <>\n            {showCopySuccess && copiedText?.value && (\n              <InlineToast placement=\"top\" referenceElement={valueRef.current}>\n                {SUCCESSFULLY_COPIED_TEXT}\n              </InlineToast>\n            )}\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n            <div\n              className={cx(styles.value, isActive, navigator?.clipboard && styles.copy)}\n              style={innerValueScrollStyle}\n              onClick={() => copyToClipboard(value ? value.toString() : '', LabelValueTypes.value)}\n              ref={valueRef}\n            >\n              {value}\n            </div>\n          </>\n        )}\n\n        {color && colorPlacement === ColorPlacement.trailing && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Trailing}\n            lineStyle={lineStyle}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, justify: string, marginRight: string) => ({\n  contentWrapper: css({\n    display: 'flex',\n    alignItems: 'start',\n    justifyContent: justify,\n    marginRight: marginRight,\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    fontWeight: 400,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    marginRight: theme.spacing(2),\n  }),\n  value: css({\n    fontWeight: 500,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  valueWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  activeSeries: css({\n    fontWeight: theme.typography.fontWeightBold,\n    color: theme.colors.text.maxContrast,\n  }),\n  copy: css({\n    cursor: 'pointer',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport const VizTooltipWrapper = ({ children, className }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={cx(styles.wrapper, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import {\n  Action,\n  ActionModel,\n  AppEvents,\n  DataContextScopedVar,\n  DataFrame,\n  DataLink,\n  Field,\n  FieldType,\n  getFieldDataContextClone,\n  InterpolateFunction,\n  ScopedVars,\n  textUtil,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\n\nimport { HttpRequestMethod } from '../../plugins/panel/canvas/panelcfg.gen';\nimport { createAbsoluteUrl, RelativeUrl } from '../alerting/unified/utils/url';\n\n/** @internal */\nexport const getActions = (\n  frame: DataFrame,\n  field: Field,\n  fieldScopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction,\n  actions: Action[],\n  config: ValueLinkConfig\n): Array<ActionModel<Field>> => {\n  if (!actions || actions.length === 0) {\n    return [];\n  }\n\n  const actionModels = actions.map((action: Action) => {\n    const dataContext: DataContextScopedVar = getFieldDataContextClone(frame, field, fieldScopedVars);\n    const actionScopedVars = {\n      ...fieldScopedVars,\n      __dataContext: dataContext,\n    };\n\n    const boundReplaceVariables: InterpolateFunction = (value, scopedVars, format) => {\n      return replaceVariables(value, { ...actionScopedVars, ...scopedVars }, format);\n    };\n\n    // We are not displaying reduction result\n    if (config.valueRowIndex !== undefined && !isNaN(config.valueRowIndex)) {\n      dataContext.value.rowIndex = config.valueRowIndex;\n    } else {\n      dataContext.value.calculatedValue = config.calculatedValue;\n    }\n\n    let actionModel: ActionModel<Field> = { title: '', onClick: (e) => {} };\n\n    actionModel = {\n      title: replaceVariables(action.title || '', actionScopedVars),\n      onClick: (evt: MouseEvent, origin: Field) => {\n        buildActionOnClick(action, boundReplaceVariables);\n      },\n    };\n\n    return actionModel;\n  });\n\n  return actionModels.filter((action): action is ActionModel => !!action);\n};\n\n/** @internal */\nconst buildActionOnClick = (action: Action, replaceVariables: InterpolateFunction) => {\n  try {\n    const url = new URL(getUrl(replaceVariables(action.fetch.url)));\n\n    const requestHeaders: Record<string, string> = {};\n\n    let request: BackendSrvRequest = {\n      url: url.toString(),\n      method: action.fetch.method,\n      data: getData(action, replaceVariables),\n      headers: requestHeaders,\n    };\n\n    if (action.fetch.headers) {\n      action.fetch.headers.forEach(([name, value]) => {\n        requestHeaders[replaceVariables(name)] = replaceVariables(value);\n      });\n    }\n\n    if (action.fetch.queryParams) {\n      action.fetch.queryParams?.forEach(([name, value]) => {\n        url.searchParams.append(replaceVariables(name), replaceVariables(value));\n      });\n\n      request.url = url.toString();\n    }\n\n    requestHeaders['X-Grafana-Action'] = '1';\n    request.headers = requestHeaders;\n\n    getBackendSrv()\n      .fetch(request)\n      .subscribe({\n        error: (error) => {\n          appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n          console.error(error);\n        },\n        complete: () => {\n          appEvents.emit(AppEvents.alertSuccess, ['API call was successful']);\n        },\n      });\n  } catch (error) {\n    appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n    console.error(error);\n    return;\n  }\n};\n\n/** @internal */\n// @TODO update return type\nexport const getActionsDefaultField = (dataLinks: DataLink[] = [], actions: Action[] = []) => {\n  return {\n    name: 'Default field',\n    type: FieldType.string,\n    config: { links: dataLinks, actions: actions },\n    values: [],\n  };\n};\n\n/** @internal */\nconst getUrl = (endpoint: string) => {\n  const isRelativeUrl = endpoint.startsWith('/');\n  if (isRelativeUrl) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const sanitizedRelativeURL = textUtil.sanitizeUrl(endpoint) as RelativeUrl;\n    endpoint = createAbsoluteUrl(sanitizedRelativeURL, []);\n  }\n\n  return endpoint;\n};\n\n/** @internal */\nconst getData = (action: Action, replaceVariables: InterpolateFunction) => {\n  let data: string | undefined = action.fetch.body ? replaceVariables(action.fetch.body) : '{}';\n  if (action.fetch.method === HttpRequestMethod.GET) {\n    data = undefined;\n  }\n\n  return data;\n};\n","import { includes } from 'lodash';\nimport { memo } from 'react';\n\nimport {\n  DataFrame,\n  Field,\n  FieldColorModeId,\n  getFieldSeriesColor,\n  ThresholdsConfig,\n  ThresholdsMode,\n  ValueMapping,\n} from '@grafana/data';\nimport { VizLegendOptions, AxisPlacement } from '@grafana/schema';\nimport { UPlotConfigBuilder, VizLayout, VizLayoutLegendProps, VizLegend, VizLegendItem, useTheme2 } from '@grafana/ui';\nimport { getDisplayValuesForCalcs } from '@grafana/ui/src/components/uPlot/utils';\nimport { getThresholdItems, getValueMappingItems } from 'app/core/components/TimelineChart/utils';\ninterface BarChartLegend2Props extends VizLegendOptions, Omit<VizLayoutLegendProps, 'children'> {\n  data: DataFrame[];\n  colorField?: Field | null;\n  // config: UPlotConfigBuilder;\n}\n\n/**\n * mostly duplicates logic in PlotLegend below :(\n *\n * @internal\n */\nexport function hasVisibleLegendSeries(config: UPlotConfigBuilder, data: DataFrame[]) {\n  return data[0].fields.slice(1).some((field) => !Boolean(field.config.custom?.hideFrom?.legend));\n\n  // return config.getSeries().some((s, i) => {\n  //   const frameIndex = 0;\n  //   const fieldIndex = i + 1;\n  //   const field = data[frameIndex].fields[fieldIndex];\n  //   return !Boolean(field.config.custom?.hideFrom?.legend);\n  // });\n}\n\nexport const BarChartLegend = memo(\n  ({ data, placement, calcs, displayMode, colorField, ...vizLayoutLegendProps }: BarChartLegend2Props) => {\n    const theme = useTheme2();\n\n    const fieldConfig = data[0].fields[0].config;\n    const colorMode = fieldConfig.color?.mode;\n\n    const thresholdItems: VizLegendItem[] = [];\n    if (colorMode === FieldColorModeId.Thresholds) {\n      const thresholdsAbsolute: ThresholdsConfig = { mode: ThresholdsMode.Absolute, steps: [] };\n      const thresholdsPercent: ThresholdsConfig = { mode: ThresholdsMode.Percentage, steps: [] };\n\n      for (let i = 1; i < data[0].fields.length; i++) {\n        const field = data[0].fields[i];\n        // there is no reason to add threshold with only one (Base) step\n        if (field.config.thresholds && field.config.thresholds.steps.length > 1) {\n          if (field.config.thresholds.mode === ThresholdsMode.Absolute) {\n            for (const step of field.config.thresholds.steps) {\n              if (!includes(thresholdsAbsolute.steps, step)) {\n                thresholdsAbsolute.steps.push(step);\n              }\n            }\n          } else {\n            for (const step of field.config.thresholds.steps) {\n              if (!includes(thresholdsPercent.steps, step)) {\n                thresholdsPercent.steps.push(step);\n              }\n            }\n          }\n        }\n      }\n\n      const thresholdAbsoluteItems: VizLegendItem[] = getThresholdItems(fieldConfig, theme, thresholdsAbsolute);\n      const thresholdPercentItems: VizLegendItem[] = getThresholdItems(fieldConfig, theme, thresholdsPercent);\n      thresholdItems.push(...thresholdAbsoluteItems, ...thresholdPercentItems);\n    }\n\n    const valueMappings: ValueMapping[] = [];\n    for (let i = 1; i < data[0].fields.length; i++) {\n      const mappings = data[0].fields[i].config.mappings;\n      if (mappings) {\n        for (const mapping of mappings) {\n          if (!includes(valueMappings, mapping)) {\n            valueMappings.push(mapping);\n          }\n        }\n      }\n    }\n    const valueMappingItems: VizLegendItem[] = getValueMappingItems(valueMappings, theme);\n\n    const legendItems = data[0].fields\n      .slice(1)\n      .map((field, i) => {\n        const frameIndex = 0;\n        const fieldIndex = i + 1;\n        // const axisPlacement = config.getAxisPlacement(s.props.scaleKey); // TODO: this should be stamped on the field.config?\n        // const field = data[frameIndex].fields[fieldIndex];\n\n        if (!field || field.config.custom?.hideFrom?.legend) {\n          return undefined;\n        }\n\n        // // apparently doing a second pass like this will take existing state.displayName, and if same as another one, appends counter\n        // const label = getFieldDisplayName(field, data[0], data);\n        const label = field.state?.displayName ?? field.name;\n\n        const color = getFieldSeriesColor(field, theme).color;\n\n        const item: VizLegendItem = {\n          disabled: field.state?.hideFrom?.viz,\n          color,\n          label,\n          yAxis: field.config.custom?.axisPlacement === AxisPlacement.Right ? 2 : 1,\n          getDisplayValues: () => getDisplayValuesForCalcs(calcs, field, theme),\n          getItemKey: () => `${label}-${frameIndex}-${fieldIndex}`,\n        };\n\n        return item;\n      })\n      .filter((i): i is VizLegendItem => i !== undefined);\n\n    return (\n      <VizLayout.Legend placement={placement} {...vizLayoutLegendProps}>\n        <VizLegend\n          placement={placement}\n          items={legendItems}\n          thresholdItems={thresholdItems}\n          mappingItems={valueMappingItems}\n          displayMode={displayMode}\n          sortBy={vizLayoutLegendProps.sortBy}\n          sortDesc={vizLayoutLegendProps.sortDesc}\n          isSortable={true}\n        />\n      </VizLayout.Legend>\n    );\n  }\n);\n\nBarChartLegend.displayName = 'BarChartLegend';\n","import uPlot, { Axis, AlignedData, Scale } from 'uplot';\n\nimport { DataFrame, dateTimeFormat, GrafanaTheme2, systemDateFormats, TimeZone } from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport {\n  StackingMode,\n  VisibilityMode,\n  ScaleDirection,\n  ScaleOrientation,\n  VizTextDisplayOptions,\n  VizLegendOptions,\n} from '@grafana/schema';\nimport { measureText } from '@grafana/ui';\nimport { timeUnitSize } from '@grafana/ui/src/components/uPlot/config/UPlotAxisBuilder';\nimport { StackingGroup, preparePlotData2 } from '@grafana/ui/src/components/uPlot/utils';\n\nconst intervals = systemDateFormats.interval;\n\nimport { distribute, SPACE_BETWEEN } from './distribute';\nimport { findRects, intersects, pointWithin, Quadtree, Rect } from './quadtree';\n\nconst groupDistr = SPACE_BETWEEN;\nconst barDistr = SPACE_BETWEEN;\n// min.max font size for value label\nconst VALUE_MIN_FONT_SIZE = 8;\nconst VALUE_MAX_FONT_SIZE = 30;\n// % of width/height of the bar that value should fit in when measuring size\nconst BAR_FONT_SIZE_RATIO = 0.65;\n// distance between label and a bar in % of bar width\nconst LABEL_OFFSET_FACTOR_VT = 0.1;\nconst LABEL_OFFSET_FACTOR_HZ = 0.15;\n// max distance\nconst LABEL_OFFSET_MAX_VT = 5;\nconst LABEL_OFFSET_MAX_HZ = 10;\n\n// text baseline middle runs through the middle of lowercase letters\n// since bar values are numbers and uppercase-like, we want the middle of uppercase\n// this is a cheap fudge factor that skips expensive and inconsistent cross-browser measuring\nconst MIDDLE_BASELINE_SHIFT = 0.1;\n\n/**\n * @internal\n */\nexport interface BarsOptions {\n  xOri: ScaleOrientation;\n  xDir: ScaleDirection;\n  groupWidth: number;\n  barWidth: number;\n  barRadius: number;\n  showValue: VisibilityMode;\n  stacking: StackingMode;\n  rawValue: (seriesIdx: number, valueIdx: number) => number | null;\n  getColor?: (seriesIdx: number, valueIdx: number, value: unknown) => string | null;\n  fillOpacity?: number;\n  formatValue: (seriesIdx: number, value: unknown) => string;\n  formatShortValue: (seriesIdx: number, value: unknown) => string;\n  timeZone?: TimeZone;\n  text?: VizTextDisplayOptions;\n  hoverMulti?: boolean;\n  legend?: VizLegendOptions;\n  xSpacing?: number;\n  xTimeAuto?: boolean;\n  negY?: boolean[];\n  fullHighlight?: boolean;\n}\n\n/**\n * @internal\n */\ninterface ValueLabelTable {\n  [index: number]: ValueLabelArray;\n}\n\n/**\n * @internal\n */\ninterface ValueLabelArray {\n  [index: number]: ValueLabel;\n}\n\n/**\n * @internal\n */\ninterface ValueLabel {\n  text: string;\n  value: number | null;\n  hidden: boolean;\n  bbox?: Rect;\n  textMetrics?: TextMetrics;\n  x?: number;\n  y?: number;\n}\n\n/**\n * @internal\n */\nfunction calculateFontSizeWithMetrics(\n  text: string,\n  width: number,\n  height: number,\n  lineHeight: number,\n  maxSize?: number\n) {\n  // calculate width in 14px\n  const textSize = measureText(text, 14);\n  // how much bigger than 14px can we make it while staying within our width constraints\n  const fontSizeBasedOnWidth = (width / (textSize.width + 2)) * 14;\n  const fontSizeBasedOnHeight = height / lineHeight;\n\n  // final fontSize\n  const optimalSize = Math.min(fontSizeBasedOnHeight, fontSizeBasedOnWidth);\n  return {\n    fontSize: Math.min(optimalSize, maxSize ?? optimalSize),\n    textMetrics: textSize,\n  };\n}\n\n/**\n * @internal\n */\nexport function getConfig(opts: BarsOptions, theme: GrafanaTheme2) {\n  const {\n    xOri,\n    xDir: dir,\n    rawValue,\n    getColor,\n    formatValue,\n    formatShortValue,\n    fillOpacity = 1,\n    showValue,\n    xSpacing = 0,\n    hoverMulti = false,\n    timeZone = 'browser',\n  } = opts;\n  const isXHorizontal = xOri === ScaleOrientation.Horizontal;\n  const hasAutoValueSize = !Boolean(opts.text?.valueSize);\n  const isStacked = opts.stacking !== StackingMode.None;\n  const pctStacked = opts.stacking === StackingMode.Percent;\n\n  let { groupWidth, barWidth, barRadius = 0 } = opts;\n\n  if (isStacked) {\n    [groupWidth, barWidth] = [barWidth, groupWidth];\n  }\n\n  let qt: Quadtree;\n  const numSeries = 30; // !!\n  const hovered: Array<Rect | null> = Array(numSeries).fill(null);\n  let hRect: Rect | null;\n\n  // for distr: 2 scales, the splits array should contain indices into data[0] rather than values\n  const xSplits: Axis.Splits | undefined = (u) => Array.from(u.data[0].map((v, i) => i));\n\n  const hFilter: Axis.Filter | undefined =\n    xSpacing === 0\n      ? undefined\n      : (u, splits) => {\n          // hSpacing?\n          const dim = u.bbox.width;\n          const _dir = dir * (isXHorizontal ? 1 : -1);\n\n          let dataLen = splits.length;\n          let lastIdx = dataLen - 1;\n\n          let skipMod = 0;\n\n          let cssDim = dim / uPlot.pxRatio;\n          let maxTicks = Math.abs(Math.floor(cssDim / xSpacing));\n\n          skipMod = dataLen < maxTicks ? 0 : Math.ceil(dataLen / maxTicks);\n\n          let splits2 = splits.map((v, i) => {\n            let shouldSkip = skipMod !== 0 && (xSpacing > 0 ? i : lastIdx - i) % skipMod > 0;\n            return shouldSkip ? null : v;\n          });\n\n          return _dir === 1 ? splits2 : splits2.reverse();\n        };\n\n  // the splits passed into here are data[0] values looked up by the indices returned from splits()\n  const xValues: Axis.Values = (u, splits, axisIdx, foundSpace, foundIncr) => {\n    if (opts.xTimeAuto) {\n      let format = intervals.year;\n\n      if (foundIncr < timeUnitSize.second) {\n        format = intervals.millisecond;\n      } else if (foundIncr < timeUnitSize.minute) {\n        format = intervals.second;\n      } else if (foundIncr < timeUnitSize.hour) {\n        format = intervals.minute;\n      } else if (foundIncr < timeUnitSize.day) {\n        format = intervals.hour;\n      } else if (foundIncr < timeUnitSize.month) {\n        format = intervals.day;\n      } else if (foundIncr < timeUnitSize.year) {\n        format = intervals.month;\n      } else {\n        format = intervals.year;\n      }\n\n      return splits.map((v) => (v == null ? '' : dateTimeFormat(v, { format, timeZone })));\n    }\n\n    return splits.map((v) => (isXHorizontal ? formatShortValue(0, v) : formatValue(0, v)));\n  };\n\n  // this expands the distr: 2 scale so that the indicies of each data[0] land at the proper justified positions\n  const xRange: Scale.Range = (u, min, max) => {\n    min = 0;\n    max = Math.max(1, u.data[0].length - 1);\n\n    let pctOffset = 0;\n\n    // how far in is the first tick in % of full dimension\n    distribute(u.data[0].length, groupWidth, groupDistr, 0, (di, lftPct, widPct) => {\n      pctOffset = lftPct + widPct / 2;\n    });\n\n    // expand scale range by equal amounts on both ends\n    let rn = max - min;\n\n    if (pctOffset === 0.5) {\n      min -= rn;\n    } else {\n      let upScale = 1 / (1 - pctOffset * 2);\n      let offset = (upScale * rn - rn) / 2;\n\n      min -= offset;\n      max += offset;\n    }\n\n    return [min, max];\n  };\n\n  let distrTwo = (groupCount: number, barCount: number) => {\n    let out = Array.from({ length: barCount }, () => ({\n      offs: Array(groupCount).fill(0),\n      size: Array(groupCount).fill(0),\n    }));\n\n    distribute(groupCount, groupWidth, groupDistr, null, (groupIdx, groupOffPct, groupDimPct) => {\n      distribute(barCount, barWidth, barDistr, null, (barIdx, barOffPct, barDimPct) => {\n        out[barIdx].offs[groupIdx] = groupOffPct + groupDimPct * barOffPct;\n        out[barIdx].size[groupIdx] = groupDimPct * barDimPct;\n      });\n    });\n\n    return out;\n  };\n\n  let distrOne = (groupCount: number, barCount: number) => {\n    let out = Array.from({ length: barCount }, () => ({\n      offs: Array(groupCount).fill(0),\n      size: Array(groupCount).fill(0),\n    }));\n\n    distribute(groupCount, groupWidth, groupDistr, null, (groupIdx, groupOffPct, groupDimPct) => {\n      distribute(barCount, barWidth, barDistr, null, (barIdx, barOffPct, barDimPct) => {\n        out[barIdx].offs[groupIdx] = groupOffPct;\n        out[barIdx].size[groupIdx] = groupDimPct;\n      });\n    });\n\n    return out;\n  };\n\n  const LABEL_OFFSET_FACTOR = isXHorizontal ? LABEL_OFFSET_FACTOR_VT : LABEL_OFFSET_FACTOR_HZ;\n  const LABEL_OFFSET_MAX = isXHorizontal ? LABEL_OFFSET_MAX_VT : LABEL_OFFSET_MAX_HZ;\n\n  let barsPctLayout: Array<null | { offs: number[]; size: number[] }> = [];\n  let barsColors: Array<null | { fill: Array<string | null>; stroke: Array<string | null> }> = [];\n  let scaleFactor = 1;\n  let labels: ValueLabelTable;\n  let fontSize = opts.text?.valueSize ?? VALUE_MAX_FONT_SIZE;\n  let labelOffset = LABEL_OFFSET_MAX;\n\n  // minimum available space for labels between bar end and plotting area bound (in canvas pixels)\n  let vSpace = Infinity;\n  let hSpace = Infinity;\n\n  let useMappedColors = getColor != null;\n\n  let mappedColorDisp = useMappedColors\n    ? {\n        fill: {\n          unit: 3,\n          values: (u: uPlot, seriesIdx: number) => barsColors[seriesIdx]!.fill,\n        },\n        stroke: {\n          unit: 3,\n          values: (u: uPlot, seriesIdx: number) => barsColors[seriesIdx]!.stroke,\n        },\n      }\n    : {};\n\n  let barsBuilder = uPlot.paths.bars!({\n    radius: pctStacked\n      ? 0\n      : !isStacked\n        ? barRadius\n        : (u: uPlot, seriesIdx: number) => {\n            let isTopmostSeries = seriesIdx === u.data.length - 1;\n            return isTopmostSeries ? [barRadius, 0] : [0, 0];\n          },\n    disp: {\n      x0: {\n        unit: 2,\n        values: (u, seriesIdx) => barsPctLayout[seriesIdx]!.offs,\n      },\n      size: {\n        unit: 2,\n        values: (u, seriesIdx) => barsPctLayout[seriesIdx]!.size,\n      },\n      ...mappedColorDisp,\n    },\n    // collect rendered bar geometry\n    each: (u, seriesIdx, dataIdx, lft, top, wid, hgt) => {\n      // we get back raw canvas coords (included axes & padding)\n      // translate to the plotting area origin\n      lft -= u.bbox.left;\n      top -= u.bbox.top;\n\n      let val = u.data[seriesIdx][dataIdx]!;\n      // accum min space abvailable for labels\n      if (isXHorizontal) {\n        vSpace = Math.min(vSpace, val < 0 ? u.bbox.height - (top + hgt) : top);\n        hSpace = wid;\n      } else {\n        vSpace = hgt;\n        hSpace = Math.min(hSpace, val < 0 ? lft : u.bbox.width - (lft + wid));\n      }\n\n      let barRect = { x: lft, y: top, w: wid, h: hgt, sidx: seriesIdx, didx: dataIdx };\n\n      if (!isStacked && opts.fullHighlight) {\n        if (opts.xOri === ScaleOrientation.Horizontal) {\n          barRect.y = 0;\n          barRect.h = u.bbox.height;\n        } else {\n          barRect.x = 0;\n          barRect.w = u.bbox.width;\n        }\n      }\n\n      qt.add(barRect);\n\n      if (showValue !== VisibilityMode.Never) {\n        const raw = rawValue(seriesIdx, dataIdx)!;\n        let divider = 1;\n\n        if (pctStacked && alignedTotals![seriesIdx][dataIdx]!) {\n          divider = alignedTotals![seriesIdx][dataIdx]!;\n        }\n\n        const v = divider === 0 ? 0 : raw / divider;\n        // Format Values and calculate label offsets\n        const text = formatValue(seriesIdx, v);\n        labelOffset = Math.min(labelOffset, Math.round(LABEL_OFFSET_FACTOR * (isXHorizontal ? wid : hgt)));\n\n        if (labels[dataIdx] === undefined) {\n          labels[dataIdx] = {};\n        }\n        labels[dataIdx][seriesIdx] = { text: text, value: rawValue(seriesIdx, dataIdx), hidden: false };\n\n        // Calculate font size when it's set to be automatic\n        if (hasAutoValueSize) {\n          const { fontSize: calculatedSize, textMetrics } = calculateFontSizeWithMetrics(\n            labels[dataIdx][seriesIdx].text,\n            hSpace * (isXHorizontal ? BAR_FONT_SIZE_RATIO : 1) - (isXHorizontal ? 0 : labelOffset),\n            vSpace * (isXHorizontal ? 1 : BAR_FONT_SIZE_RATIO) - (isXHorizontal ? labelOffset : 0),\n            1\n          );\n\n          // Save text metrics\n          labels[dataIdx][seriesIdx].textMetrics = textMetrics;\n\n          // Retrieve the new font size and use it\n          let autoFontSize = Math.round(Math.min(fontSize, VALUE_MAX_FONT_SIZE, calculatedSize));\n\n          // Calculate the scaling factor for bouding boxes\n          // Take into account the fact that calculateFontSize\n          // uses 14px measurement so we need to adjust the scale factor\n          scaleFactor = (autoFontSize / fontSize) * (autoFontSize / 14);\n\n          // Update the end font-size\n          fontSize = autoFontSize;\n        } else {\n          labels[dataIdx][seriesIdx].textMetrics = measureText(labels[dataIdx][seriesIdx].text, fontSize);\n        }\n\n        let middleShift = isXHorizontal ? 0 : -Math.round(MIDDLE_BASELINE_SHIFT * fontSize);\n        let value = rawValue(seriesIdx, dataIdx);\n\n        if (opts.negY?.[seriesIdx] && value != null) {\n          value *= -1;\n        }\n\n        if (value != null) {\n          // Calculate final co-ordinates for text position\n          const x =\n            u.bbox.left + (isXHorizontal ? lft + wid / 2 : value < 0 ? lft - labelOffset : lft + wid + labelOffset);\n          let y =\n            u.bbox.top +\n            (isXHorizontal ? (value < 0 ? top + hgt + labelOffset : top - labelOffset) : top + hgt / 2 - middleShift);\n\n          // Retrieve textMetrics with necessary default values\n          // These _shouldn't_ be undefined at this point\n          // but they _could_ be.\n          const {\n            textMetrics = {\n              width: 1,\n              actualBoundingBoxAscent: 1,\n              actualBoundingBoxDescent: 1,\n            },\n          } = labels[dataIdx][seriesIdx];\n\n          // Adjust bounding boxes based on text scale\n          // factor and orientation (which changes the baseline)\n          let xAdjust = 0,\n            yAdjust = 0;\n\n          if (isXHorizontal) {\n            // Adjust for baseline which is \"top\" in this case\n            xAdjust = (textMetrics.width * scaleFactor) / 2;\n\n            // yAdjust only matters when the value isn't negative\n            yAdjust =\n              value > 0\n                ? (textMetrics.actualBoundingBoxAscent + textMetrics.actualBoundingBoxDescent) * scaleFactor\n                : 0;\n          } else {\n            // Adjust from the baseline which is \"middle\" in this case\n            yAdjust = ((textMetrics.actualBoundingBoxAscent + textMetrics.actualBoundingBoxDescent) * scaleFactor) / 2;\n\n            // Adjust for baseline being \"right\" in the x direction\n            xAdjust = value < 0 ? textMetrics.width * scaleFactor : 0;\n          }\n\n          // Force label bounding box y position to not be negative\n          if (y - yAdjust < 0) {\n            y = yAdjust;\n          }\n\n          // Construct final bounding box for the label text\n          labels[dataIdx][seriesIdx].x = x;\n          labels[dataIdx][seriesIdx].y = y;\n          labels[dataIdx][seriesIdx].bbox = {\n            x: x - xAdjust,\n            y: y - yAdjust,\n            w: textMetrics.width * scaleFactor,\n            h: (textMetrics.actualBoundingBoxAscent + textMetrics.actualBoundingBoxDescent) * scaleFactor,\n          };\n        }\n      }\n    },\n  });\n\n  const init = (u: uPlot) => {\n    u.root.querySelectorAll<HTMLDivElement>('.u-cursor-pt').forEach((el) => {\n      el.style.borderRadius = '0';\n\n      if (opts.fullHighlight) {\n        el.style.zIndex = '-1';\n      }\n    });\n  };\n\n  const cursor: uPlot.Cursor = {\n    x: false,\n    y: false,\n    drag: {\n      x: false,\n      y: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 0) {\n        hovered.fill(null);\n        hRect = null;\n\n        let cx = u.cursor.left! * uPlot.pxRatio;\n        let cy = u.cursor.top! * uPlot.pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = hovered[0] = o;\n            hovered[hRect.sidx] = hRect;\n\n            hoverMulti &&\n              findRects(qt, undefined, hRect.didx).forEach((r) => {\n                hovered[r.sidx] = r;\n              });\n          }\n        });\n      }\n\n      return hovered[seriesIdx]?.didx;\n    },\n    points: {\n      fill: 'rgba(255,255,255,0.4)',\n      bbox: (u, seriesIdx) => {\n        let hRect2 = hovered[seriesIdx];\n        let isHovered = hRect2 != null;\n\n        return {\n          left: isHovered ? hRect2!.x / uPlot.pxRatio : -10,\n          top: isHovered ? hRect2!.y / uPlot.pxRatio : -10,\n          width: isHovered ? hRect2!.w / uPlot.pxRatio : 0,\n          height: isHovered ? hRect2!.h / uPlot.pxRatio : 0,\n        };\n      },\n    },\n    focus: {\n      prox: 1e3,\n      dist: (u, seriesIdx) => (hRect?.sidx === seriesIdx ? 0 : Infinity),\n    },\n  };\n\n  // Build bars\n  const drawClear = (u: uPlot) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n    qt.clear();\n\n    // clear the path cache to force drawBars() to rebuild new quadtree\n    u.series.forEach((s) => {\n      // @ts-ignore\n      s._paths = null;\n    });\n\n    if (isStacked) {\n      barsPctLayout = [null, ...distrOne(u.data[0].length, u.data.length - 1)];\n    } else {\n      barsPctLayout = [null, ...distrTwo(u.data[0].length, u.data.length - 1)];\n    }\n\n    if (useMappedColors) {\n      barsColors = [null];\n\n      // map per-bar colors\n      for (let i = 1; i < u.data.length; i++) {\n        let colors = (u.data[i] as Array<number | null>).map((value, valueIdx) => {\n          if (value != null) {\n            return getColor!(i, valueIdx, value);\n          }\n\n          return null;\n        });\n\n        barsColors.push({\n          fill: fillOpacity < 1 ? colors.map((c) => (c != null ? alpha(c, fillOpacity) : null)) : colors,\n          stroke: colors,\n        });\n      }\n    }\n\n    labels = {};\n    fontSize = opts.text?.valueSize ?? VALUE_MAX_FONT_SIZE;\n    labelOffset = LABEL_OFFSET_MAX;\n    vSpace = hSpace = Infinity;\n  };\n\n  // uPlot hook to draw the labels on the bar chart.\n  const draw = (u: uPlot) => {\n    if (showValue === VisibilityMode.Never || fontSize < VALUE_MIN_FONT_SIZE) {\n      return;\n    }\n\n    u.ctx.save();\n    u.ctx.fillStyle = theme.colors.text.primary;\n    u.ctx.font = `${fontSize}px ${theme.typography.fontFamily}`;\n\n    let curAlign: CanvasTextAlign | undefined = undefined,\n      curBaseline: CanvasTextBaseline | undefined = undefined;\n\n    for (const didx in labels) {\n      // exclude first label from overlap testing\n      let first = true;\n\n      for (const sidx in labels[didx]) {\n        const label = labels[didx][sidx];\n        const { text, x = 0, y = 0 } = label;\n        let { value } = label;\n\n        if (opts.negY?.[sidx] && value != null) {\n          value *= -1;\n        }\n\n        let align: CanvasTextAlign = isXHorizontal ? 'center' : value !== null && value < 0 ? 'right' : 'left';\n        let baseline: CanvasTextBaseline = isXHorizontal\n          ? value !== null && value < 0\n            ? 'top'\n            : 'alphabetic'\n          : 'middle';\n\n        if (align !== curAlign) {\n          u.ctx.textAlign = curAlign = align;\n        }\n\n        if (baseline !== curBaseline) {\n          u.ctx.textBaseline = curBaseline = baseline;\n        }\n\n        if (showValue === VisibilityMode.Always) {\n          u.ctx.fillText(text, x, y);\n        } else if (showValue === VisibilityMode.Auto) {\n          let { bbox } = label;\n\n          let intersectsLabel = false;\n\n          if (bbox == null) {\n            intersectsLabel = true;\n            label.hidden = true;\n          } else if (!first) {\n            // Test for any collisions\n            for (const subsidx in labels[didx]) {\n              if (subsidx === sidx) {\n                continue;\n              }\n\n              const label2 = labels[didx][subsidx];\n              const { bbox: bbox2, hidden } = label2;\n\n              if (!hidden && bbox2 && intersects(bbox, bbox2)) {\n                intersectsLabel = true;\n                label.hidden = true;\n                break;\n              }\n            }\n          }\n\n          first = false;\n\n          !intersectsLabel && u.ctx.fillText(text, x, y);\n        }\n      }\n    }\n\n    u.ctx.restore();\n  };\n\n  let alignedTotals: AlignedData | null = null;\n\n  function prepData(frames: DataFrame[], stackingGroups: StackingGroup[]) {\n    alignedTotals = null;\n    return preparePlotData2(frames[0], stackingGroups, ({ totals }) => {\n      alignedTotals = totals;\n    });\n  }\n\n  return {\n    cursor,\n    // scale & axis opts\n    xRange,\n    xValues,\n    xSplits,\n    hFilter,\n\n    barsBuilder,\n\n    // hooks\n    init,\n    drawClear,\n    draw,\n    prepData,\n  };\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip, common.OptionsWithTextFormatting {\n  /**\n   * Controls the radius of each bar.\n   */\n  barRadius?: number;\n  /**\n   * Controls the width of bars. 1 = Max width, 0 = Min width.\n   */\n  barWidth: number;\n  /**\n   * Use the color value for a sibling field to color each bar value.\n   */\n  colorByField?: string;\n  /**\n   * Enables mode which highlights the entire bar area and shows tooltip when cursor\n   * hovers over highlighted area\n   */\n  fullHighlight: boolean;\n  /**\n   * Controls the width of groups. 1 = max with, 0 = min width.\n   */\n  groupWidth: number;\n  /**\n   * Controls the orientation of the bar chart, either vertical or horizontal.\n   */\n  orientation: common.VizOrientation;\n  /**\n   * This controls whether values are shown on top or to the left of bars.\n   */\n  showValue: common.VisibilityMode;\n  /**\n   * Controls whether bars are stacked or not, either normally or in percent mode.\n   */\n  stacking: common.StackingMode;\n  /**\n   * Manually select which field from the dataset to represent the x field.\n   */\n  xField?: string;\n  /**\n   * Sets the max length that a label can have before it is truncated.\n   */\n  xTickLabelMaxLength: number;\n  /**\n   * Controls the rotation of the x axis labels.\n   */\n  xTickLabelRotation: number;\n  /**\n   * Controls the spacing between x axis labels.\n   * negative values indicate backwards skipping behavior\n   */\n  xTickLabelSpacing?: number;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  barRadius: 0,\n  barWidth: 0.97,\n  fullHighlight: false,\n  groupWidth: 0.7,\n  orientation: common.VizOrientation.Auto,\n  showValue: common.VisibilityMode.Auto,\n  stacking: common.StackingMode.None,\n  xTickLabelRotation: 0,\n  xTickLabelSpacing: 0,\n};\n\nexport interface FieldConfig extends common.AxisConfig, common.HideableFieldConfig {\n  /**\n   * Controls the fill opacity of the bars.\n   */\n  fillOpacity?: number;\n  /**\n   * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.\n   * Gradient appearance is influenced by the Fill opacity setting.\n   */\n  gradientMode?: common.GraphGradientMode;\n  /**\n   * Controls line width of the bars.\n   */\n  lineWidth?: number;\n  /**\n   * Threshold rendering\n   */\n  thresholdsStyle?: common.GraphThresholdsStyleConfig;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  fillOpacity: 80,\n  gradientMode: common.GraphGradientMode.None,\n  lineWidth: 1,\n};\n","import uPlot, { Padding } from 'uplot';\n\nimport {\n  DataFrame,\n  Field,\n  FieldConfigSource,\n  FieldType,\n  GrafanaTheme2,\n  cacheFieldDisplayNames,\n  formattedValueToString,\n  getDisplayProcessor,\n  getFieldColorModeForField,\n  getFieldSeriesColor,\n  outerJoinDataFrames,\n} from '@grafana/data';\nimport { decoupleHideFromState } from '@grafana/data/src/field/fieldState';\nimport {\n  AxisColorMode,\n  AxisPlacement,\n  FieldColorModeId,\n  GraphThresholdsStyleMode,\n  GraphTransform,\n  ScaleDistribution,\n  TimeZone,\n  TooltipDisplayMode,\n  VizOrientation,\n} from '@grafana/schema';\nimport {\n  FIXED_UNIT,\n  ScaleDirection,\n  ScaleOrientation,\n  StackingMode,\n  UPlotConfigBuilder,\n  measureText,\n} from '@grafana/ui';\nimport { AxisProps, UPLOT_AXIS_FONT_SIZE } from '@grafana/ui/src/components/uPlot/config/UPlotAxisBuilder';\nimport { getStackingGroups } from '@grafana/ui/src/components/uPlot/utils';\n\nimport { setClassicPaletteIdxs } from '../timeseries/utils';\n\nimport { BarsOptions, getConfig } from './bars';\nimport { FieldConfig, Options, defaultFieldConfig } from './panelcfg.gen';\n// import { isLegendOrdered } from './utils';\n\ninterface BarSeries {\n  series: DataFrame[];\n  _rest: Field[];\n  color?: Field | null;\n  warn?: string | null;\n}\n\nexport function prepSeries(\n  frames: DataFrame[],\n  fieldConfig: FieldConfigSource,\n  stacking: StackingMode,\n  theme: GrafanaTheme2,\n  xFieldName?: string,\n  colorFieldName?: string\n): BarSeries {\n  if (frames.length === 0 || frames.every((fr) => fr.length === 0)) {\n    return { series: [], _rest: [], warn: 'No data in response' };\n  }\n\n  cacheFieldDisplayNames(frames);\n  decoupleHideFromState(frames, fieldConfig);\n\n  let frame: DataFrame | undefined = { ...frames[0] };\n\n  // auto-sort and/or join on first time field (if any)\n  // TODO: should this always join on the xField (if supplied?)\n  const timeFieldIdx = frame.fields.findIndex((f) => f.type === FieldType.time);\n\n  if (timeFieldIdx >= 0 && frames.length > 1) {\n    frame = outerJoinDataFrames({ frames, keepDisplayNames: true }) ?? frame;\n  }\n\n  const xField =\n    // TODO: use matcher\n    frame.fields.find((field) => field.state?.displayName === xFieldName || field.name === xFieldName) ??\n    frame.fields.find((field) => field.type === FieldType.string) ??\n    frame.fields[timeFieldIdx];\n\n  if (xField != null) {\n    const fields: Field[] = [xField];\n    const _rest: Field[] = [];\n\n    const colorField =\n      colorFieldName == null\n        ? undefined\n        : frame.fields.find(\n            // TODO: use matcher\n            (field) => field.state?.displayName === colorFieldName || field.name === colorFieldName\n          );\n\n    frame.fields.forEach((field) => {\n      if (field !== xField) {\n        if (field.type === FieldType.number && !field.config.custom?.hideFrom?.viz) {\n          const field2 = {\n            ...field,\n            values: field.values.map((v) => (Number.isFinite(v) ? v : null)),\n            // TODO: stacking should be moved from panel opts to fieldConfig (like TimeSeries) so we dont have to do this\n            config: {\n              ...field.config,\n              custom: {\n                ...field.config.custom,\n                stacking: {\n                  group: '_',\n                  mode: stacking,\n                },\n              },\n            },\n          };\n\n          fields.push(field2);\n        } else {\n          _rest.push(field);\n        }\n      }\n    });\n\n    let warn: string | null = null;\n\n    if (fields.length === 1) {\n      warn = 'No numeric fields found';\n    }\n\n    frame.fields = fields;\n\n    const series = [frame];\n\n    setClassicPaletteIdxs(series, theme, 0);\n\n    return {\n      series,\n      _rest,\n      color: colorField,\n      warn,\n    };\n  }\n\n  return {\n    series: [],\n    _rest: [],\n    color: null,\n    warn: 'Bar charts requires a string or time field',\n  };\n}\n\nexport interface PrepConfigOpts {\n  series: DataFrame[]; // series with hideFrom.viz: false\n  totalSeries: number; // total series count (including hidden)\n  color?: Field | null;\n  orientation: VizOrientation;\n  options: Options;\n  timeZone: TimeZone;\n  theme: GrafanaTheme2;\n}\n\nexport const prepConfig = ({ series, totalSeries, color, orientation, options, timeZone, theme }: PrepConfigOpts) => {\n  let {\n    showValue,\n    groupWidth,\n    barWidth,\n    barRadius = 0,\n    stacking,\n    text,\n    tooltip,\n    xTickLabelRotation,\n    xTickLabelMaxLength,\n    xTickLabelSpacing = 0,\n    legend,\n    fullHighlight,\n  } = options;\n  // this and color is kept up to date by returned prepData()\n  let frame = series[0];\n\n  const builder = new UPlotConfigBuilder();\n\n  const formatters = frame.fields.map((f, i) => {\n    if (stacking === StackingMode.Percent) {\n      return getDisplayProcessor({\n        field: {\n          ...f,\n          config: {\n            ...f.config,\n            unit: 'percentunit',\n          },\n        },\n        theme,\n      });\n    }\n\n    return f.display!;\n  });\n\n  const formatValue = (seriesIdx: number, value: unknown) => {\n    return formattedValueToString(formatters[seriesIdx](value));\n  };\n\n  const formatShortValue = (seriesIdx: number, value: unknown) => {\n    return shortenValue(formatValue(seriesIdx, value), xTickLabelMaxLength);\n  };\n\n  // bar orientation -> x scale orientation & direction\n  const vizOrientation = getScaleOrientation(orientation);\n\n  // Use bar width when only one field\n  if (frame.fields.length === 2 && stacking === StackingMode.None) {\n    if (totalSeries === 1) {\n      groupWidth = barWidth;\n    }\n\n    barWidth = 1;\n  }\n\n  const rawValue = (seriesIdx: number, valueIdx: number) => {\n    return frame.fields[seriesIdx].values[valueIdx];\n  };\n\n  // Color by value\n  let getColor: ((seriesIdx: number, valueIdx: number) => string) | undefined = undefined;\n\n  let fillOpacity = 1;\n\n  if (color != null) {\n    const disp = color.display!;\n    fillOpacity = (color.config.custom.fillOpacity ?? 100) / 100;\n    // gradientMode? ignore?\n    getColor = (seriesIdx: number, valueIdx: number) => disp(color!.values[valueIdx]).color!;\n  } else {\n    const hasPerBarColor = frame.fields.some((f) => {\n      const fromThresholds = f.config.color?.mode === FieldColorModeId.Thresholds;\n\n      return (\n        fromThresholds ||\n        f.config.mappings?.some((m) => {\n          // ValueToText mappings have a different format, where all of them are grouped into an object keyed by value\n          if (m.type === 'value') {\n            // === MappingType.ValueToText\n            return Object.values(m.options).some((result) => result.color != null);\n          }\n          return m.options.result.color != null;\n        })\n      );\n    });\n\n    if (hasPerBarColor) {\n      // use opacity from first numeric field\n      let opacityField = frame.fields.find((f) => f.type === FieldType.number)!;\n\n      fillOpacity = (opacityField.config.custom.fillOpacity ?? 100) / 100;\n\n      getColor = (seriesIdx: number, valueIdx: number) => {\n        let field = frame.fields[seriesIdx];\n        return field.display!(field.values[valueIdx]).color!;\n      };\n    }\n  }\n\n  const opts: BarsOptions = {\n    xOri: vizOrientation.xOri,\n    xDir: vizOrientation.xDir,\n    groupWidth,\n    barWidth,\n    barRadius,\n    stacking,\n    rawValue,\n    getColor,\n    fillOpacity,\n    formatValue,\n    formatShortValue,\n    timeZone,\n    text,\n    showValue,\n    legend,\n    xSpacing: xTickLabelSpacing,\n    xTimeAuto: frame.fields[0]?.type === FieldType.time && !frame.fields[0].config.unit?.startsWith('time:'),\n    negY: frame.fields.map((f) => f.config.custom?.transform === GraphTransform.NegativeY),\n    fullHighlight,\n    hoverMulti: tooltip.mode === TooltipDisplayMode.Multi,\n  };\n\n  const config = getConfig(opts, theme);\n\n  builder.setCursor(config.cursor);\n\n  builder.addHook('init', config.init);\n  builder.addHook('drawClear', config.drawClear);\n  builder.addHook('draw', config.draw);\n\n  if (xTickLabelRotation !== 0) {\n    // these are the amount of space we already have available between plot edge and first label\n    // TODO: removing these hardcoded value requires reading back uplot instance props\n    let lftSpace = 50;\n    let btmSpace = vizOrientation.xOri === ScaleOrientation.Horizontal ? 14 : 5;\n\n    builder.setPadding(getRotationPadding(frame, xTickLabelRotation, xTickLabelMaxLength, lftSpace, btmSpace));\n  }\n\n  builder.setPrepData(config.prepData);\n\n  builder.addScale({\n    scaleKey: 'x',\n    isTime: false,\n    range: config.xRange,\n    distribution: ScaleDistribution.Ordinal,\n    orientation: vizOrientation.xOri,\n    direction: vizOrientation.xDir,\n  });\n\n  const xFieldAxisPlacement =\n    frame.fields[0]?.config.custom?.axisPlacement !== AxisPlacement.Hidden\n      ? vizOrientation.xOri === ScaleOrientation.Horizontal\n        ? AxisPlacement.Bottom\n        : AxisPlacement.Left\n      : AxisPlacement.Hidden;\n  const xFieldAxisShow = frame.fields[0]?.config.custom?.axisPlacement !== AxisPlacement.Hidden;\n\n  builder.addAxis({\n    scaleKey: 'x',\n    isTime: false,\n    placement: xFieldAxisPlacement,\n    label: frame.fields[0]?.config.custom?.axisLabel,\n    splits: config.xSplits,\n    filter: vizOrientation.xOri === 0 ? config.hFilter : undefined,\n    values: config.xValues,\n    timeZone,\n    grid: { show: false },\n    ticks: { show: false },\n    gap: 15,\n    tickLabelRotation: vizOrientation.xOri === 0 ? xTickLabelRotation * -1 : 0,\n    theme,\n    show: xFieldAxisShow,\n  });\n\n  // let seriesIndex = 0;\n  // const legendOrdered = isLegendOrdered(legend);\n\n  // iterate the y values\n  for (let i = 1; i < frame.fields.length; i++) {\n    const field = frame.fields[i];\n\n    // seriesIndex++;\n\n    const customConfig: FieldConfig = { ...defaultFieldConfig, ...field.config.custom };\n\n    const scaleKey = field.config.unit || FIXED_UNIT;\n    const colorMode = getFieldColorModeForField(field);\n    const scaleColor = getFieldSeriesColor(field, theme);\n    const seriesColor = scaleColor.color;\n\n    // make barcharts start at 0 unless explicitly overridden\n    let softMin = customConfig.axisSoftMin;\n    let softMax = customConfig.axisSoftMax;\n\n    if (softMin == null && field.config.min == null) {\n      softMin = 0;\n    }\n\n    if (softMax == null && field.config.max == null) {\n      softMax = 0;\n    }\n\n    // Render thresholds in graph\n    if (customConfig.thresholdsStyle && field.config.thresholds) {\n      const thresholdDisplay = customConfig.thresholdsStyle.mode ?? GraphThresholdsStyleMode.Off;\n      if (thresholdDisplay !== GraphThresholdsStyleMode.Off) {\n        builder.addThresholds({\n          config: customConfig.thresholdsStyle,\n          thresholds: field.config.thresholds,\n          scaleKey,\n          theme,\n          hardMin: field.config.min,\n          hardMax: field.config.max,\n          softMin: customConfig.axisSoftMin,\n          softMax: customConfig.axisSoftMax,\n        });\n      }\n    }\n\n    builder.addSeries({\n      scaleKey,\n      pxAlign: true,\n      lineWidth: customConfig.lineWidth,\n      lineColor: seriesColor,\n      fillOpacity: customConfig.fillOpacity,\n      theme,\n      colorMode,\n      pathBuilder: config.barsBuilder,\n      show: !customConfig.hideFrom?.viz,\n      gradientMode: customConfig.gradientMode,\n      thresholds: field.config.thresholds,\n      hardMin: field.config.min,\n      hardMax: field.config.max,\n      softMin: customConfig.axisSoftMin,\n      softMax: customConfig.axisSoftMax,\n\n      // The following properties are not used in the uPlot config, but are utilized as transport for legend config\n      // PlotLegend currently gets unfiltered DataFrame[], so index must be into that field array, not the prepped frame's which we're iterating here\n      // dataFrameFieldIndex: {\n      //   fieldIndex: legendOrdered\n      //     ? i\n      //     : allFrames[0].fields.findIndex(\n      //         (f) => f.type === FieldType.number && f.state?.seriesIndex === seriesIndex - 1\n      //       ),\n      //   frameIndex: 0,\n      // },\n    });\n\n    // The builder will manage unique scaleKeys and combine where appropriate\n    builder.addScale({\n      scaleKey,\n      min: field.config.min,\n      max: field.config.max,\n      softMin,\n      softMax,\n      centeredZero: customConfig.axisCenteredZero,\n      orientation: vizOrientation.yOri,\n      direction: vizOrientation.yDir,\n      distribution: customConfig.scaleDistribution?.type,\n      log: customConfig.scaleDistribution?.log,\n    });\n\n    if (customConfig.axisPlacement !== AxisPlacement.Hidden) {\n      let placement = customConfig.axisPlacement;\n      if (!placement || placement === AxisPlacement.Auto) {\n        placement = AxisPlacement.Left;\n      }\n      if (vizOrientation.xOri === 1) {\n        if (placement === AxisPlacement.Left) {\n          placement = AxisPlacement.Bottom;\n        }\n        if (placement === AxisPlacement.Right) {\n          placement = AxisPlacement.Top;\n        }\n      }\n\n      let axisOpts: AxisProps = {\n        scaleKey,\n        label: customConfig.axisLabel,\n        size: customConfig.axisWidth,\n        placement,\n        formatValue: (v, decimals) => formattedValueToString(field.display!(v, decimals)),\n        filter: vizOrientation.yOri === 0 ? config.hFilter : undefined,\n        tickLabelRotation: vizOrientation.xOri === 1 ? xTickLabelRotation * -1 : 0,\n        theme,\n        grid: { show: customConfig.axisGridShow },\n      };\n\n      if (customConfig.axisBorderShow) {\n        axisOpts.border = {\n          show: true,\n        };\n      }\n\n      if (customConfig.axisColorMode === AxisColorMode.Series) {\n        axisOpts.color = seriesColor;\n      }\n\n      builder.addAxis(axisOpts);\n    }\n  }\n\n  let stackingGroups = getStackingGroups(frame);\n\n  builder.setStackingGroups(stackingGroups);\n\n  return {\n    builder,\n    prepData: (_series: DataFrame[], _color?: Field | null) => {\n      series = _series;\n      frame = series[0];\n      color = _color;\n\n      return builder.prepData!(series);\n    },\n  };\n};\n\nfunction shortenValue(value: string, length: number) {\n  if (value.length > length) {\n    return value.substring(0, length).concat('...');\n  } else {\n    return value;\n  }\n}\n\nfunction getRotationPadding(\n  frame: DataFrame,\n  rotateLabel: number,\n  valueMaxLength: number,\n  lftSpace = 0,\n  btmSpace = 0\n): Padding {\n  const values = frame.fields[0].values;\n  const fontSize = UPLOT_AXIS_FONT_SIZE;\n  const displayProcessor = frame.fields[0].display;\n  const getProcessedValue = (i: number) => {\n    return displayProcessor ? displayProcessor(values[i]) : values[i];\n  };\n  let maxLength = 0;\n  for (let i = 0; i < values.length; i++) {\n    let size = measureText(shortenValue(formattedValueToString(getProcessedValue(i)), valueMaxLength), fontSize);\n    maxLength = size.width > maxLength ? size.width : maxLength;\n  }\n\n  // Add padding to the right if the labels are rotated in a way that makes the last label extend outside the graph.\n  const paddingRight =\n    rotateLabel > 0\n      ? Math.cos((rotateLabel * Math.PI) / 180) *\n        measureText(\n          shortenValue(formattedValueToString(getProcessedValue(values.length - 1)), valueMaxLength),\n          fontSize\n        ).width\n      : 0;\n\n  // Add padding to the left if the labels are rotated in a way that makes the first label extend outside the graph.\n  const paddingLeft =\n    rotateLabel < 0\n      ? Math.cos((rotateLabel * -1 * Math.PI) / 180) *\n        measureText(shortenValue(formattedValueToString(getProcessedValue(0)), valueMaxLength), fontSize).width\n      : 0;\n\n  // Add padding to the bottom to avoid clipping the rotated labels.\n  const paddingBottom =\n    Math.sin(((rotateLabel >= 0 ? rotateLabel : rotateLabel * -1) * Math.PI) / 180) * maxLength - btmSpace;\n\n  return [\n    Math.round(UPLOT_AXIS_FONT_SIZE * uPlot.pxRatio),\n    paddingRight,\n    paddingBottom,\n    Math.max(0, paddingLeft - lftSpace),\n  ];\n}\n\nfunction getScaleOrientation(orientation: VizOrientation) {\n  if (orientation === VizOrientation.Vertical) {\n    return {\n      xOri: ScaleOrientation.Horizontal,\n      xDir: ScaleDirection.Right,\n      yOri: ScaleOrientation.Vertical,\n      yDir: ScaleDirection.Up,\n    };\n  }\n\n  return {\n    xOri: ScaleOrientation.Vertical,\n    xDir: ScaleDirection.Down,\n    yOri: ScaleOrientation.Horizontal,\n    yDir: ScaleDirection.Right,\n  };\n}\n","import { useMemo } from 'react';\n\nimport { PanelProps, VizOrientation } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport {\n  TooltipDisplayMode,\n  TooltipPlugin2,\n  UPLOT_AXIS_FONT_SIZE,\n  UPlotChart,\n  VizLayout,\n  measureText,\n  // usePanelContext,\n  useTheme2,\n} from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\n\nimport { TimeSeriesTooltip } from '../timeseries/TimeSeriesTooltip';\n\nimport { BarChartLegend, hasVisibleLegendSeries } from './BarChartLegend';\nimport { Options } from './panelcfg.gen';\nimport { prepConfig, prepSeries } from './utils';\n\nconst charWidth = measureText('M', UPLOT_AXIS_FONT_SIZE).width;\nconst toRads = Math.PI / 180;\n\nexport const BarChartPanel = (props: PanelProps<Options>) => {\n  const { data, options, fieldConfig, width, height, timeZone, id, replaceVariables } = props;\n\n  // will need this if joining on time to re-create data links\n  // const { dataLinkPostProcessor } = usePanelContext();\n\n  const theme = useTheme2();\n\n  const {\n    barWidth,\n    barRadius = 0,\n    showValue,\n    groupWidth,\n    stacking,\n    legend,\n    tooltip,\n    text,\n    xTickLabelRotation,\n    xTickLabelSpacing,\n    fullHighlight,\n    xField,\n    colorByField,\n  } = options;\n\n  // size-dependent, calculated opts that should cause viz re-config\n  let { orientation, xTickLabelMaxLength = 0 } = options;\n\n  orientation =\n    orientation === VizOrientation.Auto\n      ? width < height\n        ? VizOrientation.Horizontal\n        : VizOrientation.Vertical\n      : orientation;\n\n  // TODO: this can be moved into axis calc internally, no need to re-config based on this\n  // should be based on vizHeight, not full height?\n  xTickLabelMaxLength =\n    xTickLabelRotation === 0\n      ? Infinity // should this calc using spacing between groups?\n      : xTickLabelMaxLength ||\n        // auto max length clamps to half viz height, subracts 3 chars for ... ellipsis\n        Math.floor(height / 2 / Math.sin(Math.abs(xTickLabelRotation * toRads)) / charWidth - 3);\n\n  // TODO: config data links\n  const info = useMemo(\n    () => prepSeries(data.series, fieldConfig, stacking, theme, xField, colorByField),\n    [data.series, fieldConfig, stacking, theme, xField, colorByField]\n  );\n\n  const vizSeries = useMemo(\n    () =>\n      info.series.map((frame) => ({\n        ...frame,\n        fields: frame.fields.filter((field, i) => i === 0 || !field.state?.hideFrom?.viz),\n      })),\n    [info.series]\n  );\n\n  const xGroupsCount = vizSeries[0]?.length ?? 0;\n  const seriesCount = vizSeries[0]?.fields.length ?? 0;\n  const totalSeries = Math.max(0, (info.series[0]?.fields.length ?? 0) - 1);\n\n  let { builder, prepData } = useMemo(\n    () => {\n      return xGroupsCount === 0\n        ? { builder: null, prepData: null }\n        : prepConfig({ series: vizSeries, totalSeries, color: info.color, orientation, options, timeZone, theme });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      orientation,\n      timeZone,\n      props.data.structureRev,\n\n      totalSeries,\n      seriesCount,\n      xGroupsCount,\n\n      barWidth,\n      barRadius,\n      showValue,\n      groupWidth,\n      stacking,\n      legend,\n      tooltip,\n      text?.valueSize, // cause text obj is re-created each time?\n      xTickLabelRotation,\n      xTickLabelSpacing,\n      fullHighlight,\n      xField,\n      colorByField,\n      xTickLabelMaxLength, // maybe not?\n      // props.fieldConfig, // usePrevious hideFrom on all fields?\n    ]\n  );\n\n  const plotData = useMemo(\n    () => (prepData == null ? [] : prepData(vizSeries, info.color)),\n    [prepData, vizSeries, info.color]\n  );\n\n  if (info.warn != null || builder == null) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        message={info.warn ?? ''}\n        needsNumberField={true}\n      />\n    );\n  }\n\n  const legendComp =\n    legend.showLegend && hasVisibleLegendSeries(builder, info.series!) ? (\n      <BarChartLegend data={info.series!} colorField={info.color} {...legend} />\n    ) : null;\n\n  return (\n    <VizLayout\n      width={props.width}\n      height={props.height}\n      // legend={<BarChartLegend frame={info.series![0]} colorField={info.color} {...legend} />}\n      legend={legendComp}\n    >\n      {(vizWidth, vizHeight) => (\n        <UPlotChart config={builder!} data={plotData} width={vizWidth} height={vizHeight}>\n          {props.options.tooltip.mode !== TooltipDisplayMode.None && (\n            <TooltipPlugin2\n              config={builder}\n              maxWidth={options.tooltip.maxWidth}\n              hoverMode={\n                options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n              }\n              render={(u, dataIdxs, seriesIdx, isPinned, dismiss, timeRange2) => {\n                return (\n                  <TimeSeriesTooltip\n                    series={vizSeries[0]}\n                    _rest={info._rest}\n                    dataIdxs={dataIdxs}\n                    seriesIdx={seriesIdx}\n                    mode={options.tooltip.mode}\n                    sortOrder={options.tooltip.sort}\n                    isPinned={isPinned}\n                    maxHeight={options.tooltip.maxHeight}\n                    replaceVariables={replaceVariables}\n                  />\n                );\n              }}\n            />\n          )}\n        </UPlotChart>\n      )}\n    </VizLayout>\n  );\n};\n","import { SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { Checkbox, HorizontalGroup, RadioButtonGroup, Tooltip } from '@grafana/ui';\n\nconst GAPS_OPTIONS: Array<SelectableValue<number>> = [\n  {\n    label: 'None',\n    value: 0,\n    description: 'Show all tick marks',\n  },\n  {\n    label: 'Small',\n    value: 100,\n    description: 'Require 100px spacing',\n  },\n  {\n    label: 'Medium',\n    value: 200,\n    description: 'Require 200px spacing',\n  },\n  {\n    label: 'Large',\n    value: 300,\n    description: 'Require 300px spacing',\n  },\n];\n\nexport const TickSpacingEditor = (props: StandardEditorProps<number>) => {\n  let value = props.value ?? 0;\n  const isRTL = value < 0;\n  if (isRTL) {\n    value *= -1;\n  }\n  let gap = GAPS_OPTIONS[0];\n  for (const v of GAPS_OPTIONS) {\n    gap = v;\n    if (value <= gap.value!) {\n      break;\n    }\n  }\n\n  const onSpacingChange = (val: number) => {\n    props.onChange(val * (isRTL ? -1 : 1));\n  };\n\n  const onRTLChange = () => {\n    props.onChange(props.value * -1);\n  };\n\n  return (\n    <HorizontalGroup>\n      <RadioButtonGroup value={gap.value} options={GAPS_OPTIONS} onChange={onSpacingChange} />\n      {value !== 0 && (\n        <Tooltip content=\"Require space from the right side\" placement=\"top\">\n          <div>\n            <Checkbox value={isRTL} onChange={onRTLChange} label=\"RTL\" />\n          </div>\n        </Tooltip>\n      )}\n    </HorizontalGroup>\n  );\n};\n","import { FieldMatcherID, PanelTypeChangedHandler, ReducerID } from '@grafana/data';\nimport { AxisPlacement } from '@grafana/ui';\n\n/*\n * This is called when the panel changes from another panel\n */\nexport const changeToBarChartPanelMigrationHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions) => {\n  if (prevPluginId === 'graph') {\n    const graphOptions: GraphOptions = prevOptions.angular;\n\n    const fieldConfig = panel.fieldConfig ?? { defaults: {}, overrides: [] };\n\n    if (graphOptions.xaxis?.mode === 'series') {\n      const transformations = panel.transformations || [];\n      transformations.push(\n        {\n          id: 'reduce',\n          options: {\n            reducers: getReducer(graphOptions.xaxis?.values),\n          },\n        },\n        {\n          id: 'transpose',\n          options: {},\n        }\n      );\n\n      panel.transformations = transformations;\n\n      // temporary, until we have a bar chart with per bar labels\n      fieldConfig.overrides.push({\n        matcher: {\n          id: FieldMatcherID.byName,\n          options: 'Field',\n        },\n        properties: [\n          {\n            id: 'custom.axisPlacement',\n            value: AxisPlacement.Hidden,\n          },\n        ],\n      });\n\n      panel.fieldConfig = fieldConfig;\n      panel.options = {\n        ...panel.options,\n        groupWidth: 1,\n      };\n    }\n  }\n\n  return {};\n};\n\n// same as grafana-ui/src/components/SingleStatShared/SingleStatBaseOptions.ts\nconst getReducer = (reducers: string[] | undefined) => {\n  const transformReducers: string[] = [];\n\n  reducers?.forEach((reducer) => {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    if (!Object.values(ReducerID).includes(reducer as ReducerID)) {\n      if (reducer === 'current') {\n        transformReducers.push(ReducerID.lastNotNull);\n      } else if (reducer === 'total') {\n        transformReducers.push(ReducerID.sum);\n      } else if (reducer === 'avg') {\n        transformReducers.push(ReducerID.mean);\n      }\n    } else {\n      transformReducers.push(reducer);\n    }\n  });\n\n  return reducers ? transformReducers : [ReducerID.sum];\n};\n\ninterface GraphOptions {\n  xaxis: {\n    mode: 'series' | 'time' | 'histogram';\n    values?: string[];\n  };\n}\n","import { VisualizationSuggestionsBuilder, VizOrientation } from '@grafana/data';\nimport { LegendDisplayMode, StackingMode, VisibilityMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { FieldConfig, Options } from './panelcfg.gen';\n\nexport class BarChartSuggestionsSupplier {\n  getListWithDefaults(builder: VisualizationSuggestionsBuilder) {\n    return builder.getListAppender<Options, FieldConfig>({\n      name: SuggestionName.BarChart,\n      pluginId: 'barchart',\n      options: {\n        showValue: VisibilityMode.Never,\n        legend: {\n          calcs: [],\n          displayMode: LegendDisplayMode.List,\n          showLegend: true,\n          placement: 'right',\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          unit: 'short',\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          s.options!.barWidth = 0.8;\n        },\n      },\n    });\n  }\n\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const list = this.getListWithDefaults(builder);\n    const { dataSummary } = builder;\n\n    if (dataSummary.frameCount !== 1) {\n      return;\n    }\n\n    if (!dataSummary.hasNumberField || !dataSummary.hasStringField) {\n      return;\n    }\n\n    // if you have this many rows barchart might not be a good fit\n    if (dataSummary.rowCountTotal > 50) {\n      return;\n    }\n\n    // Vertical bars\n    list.append({\n      name: SuggestionName.BarChart,\n    });\n\n    if (dataSummary.numberFieldCount > 1) {\n      list.append({\n        name: SuggestionName.BarChartStacked,\n        options: {\n          stacking: StackingMode.Normal,\n        },\n      });\n      list.append({\n        name: SuggestionName.BarChartStackedPercent,\n        options: {\n          stacking: StackingMode.Percent,\n        },\n      });\n    }\n\n    // horizontal bars\n    list.append({\n      name: SuggestionName.BarChartHorizontal,\n      options: {\n        orientation: VizOrientation.Horizontal,\n      },\n    });\n\n    if (dataSummary.numberFieldCount > 1) {\n      list.append({\n        name: SuggestionName.BarChartHorizontalStacked,\n        options: {\n          stacking: StackingMode.Normal,\n          orientation: VizOrientation.Horizontal,\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarChartHorizontalStackedPercent,\n        options: {\n          orientation: VizOrientation.Horizontal,\n          stacking: StackingMode.Percent,\n        },\n      });\n    }\n  }\n}\n","import {\n  DataFrame,\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  PanelPlugin,\n  VizOrientation,\n} from '@grafana/data';\nimport { GraphTransform, GraphThresholdsStyleMode, StackingMode, VisibilityMode } from '@grafana/schema';\nimport { graphFieldOptions, commonOptionsBuilder } from '@grafana/ui';\n\nimport { ThresholdsStyleEditor } from '../timeseries/ThresholdsStyleEditor';\n\nimport { BarChartPanel } from './BarChartPanel';\nimport { TickSpacingEditor } from './TickSpacingEditor';\nimport { changeToBarChartPanelMigrationHandler } from './migrations';\nimport { FieldConfig, Options, defaultFieldConfig, defaultOptions } from './panelcfg.gen';\nimport { BarChartSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(BarChartPanel)\n  .setPanelChangeHandler(changeToBarChartPanelMigrationHandler)\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      const cfg = defaultFieldConfig;\n\n      builder\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: cfg.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        })\n        .addRadio({\n          path: 'gradientMode',\n          name: 'Gradient mode',\n          defaultValue: graphFieldOptions.fillGradient[0].value,\n          settings: {\n            options: graphFieldOptions.fillGradient,\n          },\n        });\n\n      builder.addSelect({\n        category: ['Graph styles'],\n        name: 'Transform',\n        path: 'transform',\n        settings: {\n          options: [\n            {\n              label: 'Constant',\n              value: GraphTransform.Constant,\n              description: 'The first value will be shown as a constant line',\n            },\n            {\n              label: 'Negative Y',\n              value: GraphTransform.NegativeY,\n              description: 'Flip the results to negative values on the y axis',\n            },\n          ],\n          isClearable: true,\n        },\n        hideFromDefaults: true,\n      });\n\n      builder.addCustomEditor({\n        id: 'thresholdsStyle',\n        path: 'thresholdsStyle',\n        name: 'Show thresholds',\n        category: ['Thresholds'],\n        defaultValue: { mode: GraphThresholdsStyleMode.Off },\n        settings: {\n          options: graphFieldOptions.thresholdsDisplayModes,\n        },\n        editor: ThresholdsStyleEditor,\n        override: ThresholdsStyleEditor,\n        process: identityOverrideProcessor,\n        shouldApply: () => true,\n      });\n\n      commonOptionsBuilder.addAxisConfig(builder, cfg, false);\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder\n      .addFieldNamePicker({\n        path: 'xField',\n        name: 'X Axis',\n        settings: {\n          placeholderText: 'First string or time field',\n        },\n      })\n      .addRadio({\n        path: 'orientation',\n        name: 'Orientation',\n        settings: {\n          options: [\n            { value: VizOrientation.Auto, label: 'Auto' },\n            { value: VizOrientation.Horizontal, label: 'Horizontal' },\n            { value: VizOrientation.Vertical, label: 'Vertical' },\n          ],\n        },\n        defaultValue: defaultOptions.orientation,\n      })\n      .addSliderInput({\n        path: 'xTickLabelRotation',\n        name: 'Rotate x-axis tick labels',\n        defaultValue: defaultOptions.xTickLabelRotation,\n        settings: {\n          min: -90,\n          max: 90,\n          step: 15,\n          marks: { '-90': '-90°', '-45': '-45°', 0: '0°', 45: '45°', 90: '90°' },\n          included: false,\n        },\n      })\n      .addNumberInput({\n        path: 'xTickLabelMaxLength',\n        name: 'X-axis tick label max length',\n        description: 'X-axis labels will be truncated to the length provided',\n        settings: {\n          placeholder: 'None',\n          min: 0,\n        },\n        showIf: (opts) => opts.xTickLabelRotation !== 0,\n      })\n      .addCustomEditor({\n        id: 'xTickLabelSpacing',\n        path: 'xTickLabelSpacing',\n        name: 'X-axis labels minimum spacing',\n        defaultValue: defaultOptions.xTickLabelSpacing,\n        editor: TickSpacingEditor,\n      })\n      .addRadio({\n        path: 'showValue',\n        name: 'Show values',\n        settings: {\n          options: [\n            { value: VisibilityMode.Auto, label: 'Auto' },\n            { value: VisibilityMode.Always, label: 'Always' },\n            { value: VisibilityMode.Never, label: 'Never' },\n          ],\n        },\n        defaultValue: defaultOptions.showValue,\n      })\n      .addRadio({\n        path: 'stacking',\n        name: 'Stacking',\n        settings: {\n          options: graphFieldOptions.stacking,\n        },\n        defaultValue: defaultOptions.stacking,\n      })\n      .addSliderInput({\n        path: 'groupWidth',\n        name: 'Group width',\n        defaultValue: defaultOptions.groupWidth,\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n        showIf: (c, data) => {\n          if (c.stacking && c.stacking !== StackingMode.None) {\n            return false;\n          }\n          return countNumberFields(data) !== 1;\n        },\n      })\n      .addSliderInput({\n        path: 'barWidth',\n        name: 'Bar width',\n        defaultValue: defaultOptions.barWidth,\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n      })\n      .addSliderInput({\n        path: 'barRadius',\n        name: 'Bar radius',\n        defaultValue: defaultOptions.barRadius,\n        settings: {\n          min: 0,\n          max: 0.5,\n          step: 0.05,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'fullHighlight',\n        name: 'Highlight full area on hover',\n        defaultValue: defaultOptions.fullHighlight,\n        showIf: (c) => c.stacking === StackingMode.None,\n      });\n\n    builder.addFieldNamePicker({\n      path: 'colorByField',\n      name: 'Color by field',\n      description: 'Use the color value for a sibling field to color each bar value.',\n    });\n\n    commonOptionsBuilder.addTooltipOptions(builder);\n    commonOptionsBuilder.addLegendOptions(builder);\n    commonOptionsBuilder.addTextSizeOptions(builder, false);\n  })\n  .setSuggestionsSupplier(new BarChartSuggestionsSupplier());\n\nfunction countNumberFields(data?: DataFrame[]): number {\n  let count = 0;\n  if (data) {\n    for (const frame of data) {\n      for (const field of frame.fields) {\n        if (field.type === FieldType.number) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport enum HorizontalConstraint {\n  Center = 'center',\n  Left = 'left',\n  LeftRight = 'leftright',\n  Right = 'right',\n  Scale = 'scale',\n}\n\nexport enum VerticalConstraint {\n  Bottom = 'bottom',\n  Center = 'center',\n  Scale = 'scale',\n  Top = 'top',\n  TopBottom = 'topbottom',\n}\n\nexport interface Constraint {\n  horizontal?: HorizontalConstraint;\n  vertical?: VerticalConstraint;\n}\n\nexport interface Placement {\n  bottom?: number;\n  height?: number;\n  left?: number;\n  right?: number;\n  rotation?: number;\n  top?: number;\n  width?: number;\n}\n\nexport enum BackgroundImageSize {\n  Contain = 'contain',\n  Cover = 'cover',\n  Fill = 'fill',\n  Original = 'original',\n  Tile = 'tile',\n}\n\nexport interface BackgroundConfig {\n  color?: ui.ColorDimensionConfig;\n  image?: ui.ResourceDimensionConfig;\n  size?: BackgroundImageSize;\n}\n\nexport interface LineConfig {\n  color?: ui.ColorDimensionConfig;\n  radius?: number;\n  width?: number;\n}\n\nexport enum HttpRequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n}\n\nexport interface ConnectionCoordinates {\n  x: number;\n  y: number;\n}\n\nexport enum ConnectionPath {\n  Straight = 'straight',\n}\n\nexport interface CanvasConnection {\n  color?: ui.ColorDimensionConfig;\n  path: ConnectionPath;\n  size?: ui.ScaleDimensionConfig;\n  source: ConnectionCoordinates;\n  sourceOriginal?: ConnectionCoordinates;\n  target: ConnectionCoordinates;\n  targetName?: string;\n  targetOriginal?: ConnectionCoordinates;\n  vertices?: Array<ConnectionCoordinates>;\n}\n\nexport const defaultCanvasConnection: Partial<CanvasConnection> = {\n  vertices: [],\n};\n\nexport interface CanvasElementOptions {\n  background?: BackgroundConfig;\n  border?: LineConfig;\n  /**\n   * TODO: figure out how to define this (element config(s))\n   */\n  config?: unknown;\n  connections?: Array<CanvasConnection>;\n  constraint?: Constraint;\n  name: string;\n  placement?: Placement;\n  type: string;\n}\n\nexport const defaultCanvasElementOptions: Partial<CanvasElementOptions> = {\n  connections: [],\n};\n\nexport interface Options {\n  /**\n   * Enable infinite pan\n   */\n  infinitePan: boolean;\n  /**\n   * Enable inline editing\n   */\n  inlineEditing: boolean;\n  /**\n   * Enable pan and zoom\n   */\n  panZoom: boolean;\n  /**\n   * The root element of canvas (frame), where all canvas elements are nested\n   * TODO: Figure out how to define a default value for this\n   */\n  root: {\n    /**\n     * Name of the root element\n     */\n    name: string;\n    /**\n     * Type of root element (frame)\n     */\n    type: 'frame';\n    /**\n     * The list of canvas elements attached to the root element\n     */\n    elements: Array<CanvasElementOptions>;\n  };\n  /**\n   * Show all available element types\n   */\n  showAdvancedTypes: boolean;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  infinitePan: true,\n  inlineEditing: true,\n  panZoom: true,\n  showAdvancedTypes: true,\n};\n","import { ActionModel, Field, InterpolateFunction, LinkModel } from '@grafana/data';\nimport { DataFrame } from '@grafana/data/';\nimport { config } from '@grafana/runtime';\nimport { getActions } from 'app/features/actions/utils';\n\nexport const getDataLinks = (field: Field, rowIdx: number) => {\n  const links: Array<LinkModel<Field>> = [];\n\n  if ((field.config.links?.length ?? 0) > 0 && field.getLinks != null) {\n    const v = field.values[rowIdx];\n    const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n    const linkLookup = new Set<string>();\n\n    field.getLinks({ calculatedValue: disp, valueRowIndex: rowIdx }).forEach((link) => {\n      const key = `${link.title}/${link.href}`;\n      if (!linkLookup.has(key)) {\n        links.push(link);\n        linkLookup.add(key);\n      }\n    });\n  }\n\n  return links;\n};\n\nexport const getFieldActions = (\n  dataFrame: DataFrame,\n  field: Field,\n  replaceVars: InterpolateFunction,\n  rowIndex: number\n) => {\n  if (!config.featureToggles?.vizActions) {\n    return [];\n  }\n\n  const actions: Array<ActionModel<Field>> = [];\n  const actionLookup = new Set<string>();\n\n  const actionsModel = getActions(dataFrame, field, field.state!.scopedVars!, replaceVars, field.config.actions ?? [], {\n    valueRowIndex: rowIndex,\n  });\n\n  actionsModel.forEach((action) => {\n    const key = `${action.title}`;\n    if (!actionLookup.has(key)) {\n      actions.push(action);\n      actionLookup.add(key);\n    }\n  });\n\n  return actions;\n};\n","import { ReactNode } from 'react';\n\nimport { DataFrame, Field, FieldType, formattedValueToString, InterpolateFunction } from '@grafana/data';\nimport { SortOrder, TooltipDisplayMode } from '@grafana/schema/dist/esm/common/common.gen';\nimport { VizTooltipContent } from '@grafana/ui/src/components/VizTooltip/VizTooltipContent';\nimport { VizTooltipFooter } from '@grafana/ui/src/components/VizTooltip/VizTooltipFooter';\nimport { VizTooltipHeader } from '@grafana/ui/src/components/VizTooltip/VizTooltipHeader';\nimport { VizTooltipWrapper } from '@grafana/ui/src/components/VizTooltip/VizTooltipWrapper';\nimport { VizTooltipItem } from '@grafana/ui/src/components/VizTooltip/types';\nimport { getContentItems } from '@grafana/ui/src/components/VizTooltip/utils';\n\nimport { getDataLinks, getFieldActions } from '../status-history/utils';\nimport { fmt } from '../xychart/utils';\n\nimport { isTooltipScrollable } from './utils';\n\n// exemplar / annotation / time region hovering?\n// add annotation UI / alert dismiss UI?\n\nexport interface TimeSeriesTooltipProps {\n  // aligned series frame\n  series: DataFrame;\n\n  // aligned fields that are not series\n  _rest?: Field[];\n\n  // hovered points\n  dataIdxs: Array<number | null>;\n  // closest/hovered series\n  seriesIdx?: number | null;\n  mode?: TooltipDisplayMode;\n  sortOrder?: SortOrder;\n\n  isPinned: boolean;\n\n  annotate?: () => void;\n  maxHeight?: number;\n\n  replaceVariables?: InterpolateFunction;\n}\n\nexport const TimeSeriesTooltip = ({\n  series,\n  _rest,\n  dataIdxs,\n  seriesIdx,\n  mode = TooltipDisplayMode.Single,\n  sortOrder = SortOrder.None,\n  isPinned,\n  annotate,\n  maxHeight,\n  replaceVariables,\n}: TimeSeriesTooltipProps) => {\n  const xField = series.fields[0];\n  const xVal = formattedValueToString(xField.display!(xField.values[dataIdxs[0]!]));\n\n  const contentItems = getContentItems(\n    series.fields,\n    xField,\n    dataIdxs,\n    seriesIdx,\n    mode,\n    sortOrder,\n    (field) => field.type === FieldType.number || field.type === FieldType.enum\n  );\n\n  _rest?.forEach((field) => {\n    if (!field.config.custom?.hideFrom?.tooltip) {\n      contentItems.push({\n        label: field.state?.displayName ?? field.name,\n        value: fmt(field, field.values[dataIdxs[0]!]),\n      });\n    }\n  });\n\n  let footer: ReactNode;\n\n  if (isPinned && seriesIdx != null) {\n    const field = series.fields[seriesIdx];\n    const dataIdx = dataIdxs[seriesIdx]!;\n    const links = getDataLinks(field, dataIdx);\n    const actions = getFieldActions(series, field, replaceVariables!, dataIdx);\n\n    footer = <VizTooltipFooter dataLinks={links} actions={actions} annotate={annotate} />;\n  }\n\n  const headerItem: VizTooltipItem | null = xField.config.custom?.hideFrom?.tooltip\n    ? null\n    : {\n        label: xField.type === FieldType.time ? '' : (xField.state?.displayName ?? xField.name),\n        value: xVal,\n      };\n\n  return (\n    <VizTooltipWrapper>\n      {headerItem != null && <VizTooltipHeader item={headerItem} isPinned={isPinned} />}\n      <VizTooltipContent\n        items={contentItems}\n        isPinned={isPinned}\n        scrollable={isTooltipScrollable({ mode, maxHeight })}\n        maxHeight={maxHeight}\n      />\n      {footer}\n    </VizTooltipWrapper>\n  );\n};\n","import {\n  DataFrame,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  isBooleanUnit,\n  TimeRange,\n  cacheFieldDisplayNames,\n} from '@grafana/data';\nimport { convertFieldType } from '@grafana/data/src/transformations/transformers/convertFieldType';\nimport { applyNullInsertThreshold } from '@grafana/data/src/transformations/transformers/nulls/nullInsertThreshold';\nimport { nullToValue } from '@grafana/data/src/transformations/transformers/nulls/nullToValue';\nimport { GraphFieldConfig, LineInterpolation, TooltipDisplayMode, VizTooltipOptions } from '@grafana/schema';\nimport { buildScaleKey } from '@grafana/ui/src/components/uPlot/internal';\n\nimport { HeatmapTooltip } from '../heatmap/panelcfg.gen';\n\ntype ScaleKey = string;\n\n// this will re-enumerate all enum fields on the same scale to create one ordinal progression\n// e.g. ['a','b'][0,1,0] + ['c','d'][1,0,1] -> ['a','b'][0,1,0] + ['c','d'][3,2,3]\nfunction reEnumFields(frames: DataFrame[]): DataFrame[] {\n  let allTextsByKey: Map<ScaleKey, string[]> = new Map();\n\n  let frames2: DataFrame[] = frames.map((frame) => {\n    return {\n      ...frame,\n      fields: frame.fields.map((field) => {\n        if (field.type === FieldType.enum) {\n          let scaleKey = buildScaleKey(field.config, field.type);\n          let allTexts = allTextsByKey.get(scaleKey);\n\n          if (!allTexts) {\n            allTexts = [];\n            allTextsByKey.set(scaleKey, allTexts);\n          }\n\n          let idxs: number[] = field.values.toArray().slice();\n          let txts = field.config.type!.enum!.text!;\n\n          // by-reference incrementing\n          if (allTexts.length > 0) {\n            for (let i = 0; i < idxs.length; i++) {\n              idxs[i] += allTexts.length;\n            }\n          }\n\n          allTexts.push(...txts);\n\n          // shared among all enum fields on same scale\n          field.config.type!.enum!.text! = allTexts;\n\n          return {\n            ...field,\n            values: idxs,\n          };\n\n          // TODO: update displayProcessor?\n        }\n\n        return field;\n      }),\n    };\n  });\n\n  return frames2;\n}\n\n/**\n * Returns null if there are no graphable fields\n */\nexport function prepareGraphableFields(\n  series: DataFrame[],\n  theme: GrafanaTheme2,\n  timeRange?: TimeRange,\n  // numeric X requires a single frame where the first field is numeric\n  xNumFieldIdx?: number\n): DataFrame[] | null {\n  if (!series?.length) {\n    return null;\n  }\n\n  cacheFieldDisplayNames(series);\n\n  let useNumericX = xNumFieldIdx != null;\n\n  // Make sure the numeric x field is first in the frame\n  if (xNumFieldIdx != null && xNumFieldIdx > 0) {\n    series = [\n      {\n        ...series[0],\n        fields: [series[0].fields[xNumFieldIdx], ...series[0].fields.filter((f, i) => i !== xNumFieldIdx)],\n      },\n    ];\n  }\n\n  // some datasources simply tag the field as time, but don't convert to milli epochs\n  // so we're stuck with doing the parsing here to avoid Moment slowness everywhere later\n  // this mutates (once)\n  for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.time && typeof field.values[0] !== 'number') {\n        field.values = convertFieldType(field, { destinationType: FieldType.time }).values;\n      }\n    }\n  }\n\n  let enumFieldsCount = 0;\n\n  loopy: for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.enum && ++enumFieldsCount > 1) {\n        series = reEnumFields(series);\n        break loopy;\n      }\n    }\n  }\n\n  let copy: Field;\n\n  const frames: DataFrame[] = [];\n\n  for (let frame of series) {\n    const fields: Field[] = [];\n\n    let hasTimeField = false;\n    let hasValueField = false;\n\n    let nulledFrame = useNumericX\n      ? frame\n      : applyNullInsertThreshold({\n          frame,\n          refFieldPseudoMin: timeRange?.from.valueOf(),\n          refFieldPseudoMax: timeRange?.to.valueOf(),\n        });\n\n    const frameFields = nullToValue(nulledFrame).fields;\n\n    for (let fieldIdx = 0; fieldIdx < frameFields?.length ?? 0; fieldIdx++) {\n      const field = frameFields[fieldIdx];\n\n      switch (field.type) {\n        case FieldType.time:\n          hasTimeField = true;\n          fields.push(field);\n          break;\n        case FieldType.number:\n          hasValueField = useNumericX ? fieldIdx > 0 : true;\n          copy = {\n            ...field,\n            values: field.values.map((v) => {\n              if (!(Number.isFinite(v) || v == null)) {\n                return null;\n              }\n              return v;\n            }),\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.enum:\n          hasValueField = true;\n        case FieldType.string:\n          copy = {\n            ...field,\n            values: field.values,\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.boolean:\n          hasValueField = true;\n          const custom: GraphFieldConfig = field.config?.custom ?? {};\n          const config = {\n            ...field.config,\n            max: 1,\n            min: 0,\n            custom,\n          };\n\n          // smooth and linear do not make sense\n          if (custom.lineInterpolation !== LineInterpolation.StepBefore) {\n            custom.lineInterpolation = LineInterpolation.StepAfter;\n          }\n\n          copy = {\n            ...field,\n            config,\n            type: FieldType.number,\n            values: field.values.map((v) => {\n              if (v == null) {\n                return v;\n              }\n              return Boolean(v) ? 1 : 0;\n            }),\n          };\n\n          if (!isBooleanUnit(config.unit)) {\n            config.unit = 'bool';\n            copy.display = getDisplayProcessor({ field: copy, theme });\n          }\n\n          fields.push(copy);\n          break;\n      }\n    }\n\n    if ((useNumericX || hasTimeField) && hasValueField) {\n      frames.push({\n        ...frame,\n        length: nulledFrame.length,\n        fields,\n      });\n    }\n  }\n\n  if (frames.length) {\n    setClassicPaletteIdxs(frames, theme, 0);\n    matchEnumColorToSeriesColor(frames, theme);\n    return frames;\n  }\n\n  return null;\n}\n\nconst matchEnumColorToSeriesColor = (frames: DataFrame[], theme: GrafanaTheme2) => {\n  const { palette } = theme.visualization;\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.enum) {\n        const namedColor = palette[field.state?.seriesIndex! % palette.length];\n        const hexColor = theme.visualization.getColorByName(namedColor);\n        const enumConfig = field.config.type!.enum!;\n\n        enumConfig.color = Array(enumConfig.text!.length).fill(hexColor);\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    }\n  }\n};\n\nexport const setClassicPaletteIdxs = (frames: DataFrame[], theme: GrafanaTheme2, skipFieldIdx?: number) => {\n  let seriesIndex = 0;\n  frames.forEach((frame) => {\n    frame.fields.forEach((field, fieldIdx) => {\n      if (\n        fieldIdx !== skipFieldIdx &&\n        (field.type === FieldType.number || field.type === FieldType.boolean || field.type === FieldType.enum)\n      ) {\n        field.state = {\n          ...field.state,\n          seriesIndex: seriesIndex++, // TODO: skip this for fields with custom renderers (e.g. Candlestick)?\n        };\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    });\n  });\n};\n\nexport function getTimezones(timezones: string[] | undefined, defaultTimezone: string): string[] {\n  if (!timezones || !timezones.length) {\n    return [defaultTimezone];\n  }\n  return timezones.map((v) => (v?.length ? v : defaultTimezone));\n}\n\nexport const isTooltipScrollable = (tooltipOptions: VizTooltipOptions | HeatmapTooltip) => {\n  return tooltipOptions.mode === TooltipDisplayMode.Multi && tooltipOptions.maxHeight != null;\n};\n","import { Field, formattedValueToString } from '@grafana/data';\n\nexport function fmt(field: Field, val: number): string {\n  if (field.display) {\n    return formattedValueToString(field.display(val));\n  }\n\n  return `${val}`;\n}\n"],"names":["VizTooltipContent","items","children","isPinned","scrollable","maxHeight","styles","getStyles","scrollableStyle","label","value","color","colorIndicator","colorPlacement","isActive","lineStyle","i","theme","ActionButton","action","buttonProps","Button","ADD_ANNOTATION_ID","renderDataLinks","dataLinks","Stack","link","DataLinkButton","renderActions","actions","VizTooltipFooter","annotate","VizTooltipHeader","item","ColorIndicatorPosition","VizTooltipColorIndicator","position","SeriesIcon","LabelValueTypes","SUCCESSFULLY_COPIED_TEXT","SHOW_SUCCESS_DURATION","HORIZONTAL_PX_PER_CHAR","VizTooltipRow","justify","marginRight","showValueScroll","innerValueScrollStyle","showLabelTooltip","setShowLabelTooltip","copiedText","setCopiedText","showCopySuccess","setShowCopySuccess","labelRef","valueRef","timeoutId","copyToClipboard","text","type","fallbackCopyToClipboard","textarea","err","onMouseEnterLabel","event","onMouseLeaveLabel","Tooltip","InlineToast","VizTooltipWrapper","className","getActions","frame","field","fieldScopedVars","replaceVariables","config","dataContext","actionScopedVars","boundReplaceVariables","scopedVars","format","actionModel","e","evt","origin","buildActionOnClick","url","getUrl","requestHeaders","request","getData","name","error","getActionsDefaultField","endpoint","sanitizedRelativeURL","data","hasVisibleLegendSeries","BarChartLegend","placement","calcs","displayMode","colorField","vizLayoutLegendProps","fieldConfig","colorMode","thresholdItems","thresholdsAbsolute","thresholdsPercent","step","thresholdAbsoluteItems","thresholdPercentItems","valueMappings","mappings","mapping","valueMappingItems","legendItems","fieldIndex","VizLayout","VizLegend","intervals","groupDistr","barDistr","VALUE_MIN_FONT_SIZE","VALUE_MAX_FONT_SIZE","BAR_FONT_SIZE_RATIO","LABEL_OFFSET_FACTOR_VT","LABEL_OFFSET_FACTOR_HZ","LABEL_OFFSET_MAX_VT","LABEL_OFFSET_MAX_HZ","MIDDLE_BASELINE_SHIFT","calculateFontSizeWithMetrics","width","height","lineHeight","maxSize","textSize","measureText","fontSizeBasedOnWidth","fontSizeBasedOnHeight","optimalSize","getConfig","opts","xOri","dir","rawValue","getColor","formatValue","formatShortValue","fillOpacity","showValue","xSpacing","hoverMulti","timeZone","isXHorizontal","hasAutoValueSize","isStacked","pctStacked","groupWidth","barWidth","barRadius","qt","hovered","hRect","xSplits","u","v","hFilter","splits","dim","_dir","dataLen","lastIdx","skipMod","cssDim","maxTicks","splits2","xValues","axisIdx","foundSpace","foundIncr","xRange","min","max","pctOffset","distribute","di","lftPct","widPct","rn","offset","distrTwo","groupCount","barCount","out","groupIdx","groupOffPct","groupDimPct","barIdx","barOffPct","barDimPct","distrOne","LABEL_OFFSET_FACTOR","LABEL_OFFSET_MAX","barsPctLayout","barsColors","scaleFactor","labels","fontSize","labelOffset","vSpace","hSpace","useMappedColors","mappedColorDisp","seriesIdx","barsBuilder","dataIdx","lft","top","wid","hgt","val","barRect","raw","divider","alignedTotals","calculatedSize","textMetrics","autoFontSize","middleShift","x","y","xAdjust","yAdjust","init","el","cursor","cx","cy","o","r","hRect2","isHovered","drawClear","s","colors","valueIdx","c","draw","curAlign","curBaseline","didx","first","sidx","align","baseline","bbox","intersectsLabel","subsidx","label2","bbox2","hidden","prepData","frames","stackingGroups","totals","defaultOptions","defaultFieldConfig","prepSeries","stacking","xFieldName","colorFieldName","fr","timeFieldIdx","f","xField","fields","_rest","field2","warn","series","prepConfig","totalSeries","orientation","options","tooltip","xTickLabelRotation","xTickLabelMaxLength","xTickLabelSpacing","legend","fullHighlight","builder","UPlotConfigBuilder","formatters","shortenValue","vizOrientation","getScaleOrientation","disp","m","result","lftSpace","btmSpace","getRotationPadding","xFieldAxisPlacement","xFieldAxisShow","customConfig","scaleKey","seriesColor","softMin","softMax","axisOpts","decimals","_series","_color","length","rotateLabel","valueMaxLength","values","displayProcessor","getProcessedValue","maxLength","size","paddingRight","paddingLeft","paddingBottom","charWidth","toRads","BarChartPanel","props","id","colorByField","info","vizSeries","xGroupsCount","seriesCount","plotData","PanelDataErrorView","legendComp","vizWidth","vizHeight","TooltipPlugin2","dataIdxs","dismiss","timeRange2","TimeSeriesTooltip","GAPS_OPTIONS","TickSpacingEditor","isRTL","gap","onSpacingChange","onRTLChange","RadioButtonGroup","Checkbox","changeToBarChartPanelMigrationHandler","panel","prevPluginId","prevOptions","graphOptions","transformations","getReducer","reducers","transformReducers","reducer","BarChartSuggestionsSupplier","list","dataSummary","PanelPlugin","cfg","ThresholdsStyleEditor","countNumberFields","count","HorizontalConstraint","VerticalConstraint","BackgroundImageSize","HttpRequestMethod","ConnectionPath","defaultCanvasConnection","defaultCanvasElementOptions","getDataLinks","rowIdx","links","linkLookup","key","getFieldActions","dataFrame","replaceVars","rowIndex","actionLookup","mode","sortOrder","xVal","contentItems","footer","headerItem","reEnumFields","allTextsByKey","allTexts","idxs","txts","prepareGraphableFields","timeRange","xNumFieldIdx","useNumericX","enumFieldsCount","loopy","copy","hasTimeField","hasValueField","nulledFrame","frameFields","fieldIdx","custom","setClassicPaletteIdxs","matchEnumColorToSeriesColor","palette","namedColor","hexColor","enumConfig","skipFieldIdx","seriesIndex","getTimezones","timezones","defaultTimezone","isTooltipScrollable","tooltipOptions","fmt"],"sourceRoot":""}