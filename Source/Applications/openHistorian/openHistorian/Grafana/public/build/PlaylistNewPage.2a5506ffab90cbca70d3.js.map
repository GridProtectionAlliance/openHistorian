{"version":3,"file":"PlaylistNewPage.2a5506ffab90cbca70d3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/playlist/PlaylistTableRows.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTable.tsx","webpack://grafana/./public/app/features/playlist/usePlaylistItems.tsx","webpack://grafana/./public/app/features/playlist/PlaylistForm.tsx","webpack://grafana/./public/app/features/playlist/PlaylistNewPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { ReactNode } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, IconButton, useStyles2, Spinner, IconName } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  onDelete: (idx: number) => void;\n}\n\nexport const PlaylistTableRows = ({ items, onDelete }: Props) => {\n  const styles = useStyles2(getStyles);\n  if (!items?.length) {\n    return (\n      <div>\n        <em>Playlist is empty. Add dashboards below.</em>\n      </div>\n    );\n  }\n\n  const renderItem = (item: PlaylistItem) => {\n    let icon: IconName = item.type === 'dashboard_by_tag' ? 'apps' : 'tag-alt';\n    const info: ReactNode[] = [];\n\n    const first = item.dashboards?.[0];\n    if (!item.dashboards) {\n      info.push(<Spinner key=\"spinner\" />);\n    } else if (item.type === 'dashboard_by_tag') {\n      info.push(<TagBadge key={item.value} label={item.value} removeIcon={false} count={0} />);\n      if (!first) {\n        icon = 'exclamation-triangle';\n        info.push(<span key=\"info\">&nbsp; No dashboards found</span>);\n      } else {\n        info.push(<span key=\"info\">&nbsp; {pluralize('dashboard', item.dashboards.length, true)}</span>);\n      }\n    } else if (first) {\n      info.push(\n        item.dashboards.length > 1 ? (\n          <span key=\"info\">Multiple items found: ${item.value}</span>\n        ) : (\n          <span key=\"info\">{first.name ?? item.value}</span>\n        )\n      );\n    } else {\n      icon = 'exclamation-triangle';\n      info.push(<span key=\"info\">&nbsp; Not found: {item.value}</span>);\n    }\n    return (\n      <>\n        <Icon name={icon} className={styles.rightMargin} key=\"icon\" />\n        {info}\n      </>\n    );\n  };\n\n  return (\n    <>\n      {items.map((item, index) => (\n        <Draggable key={`${index}/${item.value}`} draggableId={`${index}`} index={index}>\n          {(provided) => (\n            <div\n              className={styles.row}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              role=\"row\"\n            >\n              <div className={styles.actions} role=\"cell\" aria-label={`Playlist item, ${item.type}, ${item.value}`}>\n                {renderItem(item)}\n              </div>\n              <div className={styles.actions}>\n                <IconButton\n                  name=\"times\"\n                  size=\"md\"\n                  onClick={() => onDelete(index)}\n                  aria-label={selectors.pages.PlaylistForm.itemDelete}\n                  type=\"button\"\n                />\n                <Icon title=\"Drag and drop to reorder\" name=\"draggabledots\" size=\"md\" />\n              </div>\n            </div>\n          )}\n        </Draggable>\n      ))}\n    </>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    row: css`\n      padding: 6px;\n      background: ${theme.colors.background.secondary};\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 3px;\n\n      border: 1px solid ${theme.colors.border.medium};\n      &:hover {\n        border: 1px solid ${theme.colors.border.strong};\n      }\n    `,\n    rightMargin: css`\n      margin-right: 5px;\n    `,\n    actions: css`\n      align-items: center;\n      justify-content: center;\n      display: flex;\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  deleteItem: (idx: number) => void;\n  moveItem: (src: number, dst: number) => void;\n}\n\nexport const PlaylistTable = ({ items, deleteItem, moveItem }: Props) => {\n  const onDragEnd = (d: DropResult) => {\n    if (d.destination) {\n      moveItem(d.source.index, d.destination?.index);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"playlist-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <PlaylistTableRows items={items} onDelete={deleteItem} />\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DashboardPickerDTO } from 'app/core/components/Select/DashboardPicker';\n\nimport { loadDashboards } from './api';\nimport { PlaylistItem } from './types';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  // Attach dashboards if any were missing\n  useAsync(async () => {\n    for (const item of items) {\n      if (!item.dashboards) {\n        setItems(await loadDashboards(items));\n        return;\n      }\n    }\n  }, [items]);\n\n  const addById = useCallback(\n    (dashboard?: DashboardPickerDTO) => {\n      if (!dashboard) {\n        return;\n      }\n\n      setItems([\n        ...items,\n        {\n          type: 'dashboard_by_uid',\n          value: dashboard.uid,\n        },\n      ]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        type: 'dashboard_by_tag',\n        value: tag,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const moveItem = useCallback(\n    (src: number, dst: number) => {\n      if (src === dst || !items[src]) {\n        return; // nothing to do\n      }\n      const update = Array.from(items);\n      const [removed] = update.splice(src, 1);\n      update.splice(dst, 0, removed);\n      setItems(update);\n    },\n    [items]\n  );\n\n  const deleteItem = useCallback(\n    (index: number) => {\n      const copy = items.slice();\n      copy.splice(index, 1);\n      setItems(copy);\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveItem };\n}\n","import React, { useMemo, useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { TagFilter } from 'app/core/components/TagFilter/TagFilter';\n\nimport { getGrafanaSearcher } from '../search/service';\n\nimport { PlaylistTable } from './PlaylistTable';\nimport { Playlist } from './types';\nimport { usePlaylistItems } from './usePlaylistItems';\n\ninterface Props {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nexport const PlaylistForm = ({ onSubmit, playlist }: Props) => {\n  const [saving, setSaving] = useState(false);\n  const { name, interval, items: propItems } = playlist;\n  const tagOptions = useMemo(() => {\n    return () => getGrafanaSearcher().tags({ kind: ['dashboard'] });\n  }, []);\n\n  const { items, addById, addByTag, deleteItem, moveItem } = usePlaylistItems(propItems);\n\n  const doSubmit = (list: Playlist) => {\n    setSaving(true);\n    onSubmit({ ...list, items });\n  };\n\n  return (\n    <div>\n      <Form onSubmit={doSubmit} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} deleteItem={deleteItem} moveItem={moveItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPicker id=\"dashboard-picker\" onChange={addById} key={items.length} />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={tagOptions}\n                    onChange={addByTag}\n                    placeholder=\"Select a tag\"\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  disabled={isDisabled}\n                  icon={saving ? 'fa fa-spinner' : undefined}\n                >\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { PlaylistForm } from './PlaylistForm';\nimport { createPlaylist, getDefaultPlaylist } from './api';\nimport { Playlist } from './types';\n\nexport const PlaylistNewPage = () => {\n  const [playlist] = useState<Playlist>(getDefaultPlaylist());\n\n  const onSubmit = async (playlist: Playlist) => {\n    await createPlaylist(playlist);\n    locationService.push('/playlists');\n  };\n\n  const pageNav: NavModelItem = {\n    text: 'New playlist',\n    subTitle:\n      'A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build situational awareness, or just show off your metrics to your team or visitors.',\n  };\n\n  return (\n    <Page navId=\"dashboards/playlists\" pageNav={pageNav}>\n      <Page.Contents>\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default PlaylistNewPage;\n"],"names":["PlaylistTableRows","items","onDelete","styles","getStyles","renderItem","item","icon","info","first","TagBadge","Spinner","Icon","index","provided","IconButton","selectors","theme","PlaylistTable","deleteItem","moveItem","onDragEnd","d","usePlaylistItems","playlistItems","setItems","useAsync","addById","dashboard","addByTag","tags","tag","newItem","src","dst","update","removed","copy","PlaylistForm","onSubmit","playlist","saving","setSaving","name","interval","propItems","tagOptions","doSubmit","list","Form","register","errors","isDisabled","Field","Input","DashboardPicker","TagFilter","Button","config","PlaylistNewPage","pageNav"],"sourceRoot":""}