{"version":3,"file":"DataTrailsPage.f3b7b20abdcecea28c2f.js","mappings":"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","sources":["webpack://grafana/./public/app/features/trails/DataTrailCard.tsx","webpack://grafana/./public/app/features/trails/DataTrailsHome.tsx","webpack://grafana/./public/app/features/trails/DataTrailsApp.tsx","webpack://grafana/./public/app/features/trails/DataTrailsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2 } from '@grafana/data';\nimport { AdHocFiltersVariable, sceneGraph } from '@grafana/scenes';\nimport { Card, IconButton, Stack, Tag, useStyles2 } from '@grafana/ui';\n\nimport { DataTrail } from './DataTrail';\nimport { getTrailStore, DataTrailBookmark } from './TrailStore/TrailStore';\nimport { VAR_FILTERS } from './shared';\nimport { getDataSource, getDataSourceName, getMetricName } from './utils';\n\nexport type Props = {\n  trail?: DataTrail;\n  bookmark?: DataTrailBookmark;\n  onSelect: () => void;\n  onDelete?: () => void;\n};\n\nexport function DataTrailCard(props: Props) {\n  const { onSelect, onDelete, bookmark } = props;\n  const styles = useStyles2(getStyles);\n\n  const values = useMemo(() => {\n    let trail = props.trail || (bookmark && getTrailStore().getTrailForBookmark(bookmark));\n\n    if (!trail) {\n      return null;\n    }\n\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail)!;\n    if (!(filtersVariable instanceof AdHocFiltersVariable)) {\n      return null;\n    }\n\n    const createdAt = bookmark?.createdAt || trail.state.createdAt;\n\n    return {\n      dsValue: getDataSource(trail),\n      filters: filtersVariable.state.filters,\n      metric: trail.state.metric,\n      createdAt,\n    };\n  }, [props.trail, bookmark]);\n\n  if (!values) {\n    return null;\n  }\n\n  const { dsValue, filters, metric, createdAt } = values;\n\n  return (\n    <Card onClick={onSelect} className={styles.card}>\n      <Card.Heading className={styles.wordwrap}>{getMetricName(metric)}</Card.Heading>\n      <div className={styles.description}>\n        <Stack gap={1.5} wrap=\"wrap\">\n          {filters.map((f) => (\n            <Tag key={f.key} name={`${f.key}: ${f.value}`} colorIndex={12} />\n          ))}\n        </Stack>\n      </div>\n      <Card.Actions className={styles.actions}>\n        <Stack gap={1} justifyContent={'space-between'} grow={1}>\n          <div className={styles.secondary}>\n            <b>Datasource:</b> {getDataSourceName(dsValue)}\n          </div>\n          {createdAt && (\n            <i className={styles.secondary}>\n              <b>Created:</b> {dateTimeFormat(createdAt, { format: 'LL' })}\n            </i>\n          )}\n        </Stack>\n      </Card.Actions>\n      {onDelete && (\n        <Card.SecondaryActions>\n          <IconButton\n            key=\"delete\"\n            name=\"trash-alt\"\n            className={styles.secondary}\n            tooltip=\"Remove bookmark\"\n            onClick={onDelete}\n          />\n        </Card.SecondaryActions>\n      )}\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    tag: css({\n      maxWidth: '260px',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    card: css({\n      padding: theme.spacing(1),\n    }),\n    secondary: css({\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n    }),\n    description: css({\n      width: '100%',\n      gridArea: 'Description',\n      margin: theme.spacing(1, 0, 0),\n      color: theme.colors.text.secondary,\n      lineHeight: theme.typography.body.lineHeight,\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    }),\n    actions: css({\n      marginRight: theme.spacing(1),\n    }),\n    wordwrap: css({\n      overflow: 'hidden',\n      overflowWrap: 'anywhere',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { Navigate } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, EmptyState, Stack, useStyles2 } from '@grafana/ui';\nimport { Text } from '@grafana/ui/src/components/Text/Text';\nimport { Trans } from '@grafana/ui/src/utils/i18n';\n\nimport { DataTrail } from './DataTrail';\nimport { DataTrailCard } from './DataTrailCard';\nimport { DataTrailsApp } from './DataTrailsApp';\nimport { getBookmarkKey, getTrailStore } from './TrailStore/TrailStore';\nimport { reportExploreMetrics } from './interactions';\nimport { getDatasourceForNewTrail, getUrlForTrail, newMetricsTrail } from './utils';\n\nexport interface DataTrailsHomeState extends SceneObjectState {}\n\nexport class DataTrailsHome extends SceneObjectBase<DataTrailsHomeState> {\n  public constructor(state: DataTrailsHomeState) {\n    super(state);\n  }\n\n  public onNewMetricsTrail = () => {\n    const app = getAppFor(this);\n    const trail = newMetricsTrail(getDatasourceForNewTrail());\n    reportExploreMetrics('exploration_started', { cause: 'new_clicked' });\n    getTrailStore().setRecentTrail(trail);\n    app.goToUrlForTrail(trail);\n  };\n\n  public onSelectRecentTrail = (trail: DataTrail) => {\n    const app = getAppFor(this);\n    reportExploreMetrics('exploration_started', { cause: 'recent_clicked' });\n    getTrailStore().setRecentTrail(trail);\n    app.goToUrlForTrail(trail);\n  };\n\n  public onSelectBookmark = (bookmarkIndex: number) => {\n    const app = getAppFor(this);\n    reportExploreMetrics('exploration_started', { cause: 'bookmark_clicked' });\n    const trail = getTrailStore().getTrailForBookmarkIndex(bookmarkIndex);\n    getTrailStore().setRecentTrail(trail);\n    app.goToUrlForTrail(trail);\n  };\n\n  static Component = ({ model }: SceneComponentProps<DataTrailsHome>) => {\n    const [_, setLastDelete] = useState(Date.now());\n    const styles = useStyles2(getStyles);\n\n    const onDelete = (index: number) => {\n      getTrailStore().removeBookmark(index);\n      reportExploreMetrics('bookmark_changed', { action: 'deleted' });\n      setLastDelete(Date.now()); // trigger re-render\n    };\n\n    // If there are no recent trails, don't show home page and create a new trail\n    if (!getTrailStore().recent.length) {\n      const trail = newMetricsTrail(getDatasourceForNewTrail());\n      return <Navigate replace to={getUrlForTrail(trail)} />;\n    }\n\n    return (\n      <div className={styles.container}>\n        <Stack direction={'column'} gap={1} alignItems={'start'}>\n          <Button icon=\"plus\" size=\"md\" variant=\"primary\" onClick={model.onNewMetricsTrail}>\n            New metric exploration\n          </Button>\n        </Stack>\n\n        <Stack gap={5}>\n          <div className={styles.column}>\n            <Text variant=\"h4\">Recent metrics explorations</Text>\n            <div className={styles.trailList}>\n              {getTrailStore().recent.map((trail, index) => {\n                const resolvedTrail = trail.resolve();\n                return (\n                  <DataTrailCard\n                    key={(resolvedTrail.state.key || '') + index}\n                    trail={resolvedTrail}\n                    onSelect={() => model.onSelectRecentTrail(resolvedTrail)}\n                  />\n                );\n              })}\n            </div>\n          </div>\n          <div className={styles.verticalLine} />\n          <div className={styles.column}>\n            <Text variant=\"h4\">Bookmarks</Text>\n            <div className={styles.trailList}>\n              {getTrailStore().bookmarks.length ? (\n                getTrailStore().bookmarks.map((bookmark, index) => {\n                  return (\n                    <DataTrailCard\n                      key={getBookmarkKey(bookmark)}\n                      bookmark={bookmark}\n                      onSelect={() => model.onSelectBookmark(index)}\n                      onDelete={() => onDelete(index)}\n                    />\n                  );\n                })\n              ) : (\n                <EmptyState variant=\"call-to-action\" message=\"\" image={false}>\n                  <Trans i18nKey=\"trails.bookmarks.empty-state\">\n                    You haven&apos;t created any bookmarks yet. Use the Explore Metrics bookmarks feature to save your\n                    panels as bookmarks.\n                  </Trans>\n                </EmptyState>\n              )}\n            </div>\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n}\n\nfunction getAppFor(model: SceneObject) {\n  return sceneGraph.getAncestor(model, DataTrailsApp);\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(3),\n    }),\n    column: css({\n      display: 'flex',\n      flexGrow: 1,\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n    }),\n    newTrail: css({\n      height: 'auto',\n      justifyContent: 'center',\n      fontSize: theme.typography.h5.fontSize,\n    }),\n    trailCard: css({}),\n    trailList: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n    }),\n    verticalLine: css({\n      borderLeft: `1px solid ${theme.colors.border.weak}`,\n    }),\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, UrlSyncContextProvider } from '@grafana/scenes';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { DataTrail } from './DataTrail';\nimport { DataTrailsHome } from './DataTrailsHome';\nimport { MetricsHeader } from './MetricsHeader';\nimport { getTrailStore } from './TrailStore/TrailStore';\nimport { HOME_ROUTE, TRAILS_ROUTE } from './shared';\nimport { getMetricName, getUrlForTrail, newMetricsTrail } from './utils';\n\nexport interface DataTrailsAppState extends SceneObjectState {\n  trail: DataTrail;\n  home: DataTrailsHome;\n}\n\nexport class DataTrailsApp extends SceneObjectBase<DataTrailsAppState> {\n  public constructor(state: DataTrailsAppState) {\n    super(state);\n  }\n\n  goToUrlForTrail(trail: DataTrail) {\n    locationService.push(getUrlForTrail(trail));\n    this.setState({ trail });\n  }\n\n  static Component = ({ model }: SceneComponentProps<DataTrailsApp>) => {\n    const { trail, home } = model.useState();\n\n    return (\n      <Switch>\n        <Route\n          exact={true}\n          path={HOME_ROUTE}\n          render={() => (\n            <Page\n              navId=\"explore/metrics\"\n              layout={PageLayoutType.Standard}\n              renderTitle={() => <MetricsHeader />}\n              subTitle=\"\"\n            >\n              <home.Component model={home} />\n            </Page>\n          )}\n        />\n        <Route exact={true} path={TRAILS_ROUTE} render={() => <DataTrailView trail={trail} />} />\n      </Switch>\n    );\n  };\n}\n\nfunction DataTrailView({ trail }: { trail: DataTrail }) {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const { metric } = trail.useState();\n\n  useEffect(() => {\n    if (!isInitialized) {\n      getTrailStore().setRecentTrail(trail);\n      setIsInitialized(true);\n    }\n  }, [trail, isInitialized]);\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return (\n    <UrlSyncContextProvider scene={trail}>\n      <Page navId=\"explore/metrics\" pageNav={{ text: getMetricName(metric) }} layout={PageLayoutType.Custom}>\n        <trail.Component model={trail} />\n      </Page>\n    </UrlSyncContextProvider>\n  );\n}\n\nlet dataTrailsApp: DataTrailsApp;\n\nexport function getDataTrailsApp() {\n  if (!dataTrailsApp) {\n    dataTrailsApp = new DataTrailsApp({\n      trail: newMetricsTrail(),\n      home: new DataTrailsHome({}),\n    });\n  }\n\n  return dataTrailsApp;\n}\n","// Libraries\nimport { getDataTrailsApp } from './DataTrailsApp';\n\nexport function DataTrailsPage() {\n  const app = getDataTrailsApp();\n  return <app.Component model={app} />;\n}\n\nexport default DataTrailsPage;\n"],"names":["DataTrailCard","props","onSelect","onDelete","bookmark","styles","getStyles","values","trail","filtersVariable","createdAt","dsValue","filters","metric","Card","Stack","f","Tag","IconButton","theme","DataTrailsHome","state","app","getAppFor","bookmarkIndex","model","_","setLastDelete","index","Button","Text","resolvedTrail","EmptyState","DataTrailsApp","home","Page","MetricsHeader","DataTrailView","isInitialized","setIsInitialized","dataTrailsApp","getDataTrailsApp","DataTrailsPage"],"sourceRoot":""}