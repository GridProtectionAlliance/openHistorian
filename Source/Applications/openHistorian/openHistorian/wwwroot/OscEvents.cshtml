@*******************************************************************************************************
//  OscEvents.cshtml - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may
//  not use this file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/23/2021 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF.Web.Model
@using openHistorian
@using openHistorian.Model
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "Layout.cshtml";
    ViewBag.Title = "Oscillation Events";
    ViewBag.ShowSearchFilter = true;

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Source", "Source", "text-left" },
        new[] { "StartTime", "Start Time", "text-left" },
        new[] { "StopTime", "Stop Time", "text-left" },
        new[] { "Frequency", "Frequency", "text-left" },
        new[] { "Magnitude", "Magnitude", "text-left" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();

}
@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle"><button type="button" class="btn btn-link btn-xs" data-bind="text: Source, click: downloadDetails.bind($data)"></button></td>
    <td width="15%" class="text-left valign-middle" data-bind="text: StartTime"></td>
    <td width="15%" class="text-left valign-middle" data-bind="text: StopTime"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: Frequency"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: Magnitude"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-paperclip"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    @Raw(dataContext.AddInputField<OscEvents>("Source"))
    @Raw(dataContext.AddInputField<OscEvents>("StartTime", "datetime"))
    @Raw(dataContext.AddInputField<OscEvents>("StopTime", "datetime"))
    @Raw(dataContext.AddInputField<OscEvents>("Frequency"))
    @Raw(dataContext.AddInputField<OscEvents>("Magnitude"))
    @Raw(dataContext.AddTextAreaField<OscEvents>("Notes", 4, initialFocus: true))
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts {
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<OscEvents, DataHub>(ViewBag, "StartTime"))

        function downloadDetails(record) {
            var details = "Oscillation Event Report\r\n";
            details += "------------------------\r\n";
            details += `Source: ${record.Source}\r\n`;
            details += `Duration: ${record.StartTime} to ${record.StopTime}\r\n`;
            details += `Frequency: ${record.Frequency}\r\n`;
            details += `Magnitude: ${record.Magnitude}\r\n`;
            details += `Notes: ${record.Notes}\r\n`;

            downloadString(details, "text/plain", `EventReport_${record.Source}.txt`)
        }

        function downloadString(text, fileType, fileName) {
            const blob = new Blob([text], { type: fileType });
            const a = document.createElement("a");
            a.download = fileName;
            a.href = URL.createObjectURL(blob);
            a.dataset.downloadurl = [fileType, a.download, a.href].join(":");
            a.style.display = "none";
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            setTimeout(function () { URL.revokeObjectURL(a.href); }, 1500);
        }
    </script>
}