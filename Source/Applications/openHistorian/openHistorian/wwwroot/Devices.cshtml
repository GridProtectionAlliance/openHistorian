@*******************************************************************************************************
//  Devices.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/15/2016 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Text
@using GSF.Security
@using GSF.Web.Model
@using GSF.Web.Shared.Model
@using openHistorian
@using openHistorian.Model
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    if (ViewBag.PageControlScripts == null) {
        ViewBag.PageControlScripts = new StringBuilder();
    }

    DataContext dataContext = ViewBag.DataContext;
    StringBuilder pageControlScripts = ViewBag.PageControlScripts;

    Layout = "Layout.cshtml";
    ViewBag.Title = "Devices";
    ViewBag.ShowSearchFilter = true;

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Acronym", "Acronym", "text-left" },
        new[] { "Name", "Name", "text-left" },
        new[] { "ConnectionString", "Connection String", "text-left" },
        new[] { null, "Enabled", "text-center valign-middle" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ParentKeys = Model.Global.NodeID.ToString();

    // Prepend view model validation extension scripts to occur before normal model initialization
    pageControlScripts.Insert(0, ExtendModelValidation().ToString().TrimStart());
}
@functions {
    public bool UserIsAdminOrEditor()
    {
        SecurityPrincipal securityPrincipal = ViewBag.SecurityPrincipal as SecurityPrincipal;

        if ((object)securityPrincipal == null)
            return false;

        return securityPrincipal.IsInRole("Administrator,Editor");
    }
}
@helper BodyRows()
{
    <td width="25%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Acronym, click: navigateToDeviceScreen.bind($data)"></button></td>
    <td width="30%" class="text-left valign-middle" data-bind="text: Name"></td>
    <td width="35%" class="text-left table-cell-hard-wrap"><div data-bind="text: notNull(ConnectionString).truncate(30), attr: { title: notNull(ConnectionString) }"></div></td>
    <td width="5%" class="text-center valign-middle"><input type="checkbox" data-bind="checked: Enabled, click: enabledStateChanged.bind($data)" /></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: showEditScreen.bind($data, @(UserIsAdminOrEditor().ToString().ToLower())), enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<Device>("ID", customDataBinding: "disable: true", groupDataBinding: "visible: $root.recordMode() !== RecordMode.AddNew"))
        @Raw(dataContext.AddInputField<Device>("UniqueID", customDataBinding: "disable: true", groupDataBinding: "visible: $root.recordMode() !== RecordMode.AddNew"))
        @Raw(dataContext.AddInputField<Device>("Acronym", initialFocus: true))
        @Raw(dataContext.AddInputField<Device>("Name"))
        @Raw(dataContext.AddSelectField<Device, Protocol>("ProtocolID", "ID", "Acronym", allowUnset: true))
        @Raw(dataContext.AddSelectField<Device, Historian>("HistorianID", "ID", "Acronym", allowUnset: true, addEmptyRow: true))
        @Raw(dataContext.AddInputField<Device>("AccessID"))
        @Raw(dataContext.AddInputField<Device>("FramesPerSecond"))
        @Raw(dataContext.AddSelectField<Device, VendorDevice>("VendorDeviceID", "ID", "Name", allowUnset: true))
    </div>
    <div class="col-md-6">
        @Raw(dataContext.AddTextAreaField<Device>("ConnectionString", 4))
        @Raw(dataContext.AddInputField<Device>("Longitude"))
        @Raw(dataContext.AddInputField<Device>("Latitude"))
        @Raw(dataContext.AddSelectField<Device, Interconnection>("InterconnectionID", "ID", "Acronym"))
        @Raw(dataContext.AddSelectField<Device, Company>("CompanyID", "ID", "Acronym"))
        @Raw(dataContext.AddInputField<Device>("ContactList"))
        <div class="form-inline pull-right">
            @Raw(dataContext.AddCheckBoxField<Device>("ConnectOnDemand"))&nbsp;
            @Raw(dataContext.AddCheckBoxField<Device>("IsConcentrator"))&nbsp;
            @Raw(dataContext.AddCheckBoxField<Device>("Enabled"))
        </div>
    </div>
}
@helper ExtendModelValidation()
{
    <script>
        var phasorHub, phasorHubClient;

        $(function () {
            // Connect to phasor hub
            phasorHub = $.connection.phasorHub.server;
            phasorHubClient = $.connection.phasorHub.client;

            // Create hub client functions for message control
            function encodeInfoMessage(message, timeout) {
                // Html encode message
                const encodedMessage = $("<div />").text(message).html();
                showInfoMessage(encodedMessage, timeout);
            }

            function encodeErrorMessage(message, timeout) {
                // Html encode message
                const encodedMessage = $("<div />").text(message).html();
                showErrorMessage(encodedMessage, timeout);
            }

            // Register info and error message handlers for hub client
            phasorHubClient.sendInfoMessage = encodeInfoMessage;
            phasorHubClient.sendErrorMessage = encodeErrorMessage;
        });

        $(window).on("beforeApplyBindings", function () {
            // Define local rule that will check that device group acronym is unique in the database
            ko.validation.rules["deviceUniqueInDatabase"] = {
                async: true,
                validator: function (newVal, options, callback) {
                    if (phasorHub) {
                        // Lookup Device record by Acronym - this will return an empty record if not found
                        phasorHub.queryDevice(newVal).done(function (device) {
                                // Valid if device doesn't exist or is itself
                                callback(device.ID === 0 || notNull(device.Acronym).toLowerCase() === notNull(options).toLowerCase());
                            })
                            .fail(function (error) {
                                showErrorMessage(error);

                                // Do not display validation failure message for connection issues
                                callback(true);
                            });
                    }
                    else {
                        callback(true);
                    }
                },
                message: "This device acronym already exists in the database. Acronyms must be unique."
            };

            ko.bindingHandlers.selectOnError = {
                init: function (element, valueAccessor) {
                    $(element).on("input", function(event) {
                        setTimeout(function () {
                            if (!valueAccessor().isValid())
                                element.select();
                        }, 1);
                    });
                }
            }
            
            // Enable knockout validation
            ko.validation.init({
                registerExtenders: true,
                messagesOnModified: true,
                insertMessages: true,
                parseInputAttributes: true,
                allowHtmlMessages: true,
                messageTemplate: null,
                decorateElement: true,
                errorElementClass: "has-error",
                errorMessageClass: "help-block",
                grouping: { deep: true, observable: true, live: true }
            }, true);

            // Enable deferred updates for better performance
            ko.options.deferUpdates = true;
        });
    </script>
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
@section Scripts {
    <script>
        var modeledValidationParametersFunction;
        var modbusProtocolID = 0;

        @Raw(dataContext.RenderViewModelConfiguration<Device, DataHub>(ViewBag, "Acronym", null, Model.Global.NodeID))

        $(window).on("hubConnected", function() {
            if (modbusProtocolID === 0) {
                dataHub.getModbusProtocolID().done(function(protocolID) {
                    modbusProtocolID = protocolID;
                });
            }
        });

        function navigateToDeviceScreen(record) {
            @if (UserIsAdminOrEditor()) 
            {
            <text>
                if (record.ProtocolID === modbusProtocolID) {
                    window.location.href = "ModbusConfig.cshtml?DeviceID=" + record.ID;
                }
                else {
                    if (hubIsConnected) {
                        dataHub.getProtocolCategory(record.ProtocolID).done(function(category) {
                            category = notNull(category).toLowerCase().trim();

                            if (category === "phasor" || category === "gateway")
                                window.location.href = "AddSynchrophasorDevice.cshtml?DeviceID=" + record.ID;
                            else
                                viewModel.viewPageRecord(record);
                        })
                        .fail(function() {
                            viewModel.viewPageRecord(record);
                        });
                    }
                    else {
                        viewModel.viewPageRecord(record);
                    } 
                }
            </text>
            }
            else
            {
            <text>
                viewModel.viewPageRecord(record);
            </text>
            }
        }
        
        $(function() {
            modeledValidationParametersFunction = viewModel.applyValidationParameters;

            viewModel.setApplyValidationParameters(function () {
                modeledValidationParametersFunction();

                viewModel.currentRecord().Acronym.extend({
                    required: true,
                    deviceUniqueInDatabase: viewModel.currentRecord().Acronym()
                });
            });
        });

        function showEditScreen(editable, record) {
            if (editable)
                viewModel.editPageRecord(record);
            else
                viewModel.viewPageRecord(record);
        }

        function refreshEnabledState(record) {
            if (!hubIsConnected)
                return;

            if (record.Enabled)
                serviceHub.sendCommand("initialize " + record.Acronym);
            else
                serviceHub.sendCommand("reloadconfig");
        }

        function enabledStateChanged(record) {
            if (hubIsConnected) {
                record.Enable = !record.Enable;

                dataHub.updateDevice(record).done(function() {
                    viewModel.queryPageRecords();
                    refreshEnabledState(record);
                });
            }
        }

        $(viewModel).on("recordSaved", function(event, record, isNew) {
            refreshEnabledState(record);
        });

        $(viewModel).on("recordDeleted", function(event, record) {
            if (hubIsConnected)
                serviceHub.sendCommand("reloadconfig");
        });

    </script>
}