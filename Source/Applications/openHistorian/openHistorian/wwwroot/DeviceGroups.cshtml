@*******************************************************************************************************
//  DeviceGroups.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/02/2020 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using GSF.Security
@using GSF.Web.Model
@using GSF.Web.Shared.Model
@using openHistorian
@using openHistorian.Model
@inherits ExtendedTemplateBase<AppModel>
@section StyleSheets {
    <style>
        html, body {
            height: 100%;
        }
    </style>
}
@{
    DataContext dataContext = ViewBag.DataContext;

    Layout = "Layout.cshtml";
    ViewBag.Title = "Device Groups";
    ViewBag.SubTitle = "Allows creation of groups of devices, e.g., for a region";
    ViewBag.ShowSearchFilter = true;

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "Acronym", "Acronym", "text-left" },
        new[] { "Name", "Name", "text-left" },
        new[] { null, "Devices", "text-center" },
        new[] { null, "Enabled", "text-center valign-middle" }
    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.ParentKeys = Model.Global.NodeID.ToString();
}
@functions {
    public bool UserIsAdminOrEditor()
    {
        SecurityPrincipal securityPrincipal = ViewBag.SecurityPrincipal as SecurityPrincipal;
        return securityPrincipal != null && securityPrincipal.IsInRole("Administrator,Editor");
    }
}
@helper BodyRows()
{
    <td width="30%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Acronym, click: $parent.viewPageRecord"></button></td>
    <td width="40%" class="text-left valign-middle" data-bind="text: Name"></td>
    <td width="20%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openDeviceSelector.bind($data)" hub-dependent><span data-bind="attr: {id: 'deviceMode' + ID}">Add</span>&nbsp;&nbsp;<span class="badge" data-bind="text: getDeviceCount(ID), attr: {id: 'deviceCount' + ID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle"><input type="checkbox" data-bind="checked: Enabled, click: enabledStateChanged.bind($data)" /></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<DeviceGroup>("ID", customDataBinding: "disable: true", groupDataBinding: "visible: $root.recordMode() !== RecordMode.AddNew"))
        @Raw(dataContext.AddInputField<DeviceGroup>("UniqueID", customDataBinding: "disable: true", groupDataBinding: "visible: $root.recordMode() !== RecordMode.AddNew"))
        @Raw(dataContext.AddInputField<DeviceGroup>("Acronym", initialFocus: true))
        @Raw(dataContext.AddInputField<DeviceGroup>("Name"))
        @Raw(dataContext.AddSelectField<DeviceGroup, Historian>("HistorianID", "ID", "Acronym", allowUnset: true, addEmptyRow: true))
    </div>
    <div class="col-md-6">
        @Raw(dataContext.AddInputField<DeviceGroup>("Longitude"))
        @Raw(dataContext.AddInputField<DeviceGroup>("Latitude"))
        @Raw(dataContext.AddSelectField<DeviceGroup, Interconnection>("InterconnectionID", "ID", "Acronym"))
        @Raw(dataContext.AddSelectField<DeviceGroup, Company>("CompanyID", "ID", "Acronym"))
        @Raw(dataContext.AddInputField<DeviceGroup>("ContactList"))
        <div class="form-inline pull-right">
            @Raw(dataContext.AddCheckBoxField<DeviceGroup>("Enabled"))
        </div>
    </div>
}
@Html.RenderResource("GSF.Web.Model.Views.PagedViewModel.cshtml")
<div id="editDevicesDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="editDevicesFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        @Raw(dataContext.RenderViewModelConfiguration<DeviceGroup, DataHub>(ViewBag, "Acronym", null, Model.Global.NodeID))

        function getDeviceCount(deviceGroupID) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDeviceGroup("@Model.Global.NodeID", deviceGroupID).done(function(deviceGroup) {
                    if (notNull(deviceGroup.ConnectionString).length > 0) {
                        const settings = deviceGroup.ConnectionString.parseKeyValuePairs();
                        const deviceIDs = notNull(settings.get("deviceIDs"));
                        const count = deviceIDs.length > 0 ? deviceIDs.split(",").length : 0;
                        $("#deviceMode" + deviceGroupID).text(count > 0 ? "Edit" : "Add");
                        $("#deviceCount" + deviceGroupID).text(count);
                    }
                });
            }

            return "0";
        }
        
        $(window).resize(function() {
            $("#editDevicesFrame").attr("height", $("#contentWell").outerHeight(true) + "px");
        });

        function openDeviceSelector(record) {
            $("#editDevicesFrame").attr({
                "src": "SelectGroupDevices.cshtml?ID=" + record.ID + "&Acronym=" + encodeURIComponent(record.Acronym) + "&timestamp=" + Date.now(),
                "height": $("#contentWell").outerHeight(true) + "px",
                "width": "100%"
            });

            $("#editDevicesDialog").modal("show");
        }

        $("#editDevicesDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();
        });

        $(function() {
            $("#editDevicesDialog").modal({ show: false, backdrop: "static", keyboard: false });
        });

        function refreshEnabledState(record) {
            if (!hubIsConnected)
                return;

            if (record.Enabled)
                serviceHub.sendCommand("Initialize " + record.Acronym);
            else
                serviceHub.sendCommand("ReloadConfig");
        }

        function enabledStateChanged(record) {
            if (hubIsConnected) {
                record.Enable = !record.Enable;

                dataHub.updateDevice(record).done(function() {
                    viewModel.queryPageRecords();
                    refreshEnabledState(record);
                });
            }
        }

        $(viewModel).on("recordSaved", function(event, record, isNew) {
            refreshEnabledState(record);
        });

        $(viewModel).on("recordDeleted", function(event, record) {
            if (hubIsConnected)
                serviceHub.sendCommand("ReloadConfig");
        });
    </script>
}