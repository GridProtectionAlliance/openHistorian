@*******************************************************************************************************
//  Download.cshtml - Gbtc
//
//  Copyright © 2023, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  06/13/2023 - J. Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System
@using System.Net.Http
@using openHistorian.Model
@using RazorEngine.Templating
@inherits TemplateBase<AppModel>
@{
    Layout = "Layout.cshtml";
    ViewBag.Title = "JSON Merge and Download";
    HttpRequestMessage request = ViewBag.Request;
    Uri requestUri = request.RequestUri;
    string requestRoot = requestUri.Scheme + "://{0}:" + requestUri.Port;
}
<label for="downloadPath">Download Path:</label>
<input type="text" id="downloadPath" class="form-control" placeholder="Path or file name for JSON download" value="Grafana\public\gazetteer">
<br />
<table id="urlTable" class="table table-striped">
    <thead>
        <tr>
            <th style="text-align: center; width: 65px">Select</th>
            <th>URL</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
<button id="addUrl" class="btn btn-primary">Add URL</button>
<button id="removeUrl" class="btn btn-danger">Remove URL</button>
<button id="executeJsonOp" class="btn btn-success pull-right" hub-dependent>Merge &amp; Download</button>
<br /><br />
<div id="downloadUrl"></div>
<script>
    const urlRow =
        `<tr>
            <td style="text-align: center">
                <input type="checkbox" class="downloadCheckbox"{0}>
            </td>
            <td>
                <input type="text" placeholder="Enter server name or full URL" class="form-control urlInput" value="{1}">
            </td>
        </tr>`;

    function addUrlRow(checked, url) {
        $('#urlTable > tbody:last-child').append(String.format(urlRow, checked ? ' checked' : '', url));

        const lastInput = $('#urlTable .urlInput:last');

        lastInput.blur(function () {
            const url = lastInput.val();

            if (!url.startsWith('http'))
                lastInput.val(String.format('@requestRoot/grafana/KeyCoordinates', url));
        });
    }

    $(document).ready(function () {
        // Load previous settings from local storage
        const savedDownloadPath = localStorage.getItem('downloadPath') || 'Grafana\\public\\gazetteer';
        const savedRows = JSON.parse(localStorage.getItem('rows') || '[]');

        $('#downloadPath').val(savedDownloadPath);

        if (savedRows.length === 0)
            savedRows.push({ url: '', checked: true });

        for (const row of savedRows)
            addUrlRow(row.checked, row.url);

        // Add URL button
        $('#addUrl').click(function () {
            addUrlRow(false, '');
        });

        // Remove URL button
        $('#removeUrl').click(function () {
            $('#urlTable > tbody:last-child').children().last().remove();
        });

        // Merge / Download JSON button
        $('#executeJsonOp').click(function () {
            if (!hubIsConnected) {
                showErrorMessage('Cannot save merged / downloaded JSON data, not connected to openHistorian server.', -1);
                return;
            }

            const downloadCount = $('.downloadCheckbox:checked').length;

            if (downloadCount === 0) {
                alert('No URLs selected for download.');
                return;
            }

            const merged = [];
            const keysSeen = {}; // Map to keep track of keys we've already seen

            $('.downloadCheckbox:checked').each(function (i, elem) {
                const url = $(this).parent().siblings().children('.urlInput').val();

                $.getJSON(url, function (data) {
                    // Only add data to merged array if its key hasn't been seen before
                    for (let item of data) {
                        if (!keysSeen[item.key]) {
                            merged.push(item);
                            keysSeen[item.key] = true;
                        }
                    }

                    if (i === downloadCount - 1) {
                        // After all JSON content is downloaded, save it locally
                        const downloadPath = $('#downloadPath').val();

                        showInfoMessage(`Downloading merged JSON file to "${downloadPath}"...`);

                        dataHub.saveJSONFile(downloadPath, JSON.stringify(merged)).done(function (downloadUrl) {
                            downloadUrl = `@string.Format(requestRoot, requestUri.Host)${downloadUrl}`;
                            $('#downloadUrl').html(`<label for="downloadUrlAnchor">Downloaded URL:</label> <a id="downloadUrlAnchor" href="${downloadUrl}" target="_blank">${downloadUrl}</a>`);

                            if (copyToClipboard(downloadUrl))
                                showInfoMessage(`JSON download succeeded, URL of downloaded file copied to clipboard.`, -1, true);
                            else
                                showErrorMessage(`Failed to copy download URL to clipboard. Copy manually from link shown below.`, -1, true);
                        })
                        .fail(function (error) {
                            showErrorMessage(`Failed to download JSON file: ${error}`, null, true);
                        });

                        // The following will download merged JSON file directly from browser:
                        //let mergedBlob = new Blob([JSON.stringify(merged)], { type: "application/json" });
                        //let url = URL.createObjectURL(mergedBlob);
                        //let link = document.createElement('a');
                        //link.href = url;
                        //link.download = 'merged.json';
                        //link.click();
                    }
                })
                .fail(function (_, error) {
                    showErrorMessage(`Failed to download merged JSON file from "${url}": ${error}`, null, true);
                });
            });
        });

        // Save settings in local storage when user leaves the page
        $(window).on('beforeunload', function () {
            const rows = [];

            $('#urlTable > tbody > tr').each(function (i, elem) {
                const url = $(this).children().children('.urlInput').val();
                const checked = $(this).children().children('.downloadCheckbox').is(':checked');
                rows.push({ url: url, checked: checked });
            });

            localStorage.setItem('rows', JSON.stringify(rows));
            localStorage.setItem('downloadPath', $('#downloadPath').val());
        });
    });

    function copyToClipboard(text) {
        let result = false;

        if (document.queryCommandSupported && document.queryCommandSupported('copy')) {
            const textarea = document.createElement('textarea');

            textarea.textContent = text;
            textarea.style.position = 'fixed';
            document.body.appendChild(textarea);
            textarea.select();

            try {
                result = document.execCommand('copy');
            }
            catch (ex) {
                console.warn('Copy to clipboard failed.', ex);
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        else {
            console.warn('Clipboard function unavailable.');
        }

        return result;
    }
</script>
