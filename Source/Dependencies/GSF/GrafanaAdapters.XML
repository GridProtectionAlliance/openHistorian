<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GrafanaAdapters</name>
    </assembly>
    <members>
        <member name="T:GrafanaAdapters.DataSources.DataSourceValueCache">
            <summary>
            Represents a cache of all defined data source value types and their default instances.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueCache.DefaultInstances">
            <summary>
            Gets default instance list of all the defined data source value type implementations.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueCache.LoadedTypes">
            <summary>
            Gets cache of defined data source value types loaded from local assemblies.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DataSources.DataSourceValueCache.GetDefaultInstance(System.Int32)">
            <summary>
            Gets a default instance of the specified data source value type (by index).
            </summary>
            <param name="dataTypeIndex">Index of target <see cref="T:GrafanaAdapters.DataSources.IDataSourceValue"/> to lookup.</param>
            <returns>Default instance of the specified data source value type, found by index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Invalid data type index provided.</exception>
            <remarks>
            Use this method to provide a cleaner, more specific, error message to the user when a
            data source value type is specified that is not found.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.DataSources.DataSourceValueCache.GetTypeIndex(System.String)">
            <summary>
            Gets type index for the specified data source value type; or, -1 if not found
            </summary>
            <param name="dataTypeName">Type name of target <see cref="T:GrafanaAdapters.DataSources.IDataSourceValue"/> to lookup.</param>
            <returns>Index of specified data source value type; or, -1 if not found.</returns>
        </member>
        <member name="T:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue">
            <summary>
            Represents an individual time-series value from a data source.
            </summary>
            <remarks>
            This is the standard data source value structure for common time-series
            values used by Grafana.
            </remarks>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.ValueIndex">
            <summary>
            Data point index for value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.TimeIndex">
            <summary>
            Data point index for time.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.CompareTo(GrafanaAdapters.DataSources.BuiltIn.DataSourceValue)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.Equals(GrafanaAdapters.DataSources.BuiltIn.DataSourceValue)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.TransposeCompute(System.Func{System.Double,System.Double})">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.LookupMetadata(System.Data.DataSet,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.TypeIndex">
            <summary>
            Gets the type index for <see cref="T:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue"/>.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.MetadataTableName">
            <summary>
            Defines the primary metadata table name for a <see cref="T:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue"/>.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.Target">
            <summary>
            Query target, e.g., a point-tag.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.Value">
            <summary>
            Queried value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.Time">
            <summary>
            Timestamp, in Unix epoch milliseconds, of queried value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.DataSourceValue.Flags">
            <summary>
            Flags for queried value.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.DataSources.BuiltIn.PhasorValueTarget">
            <summary>
            Defines a default target for a phasor value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValueTarget.Magnitude">
            <summary>
            Target the magnitude components of the phasor value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValueTarget.Angle">
            <summary>
            Target the angle components of the phasor value.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.DataSources.BuiltIn.PhasorValue">
            <summary>
            Represents an individual time-series phasor value from a data source.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.MetadataTableName">
            <summary>
            Defines the primary metadata table name for a <see cref="T:GrafanaAdapters.DataSources.BuiltIn.PhasorValue"/>.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.Target">
            <summary>
            Query target, i.e., a point-tag representing the phasor.
            </summary>
            <remarks>
            This commonly represents the overlapping point-tag name from the magnitude and angle measurements.
            </remarks>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.MagnitudeTarget">
            <summary>
            Query magnitude target, i.e., point-tag for the magnitude measurement.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.AngleTarget">
            <summary>
            Query angle target, e.g., point-tag for the angle measurement.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.Magnitude">
            <summary>
            Queried magnitude value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.Angle">
            <summary>
            Queried angle value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.Time">
            <summary>
            Timestamp, in Unix epoch milliseconds, of queried value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.Flags">
            <summary>
            Flags for queried value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.PrimaryValueTarget">
            <summary>
            Gets or sets the primary target for the phasor value.
            </summary>
            <remarks>
            This property is used to determine which value field of the phasor value to use when using the data
            source as an <see cref="T:GrafanaAdapters.DataSources.IDataSourceValue`1"/>. This is useful in default function computations that
            do not need to operate on both the magnitude and angle values of the phasor value struct. For example,
            see <see cref="T:GrafanaAdapters.Functions.BuiltIn.Minimum`1"/> and <see cref="T:GrafanaAdapters.Functions.BuiltIn.Maximum`1"/> functions that only operate on magnitudes.
            Primary target value defaults to <see cref="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValueTarget.Magnitude"/> but can be overridden to
            <see cref="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValueTarget.Angle"/> if the function only needs to operate on the angle values.
            See <see cref="T:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1"/> for example of using only angle values.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.CompareTo(GrafanaAdapters.DataSources.BuiltIn.PhasorValue)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.Equals(GrafanaAdapters.DataSources.BuiltIn.PhasorValue)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.TransposeCompute(System.Func{System.Double,System.Double})">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.LookupMetadata(System.Data.DataSet,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="F:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.TypeIndex">
            <summary>
            Gets the type index for <see cref="T:GrafanaAdapters.DataSources.BuiltIn.PhasorValue"/>.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DataSources.BuiltIn.PhasorValue.AngleAsTarget(GrafanaAdapters.DataSources.BuiltIn.PhasorValue)">
            <summary>
            Update phasor value primary target to operate on angle values.
            </summary>
            <param name="dataValue">Source phasor value.</param>
            <returns>Phasor value updated to operate on angle values.</returns>
        </member>
        <member name="T:GrafanaAdapters.DataSources.IDataSourceValue">
            <summary>
            Defines an interface for a data source value.
            </summary>
            <remarks>
            Implementations of this interface must be structs.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.Target">
            <summary>
            Gets the query target, e.g., a point-tag.
            </summary>
            <remarks>
            If data source value has multiple targets, this should be the primary target.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.Value">
            <summary>
            Gets the value of data source value.
            </summary>
            <remarks>
            If data source has more than one value, this should be the primary value.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.Time">
            <summary>
            Gets timestamp, in Unix epoch milliseconds, of data source value.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.Flags">
            <summary>
            Gets measurement state and quality flags of data source value.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.TimeSeriesValue">
            <summary>
            Gets time-series array values of data source value, e.g., [Value, Time].
            </summary>
            <remarks>
            To ensure data will work with Grafana data source, all values should
            precede single time value. Time is always the last value in the array.
            Time value should be in Unix epoch milliseconds.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.TimeSeriesValueDefinition">
            <summary>
            Gets the format definition of a time-series array value, e.g., ["Value", "Time"].
            </summary>
            <remarks>
            These string values are used to define field value names that are used in
            a <see cref="P:GrafanaAdapters.DataSources.IDataSourceValue.TimeSeriesValue"/> result.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.ValueIndex">
            <summary>
            Gets the index of the value within the <see cref="P:GrafanaAdapters.DataSources.IDataSourceValue.TimeSeriesValue"/> array.
            </summary>
            <remarks>
            If data source value has multiple targets, this should be the value index of the primary target.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.LoadOrder">
            <summary>
            Gets the desired load order for the data source value type.
            </summary>
            <remarks>
            This value is used to determine the order in which data source value types are
            presented to the user in the Grafana data source configuration UI. If multiple
            data source value types have the same load order, they will use a secondary
            sort order, i.e., alphabetically by type name. Ideally, these values should be
            as unique as possible to avoid any secondary sorting.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.MetadataTableName">
            <summary>
            Gets the name of the primary metadata table for the data source.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.RequiredMetadataFieldNames">
            <summary>
            Gets the names of the required metadata fields for the data source.
            </summary>
            <remarks>
            <para>
            This defines a list of the required metadata fields for a table in the data source. If any of
            these are missing, the data source table will not be available for use. This list should at
            least include key field names for the <see cref="P:GrafanaAdapters.DataSources.IDataSourceValue.MetadataTableName"/> that may be needed by
            the <see cref="M:GrafanaAdapters.DataSources.IDataSourceValue.GetTargetIDSet(System.Data.DataRow)"/> or <see cref="M:GrafanaAdapters.DataSources.IDataSourceValue`1.AssignToTimeValueMap(System.String,GrafanaAdapters.DataSources.BuiltIn.DataSourceValue,System.Collections.Generic.SortedList{System.Double,`0},System.Data.DataSet)"/>
            functions. For example, in order to use a table named 'ActiveMeasurements', the required
            metadata field names might be: 'ID', 'SignalID', and 'PointTag'.
            </para>
            <para>
            Note that system generally assumes that the fields 'PointTag', a unique string-based alpha-numeric
            identifier for a measurement, 'ID', a unique string-based measurement key formatted identifier
            (e.g., PPA:101), and 'SignalID', a unique Guid-based identifier, all exist in the metadata table.
            However, these fields do not have to be included as required metadata field names. The 'PointTag'
            field is used to lookup records in the metadata. The 'ID' and 'SignalID' fields are used by
            'AdapterBase.ParseFilterExpression' for direct parsing of measurement key and signal ID when
            expression is not a filter expression. Direct parsing always uses the primary metadata table
            name for lookups, see <see cref="P:GrafanaAdapters.DataSources.IDataSourceValue.MetadataTableName"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.AugmentMetadata">
            <summary>
            Gets function that augments metadata for the data source, or <c>null</c>
            if metadata augmentation is not needed.
            </summary>
            <remarks>
            Returned function augments metadata for the target data source value type. Metadata is a shared
            resource and may be long-lived, as such method should only add to existing metadata for needs of
            the data source value type and only perform needed augmentation once per provided instance of
            metadata. For example, if a new table is added to the metadata for the data source value type,
            first step should be to check if table already exists.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.DataSources.IDataSourceValue.LookupMetadata(System.Data.DataSet,System.String,System.String)">
            <summary>
            Looks up metadata record for the specified target.
            </summary>
            <param name="metadata">Metadata data set.</param>
            <param name="tableName">Table name to search.</param>
            <param name="target">Target to lookup.</param>
            <returns>Filtered metadata row for the specified target.</returns>
            <remarks>
            Implementations should cache metadata lookups for performance.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.DataSources.IDataSourceValue.GetTargetIDSet(System.Data.DataRow)">
            <summary>
            Gets the set of measurement key and point tag identifiers associated with a target.
            </summary>
            <param name="record">Source metadata record.</param>
            <returns>set of measurement key and point tag identifiers associated with a target.</returns>
            <remarks>
            A single target will be associated with a measurement key and point tag for each value
            in the data source value. The target will be a common name for the group of values in
            the data source value structure.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.DataSources.IDataSourceValue.RecordFromKey(GSF.TimeSeries.MeasurementKey,System.Data.DataSet)">
            <summary>
            Gets the metadata record for the specified measurement key.
            </summary>
            <param name="key">Source measurement key.</param>
            <param name="metadata">Source metadata.</param>
            <returns>The metadata record for the specified measurement key.</returns>
        </member>
        <member name="P:GrafanaAdapters.DataSources.IDataSourceValue.DataTypeIndex">
            <summary>
            Gets the data source value type index.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.DataSources.IDataSourceValue`1">
            <summary>
            Defines an interface for a typed data source value.
            </summary>
            <typeparam name="T">Target <see cref="T:GrafanaAdapters.DataSources.IDataSourceValue"/> type.</typeparam>
        </member>
        <member name="M:GrafanaAdapters.DataSources.IDataSourceValue`1.AssignToTimeValueMap(System.String,GrafanaAdapters.DataSources.BuiltIn.DataSourceValue,System.Collections.Generic.SortedList{System.Double,`0},System.Data.DataSet)">
            <summary>
            Assign queried data source value to time-value map.
            </summary>
            <param name="pointTag">Measurement point tag.</param>
            <param name="dataValue">Queried data source value.</param>
            <param name="timeValueMap">Time-value map for specified <paramref name="dataValue"/>.</param>
            <param name="metadata">Source metadata.</param>
            <remarks>
            Provided time-value map is specific to the queried data source value, by target, and is keyed by Unix
            epoch milliseconds timestamp. This function is used to assign the queried data source value to the
            time-value map. If the data source value type has multiple fields, this function will be called once
            per each field in the data source value for a given timestamp.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.DataSources.IDataSourceValue`1.TransposeCompute(System.Func{System.Double,System.Double})">
            <summary>
            Executes provided function for data source fields, applying the results
            to a copy of the data source value and returns the new result.
            </summary>
            <param name="function">Function to compute.</param>
            <returns>Computed result.</returns>
            <remarks>
            This function is used to compute a new data source value, applying the
            specified function operation to all value fields in the data source.
            </remarks>
        </member>
        <member name="T:GrafanaAdapters.DataSources.DataSourceValueGroup`1">
            <summary>
            Defines a class that represents an enumeration of T for a given target.
            </summary>
            <remarks>
            This is a group construct keyed on <see cref="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.Target"/> for data source value enumerations.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.Target">
            <summary>
            Gets or sets target, e.g., a point-tag, representative of all <see cref="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.Source"/> values.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.RootTarget">
            <summary>
            Gets or sets the root target expression, without any referenced series functions.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.SourceTarget">
            <summary>
            Gets a reference to the original target that was the source of these results.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.Source">
            <summary>
            Gets or sets data source values enumerable.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.DropEmptySeries">
            <summary>
            Gets flag that determines if empty series are produced.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.RefID">
            <summary>
            Gets a query name identifier, assigned by Grafana, used to identify a specific query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.MetadataMap">
            <summary>
            Gets user selected metadata associated with the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DataSources.DataSourceValueGroup`1.SyntaxError">
            <summary>
            Gets or sets a an error message that indicates a syntax error in the query request.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DataSources.DataSourceValueGroup`1.Clone">
            <summary>
            Creates a new <see cref="T:GrafanaAdapters.DataSources.DataSourceValueGroup`1"/> from this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrafanaAdapters.DataSources.DataSourceValueGroup`1.FromException(GrafanaAdapters.Functions.QueryParameters,System.String)">
            <summary>
            Creates a new <see cref="T:GrafanaAdapters.DataSources.DataSourceValueGroup`1"/> for an exception.
            </summary>
            <param name="queryParameters">Source query parameters.</param>
            <param name="syntaxError">Exception message.</param>
            <returns>New <see cref="T:GrafanaAdapters.DataSources.DataSourceValueGroup`1"/> for an exception.</returns>
        </member>
        <member name="T:GrafanaAdapters.Metadata.DataSetAdapter">
            <summary>
            Represents an adapter that holds the Grafana data source's metadata
            and is used to augment data source on demand.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.Metadata.DataSetAdapter.GetAugmentedDataSet``1">
            <summary>
            Gets the Grafana data source metadata, augmented as needed for the target data
            source value type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Data source value type for metadata augmentation.</typeparam>
            <returns>
            Grafana data source metadata, augmented as needed for the target data source
            value type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.DataSetAdapter.GetAugmentedDataSet(GrafanaAdapters.DataSources.IDataSourceValue)">
            <summary>
            Gets the Grafana data source metadata, augmented as needed for the target data
            source value type instance <paramref name="value"/>.
            </summary>
            <param name="value">Instance of data source value type to use for metadata augmentation.</param>
            <returns>
            Grafana data source metadata, augmented as needed for the target data source
            </returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.DataSetAdapter.op_Implicit(System.Data.DataSet)~GrafanaAdapters.Metadata.DataSetAdapter">
            <summary>
            Implicitly converts a <see cref="T:System.Data.DataSet"/> to a <see cref="T:GrafanaAdapters.Metadata.DataSetAdapter"/>.
            </summary>
            <param name="source">Source <see cref="T:System.Data.DataSet"/> to convert.</param>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.SplitAlias(System.String,System.String@)">
            <summary>
            Splits any defined alias from a point tag expression.
            </summary>
            <param name="tagExpression">Source point tag expression that can contain an alias.</param>
            <param name="alias">Alias, if defined.</param>
            <returns>Point tag name without any alias.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.TagFromKey(GSF.TimeSeries.MeasurementKey,System.Data.DataSet,System.String,System.String,System.String)">
            <summary>
            Looks up point tag from measurement <paramref name="key"/> value.
            </summary>
            <param name="key"><see cref="T:GSF.TimeSeries.MeasurementKey"/> to lookup.</param>
            <param name="metadata">Source metadata.</param>
            <param name="table">Table to search.</param>
            <param name="pointTagField">Point tag field name.</param>
            <param name="idField">Measurement key-based ID field name.</param>
            <returns>Point tag name from source metadata.</returns>
            <remarks>
            This function uses the <see cref="M:System.Data.DataTable.Select(System.String)"/> function which uses a linear
            search algorithm that can be slow for large data sets, it is recommended that any results
            for calls to this function be cached to improve performance.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.RecordFromTag(System.String,System.Data.DataSet,System.String,System.String)">
            <summary>
            Looks up metadata record from point tag.
            </summary>
            <param name="pointTag">Point tag to lookup.</param>
            <param name="metadata">Source metadata.</param>
            <param name="table">Table to search.</param>
            <param name="pointTagField">Point tag field name.</param>
            <returns>Metadata record from source metadata for provided point tag.</returns>
            <remarks>
            <para>
            Use "table.pointTag" format to specify which table to pull point tag from.
            </para>
            <para>
            This function uses the <see cref="M:System.Data.DataTable.Select(System.String)"/> function which uses a linear
            search algorithm that can be slow for large data sets, it is recommended that any results
            for calls to this function be cached to improve performance.
            </para>
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.RecordFromKey(System.String,System.Data.DataSet,System.String,System.String)">
            <summary>
            Looks up metadata record from measurement key.
            </summary>
            <param name="keyName">Measurement key, as string, to lookup.</param>
            <param name="metadata">Source metadata.</param>
            <param name="table">Table to search.</param>
            <param name="idField">Measurement key-based ID field name.</param>
            <returns>Metadata record from source metadata for provided measurement key.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.GetMetadata(System.Data.DataSet,System.String,System.String)">
            <summary>
            Gets metadata record from source metadata.
            </summary>
            <param name="metadata">Source metadata.</param>
            <param name="table">Table to search.</param>
            <param name="expression">Expression to filter metadata.</param>
            <returns>Metadata record from source metadata, if expression is found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.KeyFromSignalID(System.String)">
            <summary>
            Gets measurement key from signal ID.
            </summary>
            <param name="signalID">Signal ID to lookup.</param>
            <returns>
            Measurement key associated with specified signal ID, if found; otherwise <see cref="F:GSF.TimeSeries.MeasurementKey.Undefined"/>.
            </returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.SignalIDFromRecord(System.Data.DataRow,System.String)">
            <summary>
            Gets signal ID from metadata record.
            </summary>
            <param name="record">Source metadata record.</param>
            <param name="signalIDField">Signal ID field name.</param>
            <returns>Signal ID from metadata record.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.KeyFromRecord(System.Data.DataRow,System.String,System.String)">
            <summary>
            Gets measurement key from metadata record.
            </summary>
            <param name="record">Source metadata record.</param>
            <param name="idField">ID field name.</param>
            <param name="signalIDField">Signal ID field name.</param>
            <returns>Mapped measurement key from metadata record.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.ParseAsTableAndField``1(System.String)">
            <summary>
            Parses target as table and field name.
            </summary>
            <param name="target">Target to parse.</param>
            <returns>Target parsed as table and field name.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.MetadataTableIsValid(GrafanaAdapters.DataSources.IDataSourceValue,System.Data.DataSet,System.String)">
            <summary>
            Determines if metadata table is valid for the specified data source value type instance.
            </summary>
            <param name="instance">Data source value type instance.</param>
            <param name="metadata">Source metadata.</param>
            <param name="tableName">Target table name.</param>
            <returns><c>true</c> if metadata table is valid for the specified data source value type instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.GetMetadataMap``1(System.Data.DataSet,System.String,GrafanaAdapters.Functions.QueryParameters)">
            <summary>
            Gets metadata map for the specified target and selections.
            </summary>
            <param name="metadata">Source metadata.</param>
            <param name="rootTarget">Root target to use for metadata lookup.</param>
            <param name="queryParameters">Query parameters.</param>
            <returns>Mapped metadata for the specified target and selections.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.FirstTarget(System.String)">
            <summary>
            Gets first target from a target expression.
            </summary>
            <param name="target">Source target expression.</param>
            <returns>Fist target from target expression.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.Lookup``1(System.Data.DataSet,System.String,System.String)">
            <summary>
            Looks up metadata record for the specified target.
            </summary>
            <param name="metadata">Metadata data set.</param>
            <param name="tableName">Table name to search.</param>
            <param name="target">Target to lookup.</param>
            <returns>Filtered metadata row for the specified target.</returns>
            <remarks>
            Implementations should cache metadata lookups for performance.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.GetMetadataMap``1(System.Data.DataSet,System.String,System.Collections.Generic.IList{System.ValueTuple{System.String,System.String[]}})">
            <summary>
            Gets metadata map for the specified target and selections.
            </summary>
            <param name="metadata">Source metadata.</param>
            <param name="rootTarget">Root target to use for metadata lookup.</param>
            <param name="metadataSelections">Metadata selections.</param>
            <returns>Mapped metadata for the specified target and selections.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.Parse``1(System.String,System.Data.DataSet)">
            <summary>
            Parses a user provided target expression which could contain point tags, measurement keys, Guid-based signal IDs,
            or filter expressions, then returning the set of measurement key and point tag identifiers associated with the
            target along with any defined alias for the target.
            </summary>
            <param name="target">Target expression to parse.</param>
            <param name="metadata">Source metadata.</param>
            <returns>Tuple representing set of target and associated IDs, as parsed from expression, and any defined alias.</returns>
        </member>
        <member name="M:GrafanaAdapters.Metadata.MetadataExtensions.SplitComponents(System.String)">
            <summary>
            Splits a combined target into a point tag and target.
            </summary>
            <param name="target">Combined target of point tag and target.</param>
            <returns>Tuple of point tag and target.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid combined target encountered.</exception>
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Sqrt`1">
            <summary>
            Returns a series of values that represent the square root each of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Sqrt(expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Sqrt(FILTER ActiveMeasurements WHERE SignalType='IPHM')</c><br/>
            Variants: Sqrt<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Sqrt`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Sqrt`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Sqrt`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Sqrt`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Sqrt`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Sqrt`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Pow`1">
            <summary>
            Returns a series of values that represent each of the values in the source series raised to the power of <c>N</c>.
            <c>N</c> is a floating point value representing an exponent used to raise each value of the source series to the specified power.
            <c>N</c> can either be constant value or a named target available from the expression.
            </summary>
            <remarks>
            Signature: <c>Pow(N, expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Pow(2, FILTER ActiveMeasurements WHERE SignalType='CALC')</c><br/>
            Variants: Pow<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Pow`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Pow`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Pow`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Pow`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Pow`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Pow`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Pow`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1">
            <summary>
            Returns a series of values that represent the rolling average of the values in the source series. The <c>windowSize</c> parameter, optional,
            is a positive integer value representing a total number of data points to use for each of the values in the rolling average results. If no
            <c>windowSize</c> is provided, the default value is the square root of the total input values in the series. The <c>windowSize</c> can either
            be constant value or a named target available from the expression. Function operates by producing a mean over each data window.
            </summary>
            <remarks>
            Signature: <c>RollingAverage([windowSize = sqrt(len)], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>RollingAvg(150, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: RollingAverage, RollingAvg, RollingMean<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.RollingAverage`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Evaluate`1">
            <summary>
            Returns a single value that represents the evaluation of an expression over a slice of the values in the source series.
            The <c>sliceTolerance</c> parameter is a floating-point value that must be greater than or equal to zero that represents
            the desired time tolerance, in seconds, for the time slice. The <c>evalExpression</c> parameter must always be expressed
            in braces, e.g., <c>{ expression }</c>; expression is strongly typed, but not case sensitive; expression is expected to
            return a value that can be evaluated as a floating-point number. Aliases of target tag names are used as variable names
            in the <c>evalExpression</c>  when defined. If no alias is defined, all non-valid characters will be removed from target
            tag name, for example, variable name for tag <c>PMU.032-PZR_CI:ANG</c> would be <c>PMU032PZR_CIANG</c>. All targets are
            also available as index suffixed variables named <c>_v</c>, for example, first and second target values are available as
            <c>_v0</c> and <c>_v1</c>. The <c>Evaluate</c> function is always evaluated as a slice, any specified group operation
            prefix will be ignored. Default system types available to expressions are <c>System.Math</c> and <c>System.DateTime</c>.
            See <see href="https://www.codeproject.com/Articles/19768/Flee-Fast-Lightweight-Expression-Evaluator">details</see> on
            valid expressions. Use the <c>Imports</c> command to define more types for <c>evalExpression</c>.
            </summary>
            <remarks>
            Signature: <c>Evaluate(sliceTolerance, evalExpression, filterExpression)</c><br/>
            Returns: Single value per slice<br/>
            Example 1: <c>Evaluate(0.0333, { R* Sin(T* PI / 180)}, T=GPA_SHELBY-PA1:VH; R=GPA_SHELBY-PM1:V)</c><br/>
            Example 2: <c>Eval(0.0333, { (GPA_SHELBYPA2VH - GPA_SHELBYPA1VH) % 360 - 180}, GPA_SHELBY-PA1:VH; GPA_SHELBY-PA2:VH)</c><br/>
            Example 3: <c>eval(0.5, { (if (_v0 &gt; 62, _v2, if (_v0 &lt; 57, _v2, _v0)) + if (_v1 &gt; 62, _v2, if (_v1 &lt; 57, _v2, _v1))) / 2 }, FILTER TOP 3 ActiveMeasurements WHERE SignalType = 'FREQ')</c><br/>
            Example 4: <c>evaluate(0.0333, { if (abs(b - a) &gt; 180, if (sign(b - a) &lt; 0, b - a + 360, b - a - 360), b - a)}, a=PMU.009-PZR.AV:ANG; b=PMU.008-PZR.AV:ANG)</c><br/>
            Variants: Evaluate, Eval<br/>
            Execution: Deferred enumeration
            <para>
            The following special command-level parameter is available to the <c>Evaluate</c> function: <c>Imports={expr}</c><br/>
            This command adds custom .NET type imports that can be used with the <c>Evaluate</c> function. <c>expr</c>defines a
            key-value pair definition of assembly name, i.e., <c>AssemblyName</c> = DLL filename without suffix, and type name, i.e.,
            <c>TypeName</c> = fully qualified case-sensitive type name, to be imported. Key-value pairs are separated with commas and
            multiple imports are by separated semi-colons. <c>expr</c> must be surrounded by braces. Example:
            <c>; imports={AssemblyName=mscorlib, TypeName=System.TimeSpan; AssemblyName=MyCode, TypeName=MyCode.MyClass}</c>
            </para>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.AllowedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.CheckAllowedGroupOperation(GrafanaAdapters.Functions.GroupOperations)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.ComputeSliceAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.ParseParameters(GrafanaAdapters.Functions.QueryParameters,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.FormatTargetName(GrafanaAdapters.Functions.GroupOperations,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Evaluate`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1">
            <summary>
            Returns a series of values that represent the absolute value each of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>AbsoluteValue(expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>AbsoluteValue(FILTER ActiveMeasurements WHERE SignalType='CALC')</c><br/>
            Variants: AbsoluteValue, Abs<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.AbsoluteValue`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Average`1">
            <summary>
            Returns a single value that represents the mean of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Average(expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Average(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Average, Avg, Mean<br/>
            Execution: Immediate enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Average`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Average`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Average`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Average`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Average`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Average`1.ComputeDataSourceValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Average`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Average`1.ComputePhasorValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Bottom`1">
            <summary>
            Returns a series of <c>N</c>, or <c>N%</c> of total, values that are the smallest in the source series.
            <c>N</c> is either a positive integer value, representing a total, that is greater than zero - or - a floating point value,
            suffixed with '%' representing a percentage, that must range from greater than 0 to less than or equal to 100.
            Third parameter, optional, is a boolean flag representing if time in dataset should be normalized - defaults to true.
            <c>N</c> can either be constant value or a named target available from the expression. Any target values that fall between 0
            and 1 will be treated as a percentage.
            </summary>
            <remarks>
            Signature: <c>Bottom(N|N%, [normalizeTime = true], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Bottom(100, false, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Bottom, Bot, Smallest<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Bottom`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Bottom`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Bottom`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Bottom`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Bottom`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Bottom`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Bottom`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Bottom`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Bottom`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Bottom`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Ceiling`1">
            <summary>
            Returns a series of values that represent the smallest integral value that is greater than or equal to each of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Ceiling(expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Ceiling(FILTER ActiveMeasurements WHERE SignalType='IPHM')</c><br/>
            Variants: Ceiling, Ceil<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Ceiling`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Ceiling`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Ceiling`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Ceiling`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Ceiling`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Ceiling`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Ceiling`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Count`1">
            <summary>
            Returns a single value that is the count of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Count(expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Count(PPA:1; PPA:2; PPA:3)</c><br/>
            Variants: Count<br/>
            Execution: Immediate enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Count`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Count`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Count`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Count`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Count`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Count`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Count`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Derivative`1">
            <summary>
            Returns a series of values that represent the rate of change, per time units, for the difference between consecutive values in the source series.
            The <c>units</c> parameter, optional, specifies the type of time units and must be one of the following: Seconds, Nanoseconds, Microseconds,
            Milliseconds, Minutes, Hours, Days, Weeks, Ke (i.e., traditional Chinese unit of decimal time), Ticks (i.e., 100-nanosecond intervals),
            PlanckTime or AtomicUnitsOfTime - defaults to Seconds.
            </summary>
            <remarks>
            Signature: <c>Derivative([units = Seconds], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Derivative(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Derivative, Der<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Derivative`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Derivative`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Derivative`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Derivative`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Derivative`1.AllowedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Derivative`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Derivative`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Derivative`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Derivative`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Derivative`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Difference`1">
            <summary>
            Returns a series of values that represent the difference between consecutive values in the source series.
            </summary>
            <remarks>
            Signature: <c>Difference(expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Difference(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Difference, Diff<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Difference`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Difference`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Difference`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Difference`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Difference`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Difference`1.TransposeCompute(`0,`0)">
            <summary>
            Computes the difference between the current value and the last value.
            </summary>
            <param name="currentValue">Source value.</param>
            <param name="lastValue">Last result.</param>
            <returns>Calculated difference.</returns>
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Difference`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Difference`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Difference`1.ComputeDataSourceValue.TransposeCompute(GrafanaAdapters.DataSources.BuiltIn.DataSourceValue,GrafanaAdapters.DataSources.BuiltIn.DataSourceValue)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Difference`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Difference`1.ComputePhasorValue.TransposeCompute(GrafanaAdapters.DataSources.BuiltIn.PhasorValue,GrafanaAdapters.DataSources.BuiltIn.PhasorValue)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Distinct`1">
            <summary>
            Returns a series of values that represent the unique set of values in the source series.
            </summary>
            <remarks>
            Signature: <c>Distinct(expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Distinct(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Distinct, Unique<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Distinct`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Distinct`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Distinct`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Distinct`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Distinct`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Distinct`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Distinct`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Distinct`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1">
            <summary>
            Returns a series of values that represent a filtered set of the values in the source series where each value falls outside the specified low and high.
            The <c>low</c> and <c>high</c> parameter values are floating-point numbers that represent the range of values excluded in the return series. Third parameter,
            optional, is a boolean flag that determines if range values are inclusive, i.e., excluded values are &lt;= low or &gt;= high - defaults to false, which means
            values are exclusive, i.e., excluded values are &lt; low or &gt; high. Function allows a fourth optional parameter that is a boolean flag - when four parameters
            are provided, third parameter determines if low value is inclusive and forth parameter determines if high value is inclusive. The <c>low</c> and <c>high</c>
            parameter values can either be constant values or named targets available from the expression.
            </summary>
            <remarks>
            Signature: <c>ExcludeRange(low, high, [inclusive = false], expression)</c> -or- <c>ExcludeRange(low, high, [lowInclusive = false], [highInclusive = false], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>ExcludeRange(-180.0, 180.0, true, false, FILTER ActiveMeasurements WHERE SignalType LIKE '%PHA')</c><br/>
            Variants: ExcludeRange, Exclude<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.ExcludeRange`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1">
            <summary>
            Returns a series of values that represent a filtered set of the values in the source series where each value is a real number, i.e., value is not NaN.
            Parameter <c>alsoFilterInfinity</c>, optional, is a boolean flag that determines if infinite values should also be excluded - defaults to true.
            </summary>
            <remarks>
            Signature: <c>FilterNaN([alsoFilterInfinity = true], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>FilterNaN(FILTER ActiveMeasurements WHERE SignalType='VPHM')</c><br/>
            Variants: FilterNaN<br/>
            Execution: Deferred enumeration.
            </remarks> 
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.FilterNaN`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.First`1">
            <summary>
            Returns a series of <c>N</c>, or <c>N%</c> of total, values from the start of the source series.
            <c>N</c> is either a positive integer value, representing a total, that is greater than zero - or - a floating point value,
            suffixed with '%' representing a percentage, that must range from greater than 0 to less than or equal to 100 - defaults to 1.
            <c>N</c> can either be constant value or a named target available from the expression. Any target values that fall between 0
            and 1 will be treated as a percentage.
            </summary>
            <remarks>
            Signature: <c>First([N|N% = 1], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>First(5%, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: First<br/>
            Execution: Immediate in-memory array load, when <c>N</c> is defined; otherwise, immediate enumeration of one, i.e., first value.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.First`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.First`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.First`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.First`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.First`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.First`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.First`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.First`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Floor`1">
            <summary>
            Returns a series of values that represent the smallest integral value that is less than or equal to each of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Floor(expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Floor(FILTER ActiveMeasurements WHERE SignalType='IPHM')</c><br/>
            Variants: Floor<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Floor`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Floor`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Floor`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Floor`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Floor`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Floor`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1">
            <summary>
            Returns a series of values that represent a filtered set of the values in the source series where each value falls between the specified low and high.
            The <c>low</c> and <c>high</c> parameter values are floating-point numbers that represent the range of values allowed in the return series. Third parameter,
            optional, is a boolean flag that determines if range values are inclusive, i.e., allowed values are &gt;= low and &lt;= high - defaults to false, which means
            values are exclusive, i.e., allowed values are &gt; low and &lt; high. Function allows a fourth optional parameter that is a boolean flag - when four parameters
            are provided, third parameter determines if low value is inclusive and forth parameter determines if high value is inclusive. The <c>low</c> and <c>high</c>
            parameter values can either be constant values or named targets available from the expression.
            </summary>
            <remarks>
            Signature: <c>IncludeRange(low, high, [inclusive = false], expression)</c> -or- <c>IncludeRange(low, high, [lowInclusive = false], [highInclusive = false], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>IncludeRange(59.90, 60.10, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: IncludeRange, Include<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.IncludeRange`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Interval`1">
            <summary>
            Returns a series of values that represent a decimated set of the values in the source series based on the specified interval <c>N</c>, in time units.
            <c>N</c> is a floating-point value that must be greater than or equal to zero that represents the desired time interval, in time units, for the returned
            data. The <c>units</c>parameter, optional, specifies the type of time units and must be one of the following: Seconds, Nanoseconds, Microseconds,
            Milliseconds, Minutes, Hours, Days, Weeks, Ke (i.e., traditional Chinese unit of decimal time), Ticks (i.e., 100-nanosecond intervals), PlanckTime or
            AtomicUnitsOfTime - defaults to Seconds. <c>N</c> can either be constant value or a named target available from the expression.
            </summary>
            <remarks>
            Signature: <c>Interval(N, [units = Seconds], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Sum(Interval(5, FILTER ActiveMeasurements WHERE SignalType LIKE '%PHM'))</c><br/>
            Variants: Interval<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Interval`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Interval`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Interval`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Interval`1.AllowedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Interval`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Interval`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Interval`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Interval`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Interval`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Label`1">
            <summary>
            Renames a series with the specified label <c>value</c>. If multiple series are targeted, labels will be indexed starting at one, e.g., if there are three series
            in the target expression with a label value of "Max", series would be labeled as "Max 1", "Max 2" and "Max 3". Group operations on this function will be ignored.
            Label <c>value</c>parameter can be optionally quoted with single or double quotes.<br/><br/>
            The label parameter also supports substitutions when root target metadata can be resolved. For series values that directly map to a point tag, metadata value
            substitutions for the tag can be used in the label value - for example: <c>{Alias}</c>, <c>{ID}</c>, <c>{SignalID}</c>, <c>{PointTag}</c>, <c>{AlternateTag}</c>,
            <c>{SignalReference}</c>, <c>{Device}</c>, <c>{FramesPerSecond}</c>, <c>{Protocol}</c>, <c>{ProtocolType}</c>, <c>{SignalType}</c>, <c>{EngineeringUnits}</c>,
            <c>{PhasorType}</c>, <c>{PhasorLabel}</c>, <c>{BaseKV}</c>, <c>{Company}</c>, <c>{Longitude}</c>, <c>{Latitude}</c>, <c>{Description}</c>, etc. Each of these
            fields come from the "ActiveMeasurements" metadata source, as defined in the "ConfigurationEntity" table. Where applicable, substitutions can be used along with
            fixed label text in any combination, e.g.: <c>'Series {ID} [{PointTag}]'</c>.<br/><br/>
            Other metadata sources that target time-series measurements can also be used for substitutions so long the source is defined in the "ConfigurationEntity" table
            and the metadata columns include a "PointTag" field that can be matched to the target Grafana series name. To use any field from another defined metadata source,
            use the following substitution parameter format: <c>{TableName.FieldName}</c>.
            </summary>
            <remarks>
            Signature: <c>Label(value, expression)</c><br/>
            Returns: Series of values.<br/>
            Example 1: <c>Label('AvgFreq', SetAvg(FILTER TOP 20 ActiveMeasurements WHERE SignalType='FREQ'))</c>
            Example 2: <c>Label("{Alias} {EngineeringUnits}", Shelby=GPA_SHELBY:FREQ)</c>
            Example 3: <c>Label({AlternateTag}, FILTER TOP 10 ActiveMeasurements WHERE SignalType LIKE '%PH%')</c>
            Example 4: <c>Label('Shelby {ScadaTags.CircuitName} MW', FILTER ScadaTags WHERE SignalType='MW' AND Substation='SHELBY')</c>
            Variants: Label, Name<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Label`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Label`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Label`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Label`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Label`1.AllowedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Label`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Label`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Label`1.CheckAllowedGroupOperation(GrafanaAdapters.Functions.GroupOperations)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Label`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Label`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Label`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Last`1">
            <summary>
            Returns a series of <c>N</c>, or <c>N%</c> of total, values from the end of the source series.
            <c>N</c>, optional, is either a positive integer value, representing a total, that is greater than zero - or - a floating point value,
            suffixed with '%' representing a percentage, that must range from greater than 0 to less than or equal to 100 - defaults to 1.
            <c>N</c> can either be constant value or a named target available from the expression. Any target values that fall between 0
            and 1 will be treated as a percentage.
            </summary>
            <remarks>
            Signature: <c>Last([N|N% = 1], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Last(150, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Last<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Last`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Last`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Last`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Last`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Last`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Last`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Last`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Last`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Maximum`1">
            <summary>
            Returns a single value that is the maximum of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Maximum(expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Maximum(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Maximum, Max<br/>
            Execution: Immediate enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Maximum`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Maximum`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Maximum`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Maximum`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Maximum`1.ResultIsSetTargetSeries">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Maximum`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Maximum`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Maximum`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Median`1">
            <summary>
            Returns a single value that represents the median of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Median(expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Median(FILTER ActiveMeasurements WHERE SignalType='ALOG')</c><br/>
            Variants: Median, Med, Mid<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Median`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Median`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Median`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Median`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Median`1.ResultIsSetTargetSeries">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Median`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Median`1.ComputeDataSourceValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Median`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Median`1.ComputePhasorValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Minimum`1">
            <summary>
            Returns a single value that is the minimum of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Minimum(expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Minimum(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Minimum, Min<br/>
            Execution: Immediate enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Minimum`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Minimum`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Minimum`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Minimum`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Minimum`1.ResultIsSetTargetSeries">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Minimum`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Minimum`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Minimum`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Mode`1">
            <summary>
            Returns a single value that represents the mode of the values in the source series. The <c>numberOfBins</c>
            parameter is used to define how many bins to use when computing the mode for float-point values. A value of
            zero means use a majority-value algorithm which treats all inputs as integer-based values. When using a value
            of zero for the number of bins, user should consider using an integer function like <see cref="T:GrafanaAdapters.Functions.BuiltIn.Round`1"/>,
            with zero digits, <see cref="T:GrafanaAdapters.Functions.BuiltIn.Ceiling`1"/>, <see cref="T:GrafanaAdapters.Functions.BuiltIn.Floor`1"/> or <see cref="T:GrafanaAdapters.Functions.BuiltIn.Truncate`1"/> as an input
            to this function to ensure the conversion of values to integer-based values is handled as expected.
            </summary>
            <remarks>
            Signature: <c>Mode([numberOfBins = 0], expression)</c><br/>
            Returns: Single value.<br/>
            Example 1: <c>Mode(FILTER TOP 50 ActiveMeasurements WHERE SignalType='DIGI')</c><br/>
            Example 2: <c>Mode(20, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Example 3: <c>Mode(Round(FILTER ActiveMeasurements WHERE SignalType='FREQ'))</c><br/>
            Example 4: <c>Scale(100, true, Mode(0, Floor(Scale(100, FILTER TOP 20 ActiveMeasurements WHERE SignalType='FREQ'))))</c><br/>
            Variants: Mode<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Mode`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Mode`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Mode`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Mode`1.ResultIsSetTargetSeries">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Mode`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Mode`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Mode`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Mode`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Modulo`1">
            <summary>
            Returns a series of values that represent each of the values in the source series modulo by <c>N</c>.
            <c>N</c> is a floating point value representing a divisive factor to be applied to each value the source series.
            <c>N</c> can either be constant value or a named target available from the expression.
            </summary>
            <remarks>
            Signature: <c>Modulo(N, expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Mod(2, FILTER ActiveMeasurements WHERE SignalType='CALC')</c><br/>
            Variants: Modulo, Modulus, Mod<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Modulo`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Modulo`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Modulo`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Modulo`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Modulo`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Modulo`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Modulo`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Modulo`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1">
            <summary>
            Returns a series of values that represent the moving average of the values in the source series. The <c>windowSize</c> parameter,
            optional, is a positive integer value representing a total number of windows to use for the moving average. If no <c>windowSize</c>
            is provided, the default value is the square root of the total input values in the series. The <c>windowSize</c> can either be a
            constant value or a named target available from the expression. Function operates using a simple moving average (SMA) algorithm.
            </summary>
            <remarks>
            Signature: <c>MovingAverage([windowSize = sqrt(len)], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>MovingAvg(150, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: MovingAverage, MovingAvg, MovingMean, SimpleMovingAverage, SMA<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.MovingAverage`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Scale`1">
            <summary>
            Returns a series of values that represent each of the values in the source series scaled by <c>N</c>.
            <c>N</c> is a floating point value representing a scaling factor (multiplier or reciprocal) to be applied to each value the source series.
            <c>N</c> can either be constant value or a named target available from the expression. The <c>asReciprocal</c> is a boolean parameter that,
            when <c>true</c>, requests that <c>N</c> be treated as a reciprocal, i.e., 1 / <c>N</c>, thus resulting in a division operation instead of
            multiplication - defaults to <c>false</c>.
            </summary>
            <remarks>
            Signature: <c>Scale(N, [asReciprocal = false], expression)</c><br/>
            Returns: Series of values.<br/>
            Example 1: <c>Scale(1.5, FILTER ActiveMeasurements WHERE SignalType='CALC')</c><br/>
            Example 2: <c>Scale(0.5, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Example 3: <c>Scale(60, true, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Scale<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Scale`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Scale`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Scale`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Scale`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Scale`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Scale`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Scale`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Percentile`1">
            <summary>
            Returns a single value that represents the <c>N</c>th order percentile for the sorted values in the source series.
            <c>N</c> is a floating point value, representing a percentage, that must range from 0 to 100.
            </summary>
            <remarks>
            Signature: <c>Percentile(N[%], expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Percentile(10%, FILTER ActiveMeasurements WHERE SignalType='VPHM')</c><br/>
            Variants: Percentile, Pctl<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Percentile`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Percentile`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Percentile`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Percentile`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Percentile`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Percentile`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Percentile`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Percentile`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Random`1">
            <summary>
            Returns a series of <c>N</c>, or <c>N%</c> of total, values that are a random sample of the values in the source series.
            <c>N</c> is either a positive integer value, representing a total, that is greater than zero - or - a floating point value,
            suffixed with '%' representing a percentage, that must range from greater than 0 to less than or equal to 100.
            Third parameter, optional, is a boolean flag representing if time in dataset should be normalized - defaults to true.
            <c>N</c> can either be constant value or a named target available from the expression. Any target values that fall between 0
            and 1 will be treated as a percentage.
            </summary>
            <remarks>
            Signature: <c>Random(N|N%, [normalizeTime = true], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Random(25%, FILTER ActiveMeasurements WHERE SignalType='VPHM')</c><br/>
            Variants: Random, Rand, Sample<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Random`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Random`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Random`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Random`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Random`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Random`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Random`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Random`1.TransposeCompute(`0,`0[],System.Int32)">
            <summary>
            Transposes order of values in array.
            </summary>
            <param name="currentValue">Source value.</param>
            <param name="values">Array of values.</param>
            <param name="index">Index of current value.</param>
            <returns>The transposed value.</returns>
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Random`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Random`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Random`1.ComputeDataSourceValue.TransposeCompute(GrafanaAdapters.DataSources.BuiltIn.DataSourceValue,GrafanaAdapters.DataSources.BuiltIn.DataSourceValue[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Random`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Random`1.ComputePhasorValue.TransposeCompute(GrafanaAdapters.DataSources.BuiltIn.PhasorValue,GrafanaAdapters.DataSources.BuiltIn.PhasorValue[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Range`1">
            <summary>
            Returns a single value that represents the range, i.e., <c>maximum - minimum</c>, of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Range(expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Range(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Range<br/>
            Execution: Immediate enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Range`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Range`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Range`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Range`1.ResultIsSetTargetSeries">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Range`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Range`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Range`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Round`1">
            <summary>
            Returns a series of values that represent the rounded value, with specified fractional digits, of each of the values in the source series.
            Parameter <c>digits</c>, optional, is a positive integer value representing the number of decimal places in the return value - defaults to 0.
            </summary>
            <remarks>
            Signature: <c>Round([digits = 0], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Round(3, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Round<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Round`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Round`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Round`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Round`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Round`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Round`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Round`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1">
            <summary>
            Returns a single value that represents the standard deviation of the values in the source series. Parameter <c>useSampleCalc</c>,
            optional, is a boolean flag representing if the sample based calculation should be used - defaults to false, which means the
            population based calculation should be used.
            </summary>
            <remarks>
            Signature: <c>StandardDeviation([useSampleCalc = false], expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>StandardDeviation(FILTER ActiveMeasurements WHERE SignalType='VPHM')</c><br/>
            Variants: StandardDeviation, StdDev<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.ComputeDataSourceValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.StandardDeviation`1.ComputePhasorValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Shift`1">
            <summary>
            Returns a series of values that represent each of the values in the source series shifted by <c>N</c>.
            <c>N</c> is a floating point value representing an additive (positive or negative) offset to be applied to each value the source series.
            <c>N</c> can either be constant value or a named target available from the expression.
            </summary>
            <remarks>
            Signature: <c>Shift(N, expression)</c><br/>
            Returns: Series of values.<br/>
            Example 1: <c>Shift(2.2, FILTER ActiveMeasurements WHERE SignalType='CALC')</c><br/>
            Example 2: <c>Shift(-60, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Shift<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Shift`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Shift`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Shift`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Shift`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Shift`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Shift`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Shift`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1">
            <summary>
            Returns a series of values that represent the time difference, in time units, between consecutive values in the source series.
            The <c>units</c> parameter, optional, specifies the type of time units and must be one of the following: Seconds, Nanoseconds,
            Microseconds, Milliseconds, Minutes, Hours, Days, Weeks, Ke (i.e., traditional Chinese unit of decimal time), Ticks (i.e.,
            100-nanosecond intervals), PlanckTime or AtomicUnitsOfTime - defaults to Seconds.
            </summary>
            <remarks>
            Signature: <c>TimeDifference([units = Seconds], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>TimeDifference(FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: TimeDifference, TimeDiff, Elapsed<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.AllowedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.TimeDifference`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1">
            <summary>
            Returns a single value that represents the time-based integration, i.e., the sum of <c>V(n) * (T(n) - T(n-1))</c> where time difference is
            calculated in the specified time units of the values in the source series. The <c>units</c>parameter, optional, specifies the type of time
            units and must be one of the following: Seconds, Nanoseconds, Microseconds, Milliseconds, Minutes, Hours, Days, Weeks, Ke (i.e., traditional
            Chinese unit of decimal time), Ticks (i.e., 100-nanosecond intervals), PlanckTime or AtomicUnitsOfTime - defaults to Hours.
            </summary>
            <remarks>
            Signature: <c>TimeIntegration([units = Hours], expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>TimeIntegration(FILTER ActiveMeasurements WHERE SignalType='CALC' AND PointTag LIKE '%-MW:%')</c><br/>
            Variants: TimeIntegration, TimeInt<br/>
            Execution: Immediate enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.AllowedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.TimeIntegration`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Top`1">
            <summary>
            Returns a series of <c>N</c>, or <c>N%</c> of total, values that are the largest in the source series.
            <c>N</c> is either a positive integer value, representing a total, that is greater than zero - or - a floating point value,
            suffixed with '%' representing a percentage, that must range from greater than 0 to less than or equal to 100.
            Third parameter, optional, is a boolean flag representing if time in dataset should be normalized - defaults to true.
            <c>N</c> can either be constant value or a named target available from the expression. Any target values that fall between 0
            and 1 will be treated as a percentage.
            </summary>
            <remarks>
            Signature: <c>Top(N|N%, [normalizeTime = true], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Top(50%, FILTER ActiveMeasurements WHERE SignalType='FREQ')</c><br/>
            Variants: Top, Largest<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Top`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Top`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Top`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Top`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Top`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Top`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Top`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Top`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Top`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Top`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Total`1">
            <summary>
            Returns a single value that represents the sum of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Total(expression)</c><br/>
            Returns: Single value.<br/>
            Example: <c>Total(FILTER ActiveMeasurements WHERE SignalType='IPHM')</c><br/>
            Variants: Total, Add, Sum<br/>
            Execution: Immediate enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Total`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Total`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Total`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Total`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Total`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Total`1.ComputeDataSourceValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Total`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Total`1.ComputePhasorValue.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Truncate`1">
            <summary>
            Returns a series of values that represent the integral part of each of the values in the source series.
            </summary>
            <remarks>
            Signature: <c>Truncate(expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>Truncate(FILTER ActiveMeasurements WHERE SignalType='IPHM')</c><br/>
            Variants: Truncate, Trunc<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Truncate`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Truncate`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Truncate`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.Truncate`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.Truncate`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Truncate`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.Truncate`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1">
            <summary>
            Returns a series of values that represent an adjusted set of angles that are unwrapped, per specified angle units, so that a comparable mathematical
            operation can be executed. For example, for angles that wrap between -180 and +180 degrees, this algorithm unwraps the values to make the values
            mathematically comparable. The <c>units</c>parameter, optional, specifies the type of angle units and must be one of the following: Degrees, Radians,
            Grads, ArcMinutes, ArcSeconds or AngularMil - defaults to Degrees.
            </summary>
            <remarks>
            Signature: <c>UnwrapAngle([units = Degrees], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>UnwrapAngle(FSX_PMU2-PA1:VH; REA_PMU3-PA2:VH)</c><br/>
            Variants: UnwrapAngle, Unwrap<br/>
            Execution: Immediate in-memory array load.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.UnwrapAngle`1.ComputePhasorValue.GetDataSourceValues(GrafanaAdapters.Functions.Parameters)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1">
            <summary>
            Returns a series of values that represent an adjusted set of angles that are wrapped, per specified angle units, so that angle values are consistently
            between -180 and +180 degrees. The <c>units</c>parameter, optional, specifies the type of angle units and must be one of the following: Degrees, Radians,
            Grads, ArcMinutes, ArcSeconds or AngularMil - defaults to Degrees.
            </summary>
            <remarks>
            Signature: <c>WrapAngle([units = Degrees], expression)</c><br/>
            Returns: Series of values.<br/>
            Example: <c>WrapAngle(Radians, FILTER TOP 5 ActiveMeasurements WHERE SignalType LIKE '%PHA')</c><br/>
            Variants: WrapAngle, Wrap<br/>
            Execution: Deferred enumeration.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.ComputeDataSourceValue">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.ComputePhasorValue">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.BuiltIn.WrapAngle`1.ComputePhasorValue.GetDataSourceValues(GrafanaAdapters.Functions.Parameters)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterParsing.ParseParameters(GrafanaAdapters.Functions.IGrafanaFunction,GrafanaAdapters.Functions.QueryParameters,System.String,GrafanaAdapters.Functions.GroupOperations)">
            <summary>
            Parses function parameters from a given expression as an array of strings.
            </summary>
            <param name="function">Target function.</param>
            <param name="queryParameters">Query parameters.</param>
            <param name="queryExpression">Expression to parse.</param>
            <param name="groupOperation">Group operation.</param>
            <returns>
            A tuple of parsed parameters and any remaining query expression.
            Remaining query expression is typically the filter expression.
            </returns>
            <exception cref="T:System.Data.SyntaxErrorException">Expected parameters did not match those received.</exception>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterParsing.GenerateParametersAsync``1(GrafanaAdapters.Functions.IGrafanaFunction{``0},System.String[],System.Collections.Generic.IAsyncEnumerable{``0},System.String,System.Data.DataSet,System.Threading.CancellationToken)">
            <summary>
            Generates a typed list of value mutable parameters from parsed parameters.
            </summary>
            <typeparam name="TDataSourceValue">The type of the data source value.</typeparam>
            <param name="function">Target function.</param>
            <param name="parsedParameters">Parsed parameters.</param>
            <param name="dataSourceValues">Data source values.</param>
            <param name="rootTarget">Root target.</param>
            <param name="metadata">Metadata.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of value mutable parameters from parsed parameters.</returns>
            <remarks>
            In case user has requested metadata as a parameter, pass in the root target
            which has a higher chance of being resolved for associated metadata.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterParsing.ConvertParsedValueAsync``1(GrafanaAdapters.Functions.IMutableParameter,System.String,System.String,System.Collections.Generic.IAsyncEnumerable{``0},System.Data.DataSet,System.Threading.CancellationToken)">
            <summary>
            Converts parsed value to the mutable parameter type for a given data source value type.
            </summary>
            <typeparam name="TDataSourceValue">The type of the data source value.</typeparam>
            <param name="parameter">Mutable parameter to hold the converted data.</param>
            <param name="value">Parsed value to convert.</param>
            <param name="target">Associated target.</param>
            <param name="dataSourceValues">Data source values.</param>
            <param name="metadata">Source metadata.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <remarks>
            This function is used to convert the parsed value to the parameter type.
            If the type of value provided and expected match, then it directly converts.
            If the types do not match, then it first searches through the provided metadata.
            If nothing is found, it looks through ActiveMeasurements for it.
            Finally, if none of the above work it throws an error.
            </remarks>
        </member>
        <member name="T:GrafanaAdapters.Functions.Parameters">
            <summary>
            Represents a collection of mutable parameters.
            </summary>
            <remarks>
            <para>
            New instances of this class should be created by using the <see cref="M:GrafanaAdapters.Functions.ParameterDefinitions.CreateParameters"/> method.
            </para>
            <para>
            This collection holds a distinct set of parameters generated for each function call, ensuring thread-safe operation
            when multiple threads execute the same function simultaneously. The <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions"/> class outlines
            all possible parameters for a function, both required and optional, effectively determining its signature. Parameters
            in this collection represent the values extracted from the user-provided function expression and, when presented to a
            function, have already been validated and parsed by type. Additionally, the class provides access to the data source
            values expression; function implementations can call <see cref="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.GetDataSourceValues(GrafanaAdapters.Functions.Parameters)"/> to get
            current data source values. The parameters in this collection are mutable, implying ownership by the function, and
            can be safely modified as needed. To identify which optional parameters have been parsed and are available, refer to
            the <see cref="P:GrafanaAdapters.Functions.Parameters.ParsedCount"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.Parameters.Count">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.Parameters.ParsedCount">
            <summary>
            Gets or sets the number of parameters that have been parsed.
            </summary>
            <remarks>
            The number of parameters in defined in the <see cref="T:GrafanaAdapters.Functions.Parameters"/> collection will always match the number of
            parameters defined in the function definition, optional or not, see <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions"/>. This
            property is used to determine the count of required and optional parameters that were actually parsed from the
            user provided function expression. Note that the count does not include the data source values expression,
            which is always available as the last parameter. With this count, the function can determine which optional
            parameters were parsed and are thus available for use.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.Parameters.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.Parameters.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.Parameters.Item(System.String)">
            <summary>
            Gets or sets the parameter with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the parameter to get.</param>
            <returns>The parameter with the specified <paramref name="name"/>.</returns>
            <remarks>
            Parameter name lookup dictionary is lazy initialized. Using index-based lookups is more efficient.
            </remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Parameter name not found.</exception>
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Value(System.Int32)">
            <summary>
            Gets value of parameter at specified index, if the index is valid.
            </summary>
            <param name="index">Index of parameter to get.</param>
            <returns>
            The value of parameter at specified index if the index is valid;
            otherwise, <c>null</c>.
            </returns>
            <remarks>
            This function will not throw an exception if the index is invalid.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Value``1(System.Int32)">
            <summary>
            Gets typed value of parameter at specified index, if the index is valid and the
            value can be cast as type.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="index">Index of parameter to get.</param>
            <returns>
            The typed value of parameter at specified index if the index is valid and the
            value can be cast to type; otherwise, default value.
            </returns>
            <remarks>
            This function will not throw an exception if the index is invalid.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Value(System.String)">
            <summary>
            Gets value of parameter with specified name, if name is found.
            </summary>
            <param name="name">Name of parameter to get.</param>
            <returns>
            The value of parameter with the specified name if the parameter name can be found;
            otherwise, <c>null</c>.
            </returns>
            <remarks>
            Parameter name lookup dictionary is lazy initialized. Using index-based lookups is more efficient.
            This function will not throw an exception if the name is not found.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Value``1(System.String)">
            <summary>
            Gets typed value of parameter with specified name, if name is found and the
            value can be cast as type.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="name">Name of parameter to get.</param>
            <returns>
            The typed value of parameter with the specified name if the parameter name can be found
            and the value can be cast to specified type; otherwise, default value.
            </returns>
            <remarks>
            Parameter name lookup dictionary is lazy initialized. Using index-based lookups is more efficient.
            This function will not throw an exception if the name is not found.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Add(GrafanaAdapters.Functions.IMutableParameter)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Clear">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Contains(GrafanaAdapters.Functions.IMutableParameter)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.CopyTo(GrafanaAdapters.Functions.IMutableParameter[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.IndexOf(GrafanaAdapters.Functions.IMutableParameter)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Insert(System.Int32,GrafanaAdapters.Functions.IMutableParameter)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.Remove(GrafanaAdapters.Functions.IMutableParameter)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.Parameters.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.ParameterDefinition`1">
            <summary>
            Represents a read-only parameter definition for a Grafana function.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.Default">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.Type">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.IsDefinition">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.Required">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.Internal">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinition`1.Parse">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinition`1.CreateParameter">
            <inheritdoc />
        </member>
        <member name="T:GrafanaAdapters.Functions.GrafanaFunctionBase`1">
            <summary>
            Represents the base functionality for any Grafana function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.Description">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.Aliases">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.Category">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.AllowedGroupOperations">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.PublishedGroupOperations">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.CheckAllowedGroupOperation(GrafanaAdapters.Functions.GroupOperations)">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.IsSliceSeriesEquivalent">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ResultIsSetTargetSeries">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ParameterDefinitions">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.RequiredParameterCount">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.OptionalParameterCount">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.InternalParameterCount">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ParseParameters(GrafanaAdapters.Functions.QueryParameters,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.FormatTargetName(GrafanaAdapters.Functions.GroupOperations,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="P:GrafanaAdapters.Functions.GrafanaFunctionBase`1.DataTypeIndex">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ComputeSliceAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ComputeSetAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.GetDataSourceValues(GrafanaAdapters.Functions.Parameters)">
            <summary>
            Gets data source values enumeration found in the provided parameters.
            </summary>
            <param name="parameters">Input parameters.</param>
            <returns>Data source values from provided parameters.</returns>
            <exception cref="T:System.InvalidOperationException">Last parameter is not a data source value of type <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.</exception>
        </member>
        <member name="M:GrafanaAdapters.Functions.GrafanaFunctionBase`1.ExecuteFunction(System.Func{System.Double,System.Double},GrafanaAdapters.Functions.Parameters)">
            <summary>
            Executes specified function against data source values enumeration using provided parameters.
            </summary>
            <param name="function">Function to execute.</param>
            <param name="parameters">Input parameters.</param>
            <returns>Deferred enumeration of computed values.</returns>
            <remarks>
            This method uses the <see cref="M:GrafanaAdapters.DataSources.IDataSourceValue`1.TransposeCompute(System.Func{System.Double,System.Double})"/> method to execute the specified
            function against each data source value in the provided enumeration operating on all the values in the
            in the target data source value type. For example, if the target data source value type is a phasor,
            this method will execute the function against both the magnitude and angle of each phasor value.
            </remarks>
        </member>
        <member name="T:GrafanaAdapters.Functions.IParameter">
            <summary>
            Represents a parameter for Grafana functions.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.Description">
            <summary>
            Gets the description of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.Type">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.IsDefinition">
            <summary>
            Gets flag that indicates if parameter is a definition.
            </summary>
            <remarks>
            Definition parameters are used to define function parameters,
            not hold values for function evaluation.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.Required">
            <summary>
            Gets flag that indicates if the parameter is required.
            </summary>
            <remarks>
            <para>
            Required parameters (i.e., Required = <c>true</c>) must precede
            optional parameters (i.e., Required = <c>false</c>) in the
            parameter list.
            </para>
            <para>
            Note that the data source values parameter, i.e., the 'expression', is technically
            a required parameter but always exists as the last parameter after any defined
            optional or internal parameters. This parameter is automatically added to the
            parameter list by the <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions"/> class.
            </para>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.Internal">
            <summary>
            Gets flag that indicates if parameter is internal.
            </summary>
            <remarks>
            Internal parameters are not exposed to the user and should
            always be defined at the end of the parameter list.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.Default">
            <summary>
            Gets default value of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter.Parse">
            <summary>
            Gets a custom parsing function that converts string into target type.
            </summary>
            <remarks>
            When defined, this function is used to override default parsing behavior.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.IParameter.CreateParameter">
            <summary>
            Creates a new mutable parameter from its definition.
            </summary>
            <returns>New mutable parameter.</returns>
        </member>
        <member name="T:GrafanaAdapters.Functions.IParameter`1">
            <summary>
            Represents a typed parameter with a default value.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter`1.Default">
            <summary>
            Gets default typed value of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IParameter`1.Parse">
            <summary>
            Gets a custom parsing function that converts string into target type.
            </summary>
            <remarks>
            When defined, this function is used to override default parsing behavior.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.IParameter`1.CreateParameter">
            <summary>
            Creates a new typed mutable parameter from its definition.
            </summary>
            <returns>New typed mutable parameter.</returns>
        </member>
        <member name="T:GrafanaAdapters.Functions.IMutableParameter">
            <summary>
            Represents a parameter with a mutable value.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IMutableParameter.Value">
            <summary>
            Gets or sets the actual value of the parameter.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.IMutableParameter`1">
            <summary>
            Represents a typed parameter with a mutable value.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="P:GrafanaAdapters.Functions.IMutableParameter`1.Value">
            <summary>
            Gets or sets the actual typed value of the parameter.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.ParameterDefinitions">
            <summary>
            Represents a readonly collection of <see cref="T:GrafanaAdapters.Functions.IParameter"/> definitions.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.#ctor">
            <summary>
            Creates a new <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions"/> instance.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.#ctor(System.Collections.Generic.IEnumerable{GrafanaAdapters.Functions.IParameter})">
            <summary>
            Creates a new <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions"/> instance.
            </summary>
            <param name="parameters">Parameters to include in the definitions.</param>
            <exception cref="T:System.ArgumentException">
            Parameter is not a definition type -- 'IsDefinition' property must be true -or-
            Parameter has no defined name -- 'Name' property cannot be null, empty or whitespace -or-
            Parameter name is not unique -- parameter with the same name is already defined.
            </exception>
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinitions.Item(System.Int32)">
            <summary>
            Gets the parameter at the specified index.</summary>
            <param name="index">The zero-based index of the parameter to get.</param>
            <returns>The parameter at the specified index.</returns>
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinitions.Item(System.String)">
            <summary>
            Gets the parameter with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the parameter to get.</param>
            <returns>The parameter with the specified <paramref name="name"/>.</returns>
        </member>
        <member name="P:GrafanaAdapters.Functions.ParameterDefinitions.Count">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.IndexOf(System.String)">
            <summary>
            Searches for the parameter with the specified <paramref name="name"/> and returns it's zero-based index.
            </summary>
            <param name="name">The name of the parameter to locate in the <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions" />.</param>
            <returns>
            The zero-based index of the parameter with the specified <paramref name="name" />, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions" /> contains a parameter with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the parameter to locate in the <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions" />.</param>
            <returns>
            <c>true</c> if the <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions" /> contains a parameter with the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.CopyTo(GrafanaAdapters.Functions.IParameter[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions" /> to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions" />. Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.op_Implicit(System.Collections.Generic.List{GrafanaAdapters.Functions.IParameter})~GrafanaAdapters.Functions.ParameterDefinitions">
            <summary>
            Implicitly converts a <see cref="T:System.Collections.Generic.List`1"/> to a <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions"/>.
            </summary>
            <param name="parameters">List of parameters to convert.</param>
            <returns>New <see cref="T:GrafanaAdapters.Functions.ParameterDefinitions"/> instance built from specified <paramref name="parameters"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Parameter is not a definition type -- 'IsDefinition' property must be true -or-
            Parameter has no defined name -- 'Name' property cannot be null, empty or whitespace -or-
            Parameter name is not unique -- parameter with the same name is already defined.
            </exception>
        </member>
        <member name="M:GrafanaAdapters.Functions.ParameterDefinitions.CreateParameters">
            <summary>
            Creates a set of mutable parameters from the parameter definitions.
            </summary>
            <returns>New set of mutable parameters based on the parameter definitions.</returns>
        </member>
        <member name="T:GrafanaAdapters.Functions.Parameter`1">
            <summary>
            Represents a mutable parameter of a Grafana function.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
        </member>
        <member name="T:GrafanaAdapters.Functions.ParsedGrafanaFunction`1">
            <summary>
            Represents a parsed Grafana function.
            </summary>
            <typeparam name="T">Data source value type.</typeparam>
        </member>
        <member name="F:GrafanaAdapters.Functions.ParsedGrafanaFunction`1.Function">
            <summary>
            Parsed Grafana function.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.ParsedGrafanaFunction`1.GroupOperation">
            <summary>
            Defined group operation for parsed function.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.ParsedGrafanaFunction`1.Expression">
            <summary>
            Parsed function expression, e.g., parameters.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.ParsedGrafanaFunction`1.MatchedValue">
            <summary>
            Defines the match from the RegEx for the function.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.QueryParameters">
            <summary>
            Represents the parameters of a Grafana query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.SourceTarget">
            <summary>
            Gets or sets a reference to the original target that was the source of these results.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.StartTime">
            <summary>
            Gets or sets start time of the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.StopTime">
            <summary>
            Gets or sets stop time of the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.Interval">
            <summary>
            Gets or sets the interval of the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.IncludePeaks">
            <summary>
            Gets or sets a flag that indicates whether to include the peaks of the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.DropEmptySeries">
            <summary>
            Gets or sets a flag that indicates whether to include empty series in the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.Imports">
            <summary>
            Gets or sets any defined eval imports defined in the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.RadialDistribution">
            <summary>
            Gets or sets any defined radial distribution request parameters defined in the query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.QueryParameters.MetadataSelections">
            <summary>
            Gets or sets metadata selections for the query.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.GroupOperations">
            <summary>
            Flags that indicate the group operations that a Grafana function can perform.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.GroupOperations.Undefined">
            <summary>
            The function has not defined any group operations.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.GroupOperations.None">
            <summary>
            The function can perform standard, non-grouped, per-trend operations.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.GroupOperations.Slice">
            <summary>
            The function can perform slice-based group operations.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.GroupOperations.Set">
            <summary>
            The function can perform set-based group operations.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.ReturnType">
            <summary>
            Represents the return type of a Grafana function.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.ReturnType.Scalar">
            <summary>
            The function returns a single value.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.ReturnType.Series">
            <summary>
            The function returns a series of values.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.Category">
            <summary>
            Represents a Grafana function category.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.Category.BuiltIn">
            <summary>
            The function is a built-in function.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.Category.Custom">
            <summary>
            The function is a custom function.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.IGrafanaFunction">
            <summary>
            Defines a common interface for Grafana functions.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.Name">
            <summary>
            Gets the name of the Grafana function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.Description">
            <summary>
            Gets the description of the Grafana function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.Aliases">
            <summary>
            Gets any defined aliases for the Grafana function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.ReturnType">
            <summary>
            Gets the return type of the Grafana function, i.e., scalar or series.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.IsSliceSeriesEquivalent">
            <summary>
            Gets or sets a flag indicating whether the function behaves equivalently when processed as a series or as a
            slice. Value defaults to <c>true</c> for functions that return a series of values, i.e., the return type is
            <see cref="F:GrafanaAdapters.Functions.ReturnType.Series"/>, and the <see cref="P:GrafanaAdapters.Functions.IGrafanaFunction.AllowedGroupOperations"/> includes the flag for
            <see cref="F:GrafanaAdapters.Functions.GroupOperations.Slice"/> operations; otherwise, value defaults to <c>false</c> when the return
            type is a scalar value, i.e., <see cref="F:GrafanaAdapters.Functions.ReturnType.Scalar"/>, or the <see cref="P:GrafanaAdapters.Functions.IGrafanaFunction.AllowedGroupOperations"/>
            does not include the flag for <see cref="F:GrafanaAdapters.Functions.GroupOperations.Slice"/> operations.
            </summary>
            <remarks>
            <para>
            When set to <c>true</c>, property indicates that the function, when dealing with time series data, produces
            the same result matrix whether processed horizontally (series-by-series) or vertically (slice-by-slice).
            This is typically applicable to functions that return a series of values and are designed to operate across
            time-aligned data series.
            </para>
            <para>
            Setting this property to <c>true</c> enables certain optimizations. For instance, the system can bypass
            slice-mode processing and use standard series processing instead, as both approaches yield equivalent results.
            This can lead to performance improvements, especially in data-intensive scenarios.
            </para>
            <para>
            It is important for users defining custom functions to accurately set this property. If the function's output
            does not depend on the specific mode of time series processing (series vs. slice), set this property to
            <c>true</c>. Conversely, if the function yields different results when processed by slice-by-slice as compared
            to when processed series-by-series, or it is a scalar function, this property should be set to <c>false</c>.
            </para>
            <para>
            Incorrectly setting this property may lead to unexpected behavior or suboptimal performance, as the system
            relies on this flag to determine the most efficient processing approach.
            </para>
            <para>
            Internally this function descriptor provides a hint to the Grafana data source adapter on how to handle series
            results for a function. For functions that return a scalar value this property is ignored, but is automatically
            set to <c>false</c> to preserve meaning. For slice operations on functions that return a series of values and
            produce the same result matrix whether processed horizontally or vertically, the slice operation is equivalent
            to its non-slice operation using the <see cref="T:GrafanaAdapters.Functions.BuiltIn.Interval`1"/> function over the same expression, for example,
            the following queries are equivalent:
            <list type="bullet">
                <item>
                   <c>SliceShift(0.02, 1, FILTER TOP 10 ActiveMeasurements WHERE SignalType='FREQ')</c> -- <i>and</i> --<br/>
                   <c>Shift(1, Interval(0.02, FILTER TOP 10 ActiveMeasurements WHERE SignalType='FREQ'))</c>
                </item>
                <item>
                    <c>SliceRound(0.0333, 3, ACME-STAR:FREQ; ACME-PLUS:FREQ)</c> -- <i>and</i> --<br/>
                    <c>Round(3, Interval(0.0333, ACME-STAR:FREQ; ACME-PLUS:FREQ))</c>
                </item>
            </list>
            As a result, slice operations that return a series of values and produce the same result matrix whether processed
            horizontally or vertically, i.e., is slice-series equivalent, are automatically are replaced with the equivalent
            non-slice operation and an <see cref="T:GrafanaAdapters.Functions.BuiltIn.Interval`1"/> function as an operational optimization.
            </para>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.ResultIsSetTargetSeries">
            <summary>
            Gets flag that determines if function result is target series for set-based group operations.
            </summary>
            <remarks>
            For set-based group operations, there can also be data in which target series is selected,
            e.g., with <see cref="T:GrafanaAdapters.Functions.BuiltIn.Minimum`1"/> or <see cref="T:GrafanaAdapters.Functions.BuiltIn.Maximum`1"/> functions.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.Category">
            <summary>
            Gets the category of the Grafana function, i.e., built-in or custom.
            </summary>
            <remarks>
            This property is automatically assigned by the system.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.AllowedGroupOperations">
            <summary>
            Gets set of group operations that the Grafana function allows.
            </summary>
            <remarks>
            Operations that are not allowed should be taken to mean that the use of the group operation for a function is an
            error. Implementors should carefully consider which group operations that a function exposes as not allowed since
            when a user selects an group operation that is not allowed, this results in an exception. Groups operations can
            be hidden from the user by overriding the <see cref="P:GrafanaAdapters.Functions.IGrafanaFunction.PublishedGroupOperations"/>. Additionally, a group operation
            that is not supported can be ignored, instead of throwing an exception, by forcing supported operations. This is
            handled by overriding the <see cref="M:GrafanaAdapters.Functions.IGrafanaFunction.CheckAllowedGroupOperation(GrafanaAdapters.Functions.GroupOperations)"/> method. See <see cref="T:GrafanaAdapters.Functions.BuiltIn.Label`1"/> function
            for an example of this.
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.PublishedGroupOperations">
            <summary>
            Gets set of group operations that the Grafana function exposes publicly.
            </summary>
            <remarks>
            Normally, the published group operations should be a subset of the allowed group operations.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.IGrafanaFunction.CheckAllowedGroupOperation(GrafanaAdapters.Functions.GroupOperations)">
            <summary>
            Checks if function allows requested group operation against <see cref="P:GrafanaAdapters.Functions.IGrafanaFunction.AllowedGroupOperations"/> property.
            </summary>
            <param name="requestedOperation">Requested operation.</param>
            <returns>Supported operation.</returns>
            <exception cref="T:System.Data.SyntaxErrorException">Function does not support the requested operation.</exception>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.ParameterDefinitions">
            <summary>
            Gets the list of defined parameter definitions for the Grafana function.
            </summary>
            <remarks>
            <para>
            These parameters are used to define the function signature and are normally constructed from
            read-only <see cref="T:GrafanaAdapters.Functions.ParameterDefinition`1"/> instances.
            </para>
            <para>
            Parameter definitions are used to define function parameters, not hold values for function evaluation.
            Mutable function parameters, safe for evaluation, are defined by <see cref="T:GrafanaAdapters.Functions.Parameters"/> collection.
            </para>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.RequiredParameterCount">
            <summary>
            Gets the number of required parameters, not including data source values expression, of the Grafana function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.OptionalParameterCount">
            <summary>
            Gets the number of optional parameters of the Grafana function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.InternalParameterCount">
            <summary>
            Gets the number of internal parameters of the Grafana function.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.Functions.IGrafanaFunction.ParseParameters(GrafanaAdapters.Functions.QueryParameters,System.String)">
            <summary>
            Executes custom parameter parsing for the Grafana function.
            </summary>
            <param name="queryParameters">Query parameters.</param>
            <param name="queryExpression">Expression to parse.</param>
            <returns>
            A tuple of parsed parameters and any remaining query expression (typically the filter expression)
            after parsing parameters. Tuple of <c>(null, null)</c> should be returned to use standard parsing.
            </returns>
            <remarks>
            This method is used to support custom parameter parsing for functions that may have special parameter
            parsing requirements. By default, this method will return a tuple of <c>(null, null)</c> meaning that
            standard parameter parsing will be used.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.IGrafanaFunction.FormatTargetName(GrafanaAdapters.Functions.GroupOperations,System.String,System.String[])">
            <summary>
            Gets a formatted target name for the Grafana function.
            </summary>
            <param name="groupOperation">Group operation from the format target name.</param>
            <param name="targetName">Target name to format.</param>
            <param name="parsedParameters">Parsed parameters.</param>
            <returns>
            Target name format for the Grafana function, typically in the form of: Name(Parameters,TargetName).
            </returns>
        </member>
        <member name="P:GrafanaAdapters.Functions.IGrafanaFunction.DataTypeIndex">
            <summary>
            Gets the data source value type index associated with the Grafana function.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Functions.IGrafanaFunction`1">
            <summary>
            Defines a common interface for Grafana functions for a specific data source value type.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.Functions.IGrafanaFunction`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <summary>
            Executes the computation for the Grafana function.
            </summary>
            <param name="parameters">Input parameters for the computation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A sequence of computed data source parameters.</returns>
        </member>
        <member name="M:GrafanaAdapters.Functions.IGrafanaFunction`1.ComputeSliceAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <summary>
            Executes a custom slice computation for the Grafana function.
            </summary>
            <param name="parameters">Input parameters for the computation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A sequence of computed data source parameters.</returns>
            <remarks>
            This method is used to support custom slice computations for functions that
            need special handling for slice operations. By default, this method will call
            <see cref="M:GrafanaAdapters.Functions.IGrafanaFunction`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)"/> to perform the computation.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.IGrafanaFunction`1.ComputeSetAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)">
            <summary>
            Executes a custom set computation for the Grafana function.
            </summary>
            <param name="parameters">Input parameters for the computation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A sequence of computed data source parameters.</returns>
            <remarks>
            This method is used to support custom set computations for functions that
            need special handling for set operations. By default, this method will call
            <see cref="M:GrafanaAdapters.Functions.IGrafanaFunction`1.ComputeAsync(GrafanaAdapters.Functions.Parameters,System.Threading.CancellationToken)"/> to perform the computation.
            </remarks>
        </member>
        <member name="T:GrafanaAdapters.Functions.TargetTimeUnit">
            <summary>
            Represents a time unit that can be targeted in OpenHistorian Grafana functions.
            </summary>
            <remarks>
            This class is designed to handle various forms of time units and provides
            a way to parse time units from strings.
            </remarks>
        </member>
        <member name="F:GrafanaAdapters.Functions.TargetTimeUnit.Unit">
            <summary>
            Gets or sets the base time unit.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Functions.TargetTimeUnit.Factor">
            <summary>
            Gets or sets the factor by which to scale the base time unit.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.Functions.TargetTimeUnit.Parse(System.String)">
            <summary>
            Tries to parse a string representation of a time unit to a <see cref="T:GrafanaAdapters.Functions.TargetTimeUnit"/>.
            </summary>
            <param name="value">The string representation of the time unit to parse.</param>
            <returns>
            Tuple containing the <see cref="T:GrafanaAdapters.Functions.TargetTimeUnit"/> and a flag indicating if the parse was successful.
            </returns>
            <remarks>
            If this method succeeds, return value contains the <see cref="T:GrafanaAdapters.Functions.TargetTimeUnit"/> equivalent
            of the time unit contained in <paramref name="value"/>; otherwise, <c>null</c> if the
            conversion failed. The conversion fails if the <paramref name="value"/> is null or is not
            in the correct format.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.Functions.TargetTimeUnit.FromTimeUnits(System.Double,GrafanaAdapters.Functions.TargetTimeUnit)">
            <summary>
            Scales the specified time, in the specified units, to a time in seconds.
            </summary>
            <param name="value">The double value to convert.</param>
            <param name="units">The target time unit, which includes scaling factor, for the conversion.</param>
            <returns>A time, in seconds, that represents the converted value.</returns>
        </member>
        <member name="M:GrafanaAdapters.Functions.TargetTimeUnit.ToTimeUnits(System.Double,GrafanaAdapters.Functions.TargetTimeUnit)">
            <summary>
            Scales a time, in seconds, to the specified units.
            </summary>
            <param name="value">The time, in seconds, to convert.</param>
            <param name="units">The target time units, which includes scaling factor, for the conversion.</param>
            <returns>A double value that represents the converted and scaled time, in the specified units.</returns>
        </member>
        <member name="T:GrafanaAdapters.GrafanaDataSourceBase">
            <summary>
            Represents a base implementation for Grafana data sources.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.GetValueTypes">
            <summary>
            Gets the data source value types, i.e., any type that has implemented <see cref="T:GrafanaAdapters.DataSources.IDataSourceValue"/>,
            that have been loaded into the application domain.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.GetValueTypeTables(GrafanaAdapters.Model.Common.SearchRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the table names that, at a minimum, contain all the fields that the value type has defined as required,
            see <see cref="P:GrafanaAdapters.DataSources.IDataSourceValue.RequiredMetadataFieldNames"/> when <see cref="P:GrafanaAdapters.Model.Common.SearchRequest.dataTypeIndex"/>
            is a valid index in the data source value cache. When <see cref="P:GrafanaAdapters.Model.Common.SearchRequest.dataTypeIndex"/> is -1, all
            table names are returned.
            </summary>
            <param name="request">Search request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.GetValueTypeTableFields(GrafanaAdapters.Model.Common.SearchRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the field names for a given table when <see cref="P:GrafanaAdapters.Model.Common.SearchRequest.dataTypeIndex"/> is a valid index in the data
            source value cache and selected table name contains all the fields that the value type has defined as required, see
            <see cref="P:GrafanaAdapters.DataSources.IDataSourceValue.RequiredMetadataFieldNames"/> . When <see cref="P:GrafanaAdapters.Model.Common.SearchRequest.dataTypeIndex"/> is -1,
            fields for any valid metadata table name are returned.
            </summary>
            <param name="request">Search request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.GetValueTypeFunctions(GrafanaAdapters.Model.Common.SearchRequest,System.Threading.CancellationToken)">
            <summary>
            Gets the functions that are available for a given data source value type.
            </summary>
            <param name="request">Search request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.Search(GrafanaAdapters.Model.Common.SearchRequest,System.Threading.CancellationToken)">
            <summary>
            Search data source meta-data for a target.
            </summary>
            <param name="request">Search request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.Annotations(GrafanaAdapters.Model.Annotations.AnnotationRequest,System.Threading.CancellationToken)">
            <summary>
            Queries data source for annotations in a time-range (e.g., Alarms).
            </summary>
            <param name="request">Annotation request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Queried annotations from data source.</returns>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.GetAlarmState(System.Threading.CancellationToken)">
            <summary>
            Queries current alarm device state.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns> Queried device alarm states.</returns>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.GetDeviceAlarms(System.Threading.CancellationToken)">
            <summary>
            Queries All Available Device Alarm states.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns> Queried device alarm states.</returns>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.GetDeviceGroups(System.Threading.CancellationToken)">
            <summary>
            Queries All Available Device Groups.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns> List of Device Groups.</returns>
        </member>
        <member name="P:GrafanaAdapters.GrafanaDataSourceBase.InstanceName">
            <summary>
            Gets or sets instance name for this <see cref="T:GrafanaAdapters.GrafanaDataSourceBase"/> implementation.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.GrafanaDataSourceBase.Metadata">
            <summary>
            Gets or sets <see cref="T:GrafanaAdapters.Metadata.DataSetAdapter"/> used to hold <see cref="T:System.Data.DataSet"/> based metadata
            source available to this <see cref="T:GrafanaAdapters.GrafanaDataSourceBase"/> implementation.
            </summary>
            <remarks>
            <para>
            Class is used to augment meta-data for the target data source, on demand, so that the augmentation
            process only occurs when a data source type is first used.
            </para>
            <para>
            Note that the <see cref="T:GrafanaAdapters.Metadata.DataSetAdapter"/> is implicitly convertible from a <see cref="T:System.Data.DataSet"/>
            so that derived classes can assign a <see cref="T:System.Data.DataSet"/> source directly as needed.
            </para>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.GrafanaDataSourceBase.MaximumSearchTargetsPerRequest">
            <summary>
            Gets or sets maximum number of search targets to return during a search query.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.GrafanaDataSourceBase.MaximumAnnotationsPerRequest">
            <summary>
            Gets or sets maximum number of annotations to return during an annotations query.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.QueryDataSourceValues(GrafanaAdapters.Functions.QueryParameters,System.Collections.Generic.Dictionary{System.UInt64,System.String},System.Threading.CancellationToken)">
            <summary>
            Starts a query that will read data source values, given a set of point IDs and targets, over a time range.
            </summary>
            <param name="queryParameters">Query parameters.</param>
            <param name="targetMap">Set of IDs with associated targets to query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Queried data source data in terms of value and time.</returns>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.Query(GrafanaAdapters.Model.Common.QueryRequest,System.Threading.CancellationToken)">
            <summary>
            Queries data source returning data as Grafana time-series data set.
            </summary>
            <param name="request">Query request.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.ReloadDataSourceValueTypes">
            <summary>
            Reloads data source value types cache.
            </summary>
            <remarks>
            <para>
            This function is used to support dynamic data source value type loading.
            Function would only need to be called when a new data source value is added
            to Grafana at run-time and user wanted to use new installed data source
            value type without restarting host.
            </para>
            <para>
            Suggest making this option available via web-based endpoint for administrators.
            </para>
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.GrafanaDataSourceBase.ReloadGrafanaFunctions">
            <summary>
            Reloads Grafana functions cache.
            </summary>
            <remarks>
            <para>
            This function is used to support dynamic loading for Grafana functions.
            Function would only need to be called when a new function is added to Grafana at
            run-time and user wanted to use new installed function without restarting host.
            </para>
            <para>
            Suggest making this option available via web-based endpoint for administrators.
            </para>
            </remarks>
        </member>
        <member name="T:GrafanaAdapters.Model.Common.AdHocFilter">
            <summary>
            Defines a Grafana ad-hoc filter request.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.AdHocFilter.key">
            <summary>
            Gets or sets request key.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.AdHocFilter.operator">
            <summary>
            Gets or sets request operator.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.AdHocFilter.value">
            <summary>
            Gets or sets request value.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Common.MetadataSelections">
            <summary>
            Defines a set of Grafana metadata selections.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.MetadataSelections.tableName">
            <summary>
            Gets ot sets source metadata table name.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.MetadataSelections.fieldNames">
            <summary>
            Gets or sets source metadata field names.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Common.SearchRequest">
            <summary>
            Defines a Grafana search request.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.SearchRequest.dataTypeIndex">
            <summary>
            Gets or sets target data source value type index.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.SearchRequest.expression">
            <summary>
            Gets or sets target search expression.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Common.QueryRequest">
            <summary>
            Defines a Grafana query request.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.dataTypeIndex">
            <summary>
            Gets or sets target data source value type index.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.range">
            <summary>
            Gets or sets request range.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.interval">
            <summary>
            Gets or sets request interval.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.maxDataPoints">
            <summary>
            Gets or sets maximum data points to return.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.targets">
            <summary>
            Gets or sets request targets.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.adhocFilters">
            <summary>
            Gets or sets ad-hoc filters to apply.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.excludedFlags">
            <summary>
            Gets or sets excluded data flags.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.QueryRequest.excludeNormalFlags">
            <summary>
            Gets or sets flag that determines if normal flags should be excluded.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Common.Range">
            <summary>
            Defines a Grafana query range.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.Range.from">
            <summary>
            Gets or sets from time for range.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.Range.to">
            <summary>
            Gets or sets to time for range. 
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Common.Target">
            <summary>
            Defines a Grafana query request target.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.Target.refID">
            <summary>
            Gets or sets reference ID.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.Target.target">
            <summary>
            Gets or sets target point/tag name.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Common.Target.metadataSelections">
            <summary>
            Gets or sets metadata selections.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Common.TimeSeriesValues">
            <summary>
            Defines a Grafana time-series values.
            </summary>
            <remarks>
            This structure is serialized and returned to Grafana via JSON.
            </remarks>
        </member>
        <member name="F:GrafanaAdapters.Model.Common.TimeSeriesValues.target">
            <summary>
            Gets or sets a Grafana time-series value point source.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Model.Common.TimeSeriesValues.rootTarget">
            <summary>
            Gets or sets a Grafana time-series underlying point tag.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Model.Common.TimeSeriesValues.refID">
            <summary>
            Gets or sets a Grafana time-series refId to reference a specific query.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Model.Common.TimeSeriesValues.metadata">
            <summary>
            Gets or sets metadata attached to the <see cref="T:GrafanaAdapters.Model.Common.TimeSeriesValues"/>.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Model.Common.TimeSeriesValues.dropEmptySeries">
            <summary>
            Gets or sets a flag that determines if empty series are produced -- non-serialized.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Model.Common.TimeSeriesValues.syntaxError">
            <summary>
            Gets or sets a an error message that indicates a syntax error in the query request.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Model.Common.TimeSeriesValues.datapoints">
            <summary>
            Gets or sets a Grafana time-series value data.
            </summary>
            <remarks>
            <para>
            To ensure data will work with Grafana data source, all values should
            precede single time value. Time is always the last value in the array.
            Time value should be in Unix epoch milliseconds.
            </para>
            <para>
            JSON example:
            <code>
            "datapoints":[
                  [622,1450754160000],
                  [365,1450754220000]
            ]
            </code>
            </para>
            </remarks>
        </member>
        <member name="T:GrafanaAdapters.Model.Annotations.AnnotationRequest">
            <summary>
            Defines a Grafana annotation request.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Annotations.AnnotationRequest.annotationQuery">
            <summary>
            Gets or sets annotation request details.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Annotations.AnnotationRequest.range">
            <summary>
            Gets or sets request range.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Annotations.AnnotationResponse">
            <summary>
            Defines a Grafana annotation response.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Annotations.AnnotationResponse.title">
            <summary>
            Gets or sets annotation title.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Annotations.AnnotationResponse.time">
            <summary>
            Gets or sets annotation time.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Annotations.AnnotationResponse.endTime">
            <summary>
            Gets or sets annotation end time.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Annotations.AnnotationResponse.text">
            <summary>
            Gets or sets annotation text.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Annotations.AnnotationResponse.tags">
            <summary>
            Gets or sets annotation tags.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Metadata.DataSourceValueType">
            <summary>
            Defines a data source value type.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Metadata.DataSourceValueType.name">
            <summary>
            Gets or sets the name of the data source value type.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Metadata.DataSourceValueType.index">
            <summary>
            Gets or sets index of the data source value type in loaded value-types array.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Metadata.DataSourceValueType.timeSeriesDefinition">
            <summary>
            Gets or sets the time-series definition for the data source value type.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Metadata.DataSourceValueType.metadataTableName">
            <summary>
            Gets or sets the default meta-data table name for the data source value type.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Metadata.FieldDescription">
            <summary>
            Defines a field description for a data source value type metadata table.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Metadata.FieldDescription.name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Metadata.FieldDescription.type">
            <summary>
            Gets or sets the data type of the field.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Metadata.FieldDescription.required">
            <summary>
            Gets or sets flag indicating if field is required.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Database.AlarmDevice">
            <summary>
            Represents a connected device in an alarm state.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDevice.ID">
            <summary>
            Gets or sets unique ID.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDevice.DeviceID">
            <summary>
            Gets or sets device ID of the Alarmed Device.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDevice.StateID">
            <summary>
            Gets or sets ID of the <see cref="T:GrafanaAdapters.Model.Database.AlarmState"/>.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDevice.TimeStamp">
            <summary>
            Gets or sets time of the last update.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDevice.DisplayData">
            <summary>
            Gets or sets string to display on the Grafana Alarm Dashboard.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Database.AlarmState">
            <summary>
            Represents the alarm state of a connected device.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmState.ID">
            <summary>
            Gets or sets unique ID.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmState.State">
            <summary>
            Gets or sets description of the <see cref="T:GrafanaAdapters.Model.Database.AlarmState"/>.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmState.RecommendedAction">
            <summary>
            Gets or sets recommended action for the user if a <see cref="T:GrafanaAdapters.Model.Database.AlarmDevice"/> is in this <see cref="T:GrafanaAdapters.Model.Database.AlarmState"/>.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmState.Color">
            <summary>
            Gets or sets color associated with the <see cref="T:GrafanaAdapters.Model.Database.AlarmState"/>.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Database.DeviceGroup">
            <summary>
            Represents a group of devices modeled as a separate virtual device with connection string.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.DeviceGroup.ID">
            <summary>
            Gets or sets unique ID.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.DeviceGroup.Name">
            <summary>
            Gets or sets name of the device.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.DeviceGroup.Devices">
            <summary>
            Gets or sets list of attached device IDs.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Database.AlarmDeviceStateView">
            <summary>
            Represents a Grafana alarm panel block.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDeviceStateView.ID">
            <summary>
            Gets or sets unique ID.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDeviceStateView.Name">
            <summary>
            Gets or sets name of the device.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDeviceStateView.State">
            <summary>
            Gets or sets description of the device state.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDeviceStateView.Color">
            <summary>
            Gets or sets color of the device state.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDeviceStateView.DisplayData">
            <summary>
            Gets or sets additional data to be displayed.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Database.AlarmDeviceStateView.DeviceID">
            <summary>
            Gets or sets device ID of the alarmed device.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Functions.ParameterDescription">
            <summary>
            Defines a Grafana function parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.ParameterDescription.name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.ParameterDescription.description">
            <summary>
            Gets or sets the description of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.ParameterDescription.type">
            <summary>
            Gets or sets the data type of the parameter.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.ParameterDescription.required">
            <summary>
            Gets or sets flag indicating if parameter is required.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.ParameterDescription.default">
            <summary>
            Gets or sets the string-based representation of the default value.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Model.Functions.FunctionDescription">
            <summary>
            Defines a Grafana function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.name">
            <summary>
            Gets or sets the name of the function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.description">
            <summary>
            Gets or sets the description of the function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.aliases">
            <summary>
            Gets or sets other names for the function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.returnType">
            <summary>
            Gets or sets the return type of the function, either "Scalar" or "Series".
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.category">
            <summary>
            Gets or sets the category of the function, either "BuiltIn" or "Custom".
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.allowedGroupOperations">
            <summary>
            Gets or sets allowed group operations for the function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.publishedGroupOperations">
            <summary>
            Gets or sets published group operations for the function.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.Model.Functions.FunctionDescription.parameters">
            <summary>
            Gets or sets the parameter descriptions for the function.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.Annotations.AnnotationRequestExtensions">
            <summary>
            Grafana <see cref="T:GrafanaAdapters.Model.Annotations.AnnotationRequest"/> extensions class.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.Annotations.AnnotationRequestExtensions.TableName(GrafanaAdapters.Annotations.AnnotationType)">
            <summary>
            Gets table name for specified annotation <paramref name="type"/>.
            </summary>
            <param name="type">Annotation type.</param>
            <returns>Table name for specified annotation <paramref name="type"/>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Annotations.AnnotationRequestExtensions.TargetFieldName(GrafanaAdapters.Annotations.AnnotationType)">
            <summary>
            Gets the target field name for Guid based point IDs for table used with specified annotation <paramref name="type"/>.
            </summary>
            <param name="type">Annotation type.</param>
            <returns>Target field name for Guid based point IDs for specified annotation <paramref name="type"/>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Annotations.AnnotationRequestExtensions.IsApplicable(GrafanaAdapters.Annotations.AnnotationType,System.Double[])">
            <summary>
            Determines if the data point is applicable for specified annotation <paramref name="type"/>. 
            </summary>
            <param name="type">Annotation type.</param>
            <param name="datapoint">Time series values data point.</param>
            <returns><c>true</c> if the data point is applicable for specified annotation <paramref name="type"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Annotations.AnnotationRequestExtensions.PopulateResponse(GrafanaAdapters.Annotations.AnnotationType,GrafanaAdapters.Model.Annotations.AnnotationResponse,System.String,System.Data.DataRow,System.Double[],System.Data.DataSet)">
            <summary>
            Populates an annotation response title, text and tags for specified annotation <paramref name="type"/>.
            </summary>
            <param name="type">Annotation type.</param>
            <param name="response">Annotation response.</param>
            <param name="target">Target of annotation response.</param>
            <param name="definition">Associated metadata definition for response.</param>
            <param name="datapoint">Time series values data point for response.</param>
            <param name="source">Metadata of source definitions.</param>
            <returns>Populates an annotation response title, text and tags for specified annotation <paramref name="type"/>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Annotations.AnnotationRequestExtensions.ExtractQueryRequest(GrafanaAdapters.Model.Annotations.AnnotationRequest,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Extracts a Grafana <see cref="T:GrafanaAdapters.Model.Common.QueryRequest"/> from an <see cref="T:GrafanaAdapters.Model.Annotations.AnnotationRequest"/>.
            </summary>
            <param name="request">Annotation request.</param>
            <param name="targets">List of desired targets.</param>
            <param name="maxDataPoints">Maximum points to return.</param>
            <returns>Grafana query request object from an annotation <paramref name="request"/>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Annotations.AnnotationRequestExtensions.ParseQueryType(GrafanaAdapters.Model.Annotations.AnnotationRequest,System.Boolean@)">
            <summary>
            Parses query expression from annotation for annotation type.
            </summary>
            <param name="request">Grafana annotation.</param>
            <param name="useFilterExpression">Determines if query is using a filter expression.</param>
            <returns>Parsed annotation type for query expression from <paramref name="request"/>.</returns>
        </member>
        <member name="M:GrafanaAdapters.Annotations.AnnotationRequestExtensions.ParseSourceDefinitions(GrafanaAdapters.Model.Annotations.AnnotationRequest,GrafanaAdapters.Annotations.AnnotationType,System.Data.DataSet,System.Boolean)">
            <summary>
            Parses source definitions for an annotation query.
            </summary>
            <param name="request">Grafana annotation request.</param>
            <param name="type">Annotation type.</param>
            <param name="source">Metadata of source definitions.</param>
            <param name="useFilterExpression">Determines if query is using a filter expression.</param>
            <returns>Parsed source definitions from <paramref name="request"/>.</returns>
        </member>
        <member name="T:GrafanaAdapters.Annotations.AnnotationType">
            <summary>
            Supported annotation types for GSF Time-series Framework.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Annotations.AnnotationType.RaisedAlarms">
            <summary>
            Raised alarm annotation.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Annotations.AnnotationType.ClearedAlarms">
            <summary>
            Cleared alarm annotation.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Annotations.AnnotationType.Events">
            <summary>
            Manual event annotation.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Annotations.AnnotationType.Alarms">
            <summary>
            All alarm annotation.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.Annotations.AnnotationType.Undefined">
            <summary>
            Undefined annotation.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.DeviceAlarmStateAdapter">
            <summary>
            Represents an adapter that will monitor and report device alarm states.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DeviceAlarmStateAdapter.DefaultMonitoringRate">
            <summary>
            Defines the default value for the <see cref="P:GrafanaAdapters.DeviceAlarmStateAdapter.MonitoringRate"/>.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DeviceAlarmStateAdapter.DefaultAlarmMinutes">
            <summary>
            Defines the default value for the <see cref="P:GrafanaAdapters.DeviceAlarmStateAdapter.AlarmMinutes"/>.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DeviceAlarmStateAdapter.DefaultAcknowledgedTransitionHysteresisDelay">
            <summary>
            Defines the default value for the <see cref="P:GrafanaAdapters.DeviceAlarmStateAdapter.AcknowledgedTransitionHysteresisDelay"/>.
            </summary>
        </member>
        <member name="F:GrafanaAdapters.DeviceAlarmStateAdapter.DefaultExternalDatabaseHysteresisDelay">
            <summary>
            Defines the default value for the <see cref="F:GrafanaAdapters.DeviceAlarmStateAdapter.DefaultExternalDatabaseHysteresisDelay"/>.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DeviceAlarmStateAdapter.#ctor">
            <summary>
            Creates a new <see cref="T:GrafanaAdapters.DeviceAlarmStateAdapter"/>.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.MonitoringRate">
            <summary>
            Gets or sets monitoring rate, in milliseconds, for devices.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.AlarmMinutes">
            <summary>
            Gets or sets the time, in minutes, for which to change the device state to alarm when no data is received.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.TargetParentDevices">
            <summary>
            Gets or sets the flag that determines if alarm states should only target parent devices, i.e., PDCs and direct connect PMUs, or all devices.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.AcknowledgedTransitionHysteresisDelay">
            <summary>
            Gets or sets delay time, in minutes, before transitioning the Acknowledged state back to Good.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseHysteresisDelay">
            <summary>
            Gets or sets the delay time, in minutes, before reporting the external database state.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseHysteresisMinimumState">
            <summary>
            Gets or sets the minimum state for application of <see cref="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseHysteresisDelay"/>. Defaults to setting Good and Alarm states immediately and applying delay to all other states.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.EnableExternalDatabaseSynchronization">
            <summary>
            Gets or sets the flag that determines if an external database connection should be enabled for synchronization of alarm states.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseConnectionString">
            <summary>
            Gets or sets the external database connection string used for synchronization of alarm states. Leave blank to use local configuration database defined in "systemSettings".
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseProviderString">
            <summary>
            Gets or sets the external database provider string used for synchronization of alarm states.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseCommand">
            <summary>
            Gets or sets the external database command used for synchronization of alarm states.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseCommandParameters">
            <summary>
            Gets or sets the external database command parameters with value substitutions used for synchronization of alarm states.
            </summary>
            <remarks>
            Examples for composite state reporting:
            <code>
            'openPDC Overall Device Status = {AlarmState}[?{AlarmState}!=Good[ -- for \[{Device.Acronym}\]]]'
            </code>
            <code>
            'Good = {GoodStateCount} / Alarmed = {AlarmStateCount} / Unavailable = {NotAvailableStateCount} / Bad Data = {BadDataStateCount} / Bad Time = {BadTimeStateCount} / Out of Service = {OutOfServiceStateCount}[?{AlarmState}!=Good[ -- \&lt;a href=\"http://localhost:8280/DeviceStatus.cshtml?DeviceID={Device.ID}\"\&gt;\[{Device.Acronym}\] Device Status\&lt;/a\&gt;]]'
            </code>
            </remarks>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseMappedAlarmStates">
            <summary>
            Gets or sets the external database mapped alarm states defining the {MappedAlarmState} command parameter substitution parameter used for synchronization of alarm states.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.ExternalDatabaseReportSingleCompositeState">
            <summary>
            Gets or sets the flag that determines if external database should report a single composite state or a state for each device.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.InputMeasurementKeys">
            <summary>
            Gets or sets primary keys of input measurements the adapter expects, if any.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.OutputMeasurements">
            <summary>
            Gets or sets output measurements that the adapter will produce, if any.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.SupportsTemporalProcessing">
            <summary>
            Gets the flag indicating if this adapter supports temporal processing.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.DeviceAlarmStateAdapter.Status">
            <summary>
            Returns the detailed status of the data input source.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DeviceAlarmStateAdapter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:GrafanaAdapters.DeviceAlarmStateAdapter"/> object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:GrafanaAdapters.DeviceAlarmStateAdapter.Initialize">
            <summary>
            Initializes <see cref="T:GrafanaAdapters.DeviceAlarmStateAdapter" />.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DeviceAlarmStateAdapter.QueueStateUpdate">
            <summary>
            Queues monitoring operation to update alarm state for immediate execution.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DeviceAlarmStateAdapter.UpdateAlarmStates">
            <summary>
            Updates alarm states from database.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.DeviceAlarmStateAdapter.GetShortStatus(System.Int32)">
            <summary>
            Gets a short one-line status of this adapter.
            </summary>
            <param name="maxLength">Maximum number of available characters for display.</param>
            <returns>A short one-line summary of the current status of this adapter.</returns>
        </member>
        <member name="M:GrafanaAdapters.DeviceAlarmStateAdapter.GetShortElapsedTimeString(GSF.Ticks)">
            <summary>
            Get short elapsed time string for specified <paramref name="span"/>.
            </summary>
            <param name="span"><see cref="T:GSF.Ticks"/> representing time span.</param>
            <returns>Short elapsed time string.</returns>
        </member>
        <member name="T:GrafanaAdapters.TargetCaches">
            <summary>
            Exposes a method to reinitialize sliding memory caches used by Grafana data sources.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.TargetCaches.ResetAll">
            <summary>
            Resets all sliding memory caches used by Grafana data sources.
            </summary>
            <remarks>
            This should be called any time data source metadata is updated.
            </remarks>
        </member>
        <member name="M:GrafanaAdapters.TargetCache`1.GetOrAdd(System.String,System.Func{`0})">
            <summary>
            Gets or adds a value, based on result of <paramref name="valueFactory"/>, to the target cache.
            </summary>
            <param name="target">Target to use as cache key -- this should be unique per <typeparamref name="T"/>.</param>
            <param name="valueFactory">Function to generate value to add to cache -- only called if value is not already cached.</param>
            <returns>
            Value from cache if already cached; otherwise, new value generated by <paramref name="valueFactory"/>.
            </returns>
        </member>
        <member name="M:GrafanaAdapters.TargetCache`1.Remove(System.String)">
            <summary>
            Removes a value from the target cache.
            </summary>
            <param name="target">Specific target to remove from cache.</param>
        </member>
        <member name="M:GrafanaAdapters.TargetCache`1.ResetCache">
            <summary>
            Resets the target cache.
            </summary>
        </member>
        <member name="T:GrafanaAdapters.TimeSliceScannerAsync`1">
            <summary>
            Reads series of <see cref="T:GrafanaAdapters.DataSources.IDataSourceValue`1"/> instances for the same time interval.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.TimeSliceScannerAsync`1.DataReadComplete">
            <summary>
            Gets a flag that determines if data read has been completed.
            </summary>
        </member>
        <member name="P:GrafanaAdapters.TimeSliceScannerAsync`1.Tolerance">
            <summary>
            Gets time tolerance for data slices in Unix epoch milliseconds.
            </summary>
        </member>
        <member name="M:GrafanaAdapters.TimeSliceScannerAsync`1.ReadNextTimeSliceAsync">
            <summary>
            Reads next time slice from the series set.
            </summary>
            <returns>Next time slice.</returns>
        </member>
        <member name="M:GrafanaAdapters.TimeSliceScannerAsync`1.Create(GrafanaAdapters.DataSources.DataSourceValueGroup{`0}[],System.Double,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:GrafanaAdapters.TimeSliceScannerAsync`1"/>.
            </summary>
            <param name="dataSources">Set of <see cref="T:GrafanaAdapters.DataSources.DataSourceValueGroup`1"/> series to scan.</param>
            <param name="tolerance">Time tolerance for data slices in Unix epoch milliseconds.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
    </members>
</doc>
