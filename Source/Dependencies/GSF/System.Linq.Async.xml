<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Linq.Async</name>
    </assembly>
    <members>
        <member name="T:System.Linq.AsyncEnumerable">
            <summary>
            Provides a set of extension methods for <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Create``1(System.Func{System.Threading.CancellationToken,System.Collections.Generic.IAsyncEnumerator{``0}})">
            <summary>
            Creates a new enumerable using the specified delegates implementing the members of <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerable sequence.</typeparam>
            <param name="getAsyncEnumerator">The delegate implementing the <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)"/> method.</param>
            <returns>A new enumerable instance.</returns>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence.
            For aggregation behavior with incremental intermediate results, see System.Interactive.Async.AsyncEnumerableEx.Scan{TSource}.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence and the result of the aggregation.</typeparam>
            <param name="source">An async-enumerable sequence to aggregate over.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the final accumulator value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="accumulator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to aggregate over.</param>
            <param name="accumulator">An asynchronous accumulator function to be invoked and awaited on each element.</param>
            <param name="cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the final accumulator value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="accumulator"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
            For aggregation behavior with incremental intermediate results, see System.Interactive.Async.AsyncEnumerableEx.Scan{TSource, Accumulate}".
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TAccumulate">The type of the result of the aggregation.</typeparam>
            <param name="source">An async-enumerable sequence to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the final accumulator value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="accumulator"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAwaitAsyncCore``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name="TAccumulate">The type of the result of aggregation.</typeparam>
            <param name="source">An async-enumerable sequence to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An asynchronous accumulator function to be invoked and awaited on each element.</param>
            <param name="cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the final accumulator value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="accumulator"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value,
            and the specified result selector function is used to select the result value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">An async-enumerable sequence to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the final accumulator value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="accumulator"/> or <paramref name="resultSelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAwaitAsyncCore``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value,
            and the specified result selector is used to select the result value.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">An async-enumerable sequence to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="accumulator">An asynchronous accumulator function to be invoked and awaited on each element.</param>
            <param name="resultSelector">An asynchronous transform function to transform the final accumulator value into the result value.</param>
            <param name="cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the value obtained by applying the result selector to the final accumulator value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="accumulator"/> or <paramref name="resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AllAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Determines whether all elements of an async-enumerable sequence satisfy a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AllAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Determines whether all elements in an async-enumerable sequence satisfy a condition.
            </summary>
            <typeparam name="TSource">The type of element in the sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">An asynchronous predicate to apply to each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a value indicating whether all elements in the sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Determines whether an async-enumerable sequence contains any elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to check for non-emptiness.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether the source sequence contains any elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element of an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element in an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name="TSource">The type of element in the sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name="predicate">An asynchronous predicate to apply to each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a value indicating whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Append``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)">
            <summary>
            Append a value to an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence to append the value to.</param>
            <param name="element">Element to append to the specified sequence.</param>
            <returns>The source sequence appended with the specified value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Prepend``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)">
            <summary>
            Prepend a value to an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence to prepend the value to.</param>
            <param name="element">Element to prepend to the specified sequence.</param>
            <returns>The source sequence prepended with the specified value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AsAsyncEnumerable``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Hides the identity of an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose identity to hide.</param>
            <returns>An async-enumerable sequence that hides the identity of the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Int32"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Int64"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Single"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Double"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Decimal"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the average of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values to calculate the average of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence of values to compute the average of.</param>
            <param name="selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Cast``1(System.Collections.Generic.IAsyncEnumerable{System.Object})">
            <summary>
            Converts the elements of an async-enumerable sequence to the specified type.
            </summary>
            <typeparam name="TResult">The type to convert the elements in the source sequence to.</typeparam>
            <param name="source">The async-enumerable sequence that contains the elements to be converted.</param>
            <returns>An async-enumerable sequence that contains each element of the source sequence converted to the specified type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Concat``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Concatenates the second async-enumerable sequence to the first async-enumerable sequence upon successful termination of the first.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="first">First async-enumerable sequence.</param>
            <param name="second">Second async-enumerable sequence.</param>
            <returns>An async-enumerable sequence that contains the elements of the first sequence, followed by those of the second the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ContainsAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},``0,System.Threading.CancellationToken)">
            <summary>
            Determines whether an async-enumerable sequence contains a specified element by using the default equality comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence in which to locate a value.</param>
            <param name="value">The value to locate in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ContainsAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Determines whether an async-enumerable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer{T}.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence in which to locate a value.</param>
            <param name="value">The value to locate in the source sequence.</param>
            <param name="comparer">An equality comparer to compare elements.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.CountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns an async-enumerable sequence containing an <see cref="T:System.Int32" /> that represents the total number of elements in an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence that contains elements to be counted.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the number of elements in the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">(Asynchronous) The number of elements in the source sequence is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.CountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns an async-enumerable sequence containing an <see cref="T:System.Int32" /> that represents how many elements in the specified async-enumerable sequence satisfy a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence that contains elements to be counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.CountAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts the elements in an async-enumerable sequence that satisfy a condition.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of elements to count.</param>
            <param name="predicate">An asynchronous predicate to apply to each element in the source sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the number of elements in the sequence that satisfy the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.DefaultIfEmpty``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton sequence if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence (if any), whose default value will be taken if the sequence is empty.</typeparam>
            <param name="source">The sequence to return a default value for if it is empty.</param>
            <returns>An async-enumerable sequence that contains the default value for the TSource type if the source is empty; otherwise, the elements of the source itself.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.DefaultIfEmpty``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence (if any), and the specified default value which will be taken if the sequence is empty.</typeparam>
            <param name="source">The sequence to return the specified value for if it is empty.</param>
            <param name="defaultValue">The value to return if the sequence is empty.</param>
            <returns>An async-enumerable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Distinct``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns an async-enumerable sequence that contains only distinct elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to retain distinct elements for.</param>
            <returns>An async-enumerable sequence only containing the distinct elements from the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Distinct``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an async-enumerable sequence that contains only distinct elements according to the comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to retain distinct elements for.</param>
            <param name="comparer">Equality comparer for source elements.</param>
            <returns>An async-enumerable sequence only containing the distinct elements from the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ElementAtAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">async-enumerable sequence to return the element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence that produces the element at the specified position in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">(Asynchronous) <paramref name="index"/> is greater than or equal to the number of elements in the source sequence.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ElementAtOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">async-enumerable sequence to return the element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Empty``1">
            <summary>
            Returns an empty async-enumerable sequence.
            </summary>
            <typeparam name="TValue">The type used for the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> type parameter of the resulting sequence.</typeparam>
            <returns>An async-enumerable sequence with no elements.</returns>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Except``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Produces the set difference of two async-enumerable sequences by using the default equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An async-enumerable sequence whose elements that are not also in second will be returned.</param>
            <param name="second">An async-enumerable sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Except``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set difference of two async-enumerable sequences by using the specified equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An async-enumerable sequence whose elements that are not also in second will be returned.</param>
            <param name="second">An async-enumerable sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the first element in the async-enumerable sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence that satisfies the condition in the predicate.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the first element in the async-enumerable sequence that satisfies the condition in the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence that satisfies the condition in the predicate.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">An asynchronous predicate that will be invoked and awaited for each element in the sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the first element in the sequence that satisfies the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence, or a default value if no such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the first element in the async-enumerable sequence, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the first element in the async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstOrDefaultAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence that satisfies the condition in the predicate, or a default value if no element satisfies the condition in the predicate.
            </summary>
            <typeparam name="TSource">The type of element in the sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">An asynchronous predicate to invoke and await on each element of the sequence.</param>
            <param name="cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the first element in the sequence that satisfies the predicate, or a default value if no element satisfies the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Invokes an action for each element in the async-enumerable sequence, and returns a Task object that will get signaled when the sequence terminates.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to invoke for each element in the async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>Task that signals the termination of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="action"/> is null.</exception>
            <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Action{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Invokes an action for each element in the async-enumerable sequence, incorporating the element's index, and returns a Task object that will get signaled when the sequence terminates.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to invoke for each element in the async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>Task that signals the termination of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="action"/> is null.</exception>
            <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ForEachAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits an asynchronous action on each element in the source sequence, and returns a task that is signaled when the sequence terminates.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Asynchronous action to invoke and await for each element in the source sequence.</param>
            <param name="cancellationToken">Optional cancellation token for cancelling the sequence at any time.</param>
            <returns>Task that signals the termination of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ForEachAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits an asynchronous action on each element in the source sequence, incorporating the element's index, and returns a task that is signaled when the sequence terminates.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Asynchronous action to invoke and await for each element in the source sequence; the second parameter represents the index of the element.</param>
            <param name="cancellationToken">Optional cancellation token for cancelling the sequence at any time.</param>
            <returns>Task that signals the termination of the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function and comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function and comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the elements of an async-enumerable sequence and selects the resulting elements by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an async-enumerable group.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="elementSelector">A function to map each source element to an element in an async-enumerable group.</param>
            <param name="comparer">An equality comparer to compare keys with.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Groups the elements of an async-enumerable sequence and selects the resulting elements by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <param name="elementSelector">An asynchronous function to map each source element to an element in an async-enumerable group.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence and selects the resulting elements by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <param name="elementSelector">An asynchronous function to map each source element to an element in an async-enumerable group.</param>
            <param name="comparer">An equality comparer to use to compare keys.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function, and then applies a result selector function to each group.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TKey">Type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TResult">The result type returned by the result selector function.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <param name="resultSelector">An asynchronous function to transform each group into the result type.</param>
            <returns>An async-enumerable sequence of results obtained by invoking and awaiting the result-selector function on each group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function, and then applies a result selector function to each group.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TKey">Type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TResult">The result type returned by the result selector function.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <param name="resultSelector">An asynchronous function to transform each group into the result type.</param>
            <param name="comparer">An equality comparer to use to compare keys.</param>
            <returns>An async-enumerable sequence of results obtained by invoking and awaiting the result-selector function on each group.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="resultSelector"/> or <paramref name="comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.ValueTask{``3}})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key-selector function, applies an element selector to each element of each group, then applies a result selector to each transformed group.
            </summary>
            <typeparam name="TSource">The type of element in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of element computed by the element selector.</typeparam>
            <typeparam name="TResult">The type of the final result, computed by applying the result selector to each transformed group of elements.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <param name="elementSelector">An asynchronous function to apply to each element of each group. </param>
            <param name="resultSelector">An asynchronous function to transform each group into the result type.</param>
            <returns>An async-enumerable sequence of results obtained by invoking the result selector function on each group and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwaitCore``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key-selector function, applies an element selector to each element of each group, then applies a result selector to each transformed group.
            </summary>
            <typeparam name="TSource">The type of element in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of element computed by the element selector.</typeparam>
            <typeparam name="TResult">The type of the final result, computed by applying the result selector to each transformed group of elements.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to group.</param>
            <param name="keySelector">An asynchronous function to extract the key for each element.</param>
            <param name="elementSelector">An asynchronous function to apply to each element of each group. </param>
            <param name="resultSelector">An asynchronous function to transform each group into the result type.</param>
            <param name="comparer">An equality comparer to use to compare keys.</param>
            <returns>An async-enumerable sequence of results obtained by invoking the result selector function on each group and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="resultSelector"/> or <paramref name="comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},``3})">
            <summary>
            Correlates the elements of two async-enumerable sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TOuter">The type of the elements of the first async-enumerable sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second async-enumerable sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first async-enumerable sequence to join.</param>
            <param name="inner">The async-enumerable sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
            <returns>An async-enumerable sequence that contains elements of type TResult that are obtained by performing a grouped join on two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outer"/> or <paramref name="inner"/> or <paramref name="outerKeySelector"/> or <paramref name="innerKeySelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two async-enumerable sequences based on equality of keys and groups the results. The specified equality comparer is used to compare keys.
            </summary>
            <typeparam name="TOuter">The type of the elements of the first async-enumerable sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second async-enumerable sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first async-enumerable sequence to join.</param>
            <param name="inner">The async-enumerable sequence to join to the first async-enumerable sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
            <param name="comparer">An equality comparer to hash and compare keys.</param>
            <returns>An async-enumerable sequence that contains elements of type TResult that are obtained by performing a grouped join on two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outer"/> or <paramref name="inner"/> or <paramref name="outerKeySelector"/> or <paramref name="innerKeySelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Intersect``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Produces the set intersection of two async-enumerable sequences by using the default equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An async-enumerable sequence whose distinct elements that also appear in second will be returned.</param>
            <param name="second">An async-enumerable sequence whose distinct elements that also appear in the first sequence will be returned.</param>
            <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Intersect``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set intersection of two async-enumerable sequences by using the specified equality comparer to compare values.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An async-enumerable sequence whose distinct elements that also appear in second will be returned.</param>
            <param name="second">An async-enumerable sequence whose distinct elements that also appear in the first sequence will be returned.</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
            </summary>
            <typeparam name="TOuter">The type of the elements of the first async-enumerable sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second async-enumerable sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first async-enumerable sequence to join.</param>
            <param name="inner">The async-enumerable sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <returns>An async-enumerable sequence that has elements of type TResult that are obtained by performing an inner join on two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outer"/> or <paramref name="inner"/> or <paramref name="outerKeySelector"/> or <paramref name="innerKeySelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys. A specified equality comparer is used to compare keys.
            </summary>
            <typeparam name="TOuter">The type of the elements of the first async-enumerable sequence.</typeparam>
            <typeparam name="TInner">The type of the elements of the second async-enumerable sequence.</typeparam>
            <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="outer">The first async-enumerable sequence to join.</param>
            <param name="inner">The async-enumerable sequence to join to the first sequence.</param>
            <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
            <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
            <param name="resultSelector">A function to create a result element from two matching elements.</param>
            <param name="comparer">An equality comparer to hash and compare keys.</param>
            <returns>An async-enumerable sequence that has elements of type TResult that are obtained by performing an inner join on two sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outer"/> or <paramref name="inner"/> or <paramref name="outerKeySelector"/> or <paramref name="innerKeySelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence that satisfies the condition in the predicate.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence that satisfies the condition in the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence that satisfies the condition in the predicate.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">An asynchronous predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence that satisfies the condition in the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence, or a default value if no such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastOrDefaultAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">An asynchronous predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LongCountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns an async-enumerable sequence containing an <see cref="T:System.Int64" /> that represents the total number of elements in an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence that contains elements to be counted.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the number of elements in the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.OverflowException">(Asynchronous) The number of elements in the source sequence is larger than <see cref="F:System.Int64.MaxValue"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LongCountAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns an async-enumerable sequence containing an <see cref="T:System.Int64" /> that represents how many elements in the specified async-enumerable sequence satisfy a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence that contains elements to be counted.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LongCountAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns an async-enumerable sequence containing a <see cref="T:System.Int64" /> that represents the number of elements in the specified async-enumerable sequence that satisfy a condition.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence that contains elements to be counted.</param>
            <param name="predicate">An asynchronous predicate to test each element for a condition.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum element in an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the maximum element of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the maximum of.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the value that corresponds to the maximum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the maximum of.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the value that corresponds to the maximum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum element in an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Invokes a transform function on each element of a sequence and returns the minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the minimum of.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the minimum of.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum <see cref="T:System.Int32"/> value in an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum <see cref="T:System.Nullable`1"/> value in an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the maximum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the maximum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name="cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Returns the minimum value in an async-enumerable sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to determine the minimum value of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the minimum value in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name="selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OfType``1(System.Collections.Generic.IAsyncEnumerable{System.Object})">
            <summary>
            Filters the elements of an async-enumerable sequence based on the specified type.
            </summary>
            <typeparam name="TResult">The type to filter the elements in the source sequence on.</typeparam>
            <param name="source">The async-enumerable sequence that contains the elements to be filtered.</param>
            <returns>An async-enumerable sequence that contains elements from the input sequence of type TResult.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">An asynchronous function to extract a key from an element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer. The keys are obtained by invoking the transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">An asynchronous function to extract a key from an element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByDescendingAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">An asynchronous function to extract a key from an element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByDescendingAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer. The keys are obtained by invoking the transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An async-enumerable sequence of values to order.</param>
            <param name="keySelector">An asynchronous function to extract a key from an element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenBy``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByAwaitCore``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenBy``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByAwaitCore``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer. The keys are obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByDescending``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByDescendingAwaitCore``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByDescending``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByDescendingAwaitCore``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer. The keys are obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Range(System.Int32,System.Int32)">
            <summary>
            Generates an async-enumerable sequence of integral numbers within a specified range.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
            <returns>An async-enumerable sequence that contains a range of sequential integral numbers.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero. -or- <paramref name="start"/> + <paramref name="count"/> - 1 is larger than <see cref="F:System.Int32.MaxValue"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates an async-enumerable sequence that repeats the given element the specified number of times.
            </summary>
            <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
            <param name="element">Element to repeat.</param>
            <param name="count">Number of times to repeat the element.</param>
            <returns>An async-enumerable sequence that repeats the given element the specified number of times.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Reverse``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An async-enumerable sequence of values to reverse.</param>
            <returns>An async-enumerable sequence whose elements correspond to those of the input sequence in reverse order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of an async-enumerable sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam>
            <param name="source">A sequence of elements to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of an async-enumerable sequence into a new form by incorporating the element's index.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam>
            <param name="source">A sequence of elements to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Projects each element of an async-enumerable sequence into a new form by applying an asynchronous selector function to each member of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence and awaiting the result.</typeparam>
            <param name="source">A sequence of elements to invoke a transform function on.</param>
            <param name="selector">An asynchronous transform function to apply to each source element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the transform function on each element of the source sequence and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Projects each element of an async-enumerable sequence into a new form by applying an asynchronous selector function that incorporates each element's index to each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of elements in the result sequence, obtained by running the selector function for each element and its index, and awaiting the result.</typeparam>
            <param name="source">A sequence of elements to invoke a transform function on.</param>
            <param name="selector">An asynchronous transform function to apply to each source element; the second parameter represents the index of the element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the transform function on each element and its index of the source sequence and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence and merges the resulting async-enumerable sequences into one async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}})">
            <summary>
            Projects each element of an async-enumerable sequence into an async-enumerable sequence and merges the resulting async-enumerable sequences into one async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of elements in the projected inner sequences and the merged result sequence.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="selector">An asynchronous selector function to apply to each element of the source sequence.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function on each element of the source sequence and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence by incorporating the element's index and merges the resulting async-enumerable sequences into one async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="selector">A transform function to apply to each element; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwaitCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}})">
            <summary>
            Projects each element of an async-enumerable sequence into an async-enumerable sequence by incorporating the element's index and merges the resulting async-enumerable sequences into an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of elements in the projected inner sequences and the merged result sequence.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="selector">An asynchronous selector function to apply to each element; the second parameter represents the index of the element.</param>
            <returns>An async-enumerable sequence who's elements are the result of invoking the one-to-many transform function on each element of the source sequence and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TCollection">The type of the elements in the projected intermediate sequences.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="collectionSelector">A transform function to apply to each element.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="collectionSelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwaitCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence by awaiting the result of a transform function, invokes the result selector for each of the source elements and each of the corrasponding inner-sequence's elements and awaits the result, and merges the results into one async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name="TCollection">The type of elements in the projected intermediate sequences.</typeparam>
            <typeparam name="TResult">The type of elements in the result sequence.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="collectionSelector">An asynchronous transform function to apply to each source element.</param>
            <param name="resultSelector">An asynchronous transform function to apply to each element of the intermediate sequence.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector"/> on each element of the input sequence, awaiting the result, applying <paramref name="resultSelector"/> to each element of the intermediate sequences along with their corrasponding source element and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="collectionSelector"/>, or <paramref name="resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence by incorporating the element's index, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TCollection">The type of the elements in the projected intermediate sequences.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="collectionSelector">A transform function to apply to each element; the second parameter of the function represents the index of the source element.</param>
            <param name="resultSelector">A transform function to apply to each element of the intermediate sequence; the second parameter of the function represents the index of the source element and the fourth parameter represents the index of the intermediate element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="collectionSelector"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwaitCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence by awaiting the result of a transform function that incorporates each element's index,
            invokes the result selector for the source element and each of the corrasponding inner-sequence's elements and awaits the result, and merges the results into one async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name="TCollection">The type of elements in the projected intermediate sequences.</typeparam>
            <typeparam name="TResult">The type of elements in the result sequence.</typeparam>
            <param name="source">An async-enumerable sequence of elements to project.</param>
            <param name="collectionSelector">An asynchronous transform function to apply to each source element; the second parameter represents the index of the element.</param>
            <param name="resultSelector">An asynchronous transform function to apply to each element of the intermediate sequence.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector"/> on each element of the input sequence, awaiting the result, applying <paramref name="resultSelector"/> to each element of the intermediate sequences olong with their corrasponding source element and awaiting the result.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/>, <paramref name="collectionSelector"/>, or <paramref name="resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SequenceEqualAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="first">First async-enumerable sequence to compare.</param>
            <param name="second">Second async-enumerable sequence to compare.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SequenceEqualAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="first">First async-enumerable sequence to compare.</param>
            <param name="second">Second async-enumerable sequence to compare.</param>
            <param name="comparer">Comparer used to compare elements of both sequences.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence, and reports an exception if there is not exactly one element in the async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the single element in the async-enumerable sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence contains more than one element. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence that satisfies the condition in the predicate, and reports an exception if there is not exactly one element in the async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the single element in the async-enumerable sequence that satisfies the condition in the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- More than one element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence that satisfies the condition in the asynchronous predicate, and reports an exception if there is not exactly one element in the async-enumerable sequence that matches the predicate.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">An asynchronous predicate that will be applied to each element of the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the only element in the async-enumerable sequence that satisfies the condition in the asynchronous predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- More than one element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence, or a default value if the async-enumerable sequence is empty; this method reports an exception if there is more than one element in the async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>Sequence containing the single element in the async-enumerable sequence, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence contains more than one element.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleOrDefaultAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>Sequence containing the single element in the async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) The sequence contains more than one element that satisfies the condition in the predicate.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleOrDefaultAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence that satisfies the condition in the asynchronous predicate, or a default value if no such element exists, and reports an exception if there is more than one element in the async-enumerable sequence that matches the predicate.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">Source async-enumerable sequence.</param>
            <param name="predicate">An asynchronous predicate that will be applied to each element of the source sequence. </param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the only element in the async-enumerable sequence that satisfies the condition in the asynchronous predicate, or a default value if no such element exists.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">(Asynchronous) More than one element satisfies the condition in the predicate.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Skip``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in an async-enumerable sequence and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>An async-enumerable sequence that contains the elements that occur after the specified index in the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SkipLast``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements at the end of an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="count">Number of elements to bypass at the end of the source sequence.</param>
            <returns>An async-enumerable sequence containing the source sequence elements except for the bypassed ones at the end.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero.</exception>
            <remarks>
            This operator accumulates a queue with a length enough to store the first <paramref name="count"/> elements. As more elements are
            received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
            </remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in an async-enumerable sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in an async-enumerable sequence as long as a specified condition is true and then returns the remaining elements.
            The element's index is used in the logic of the predicate function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SkipWhileAwaitCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Bypasses elements in an async-enumerable sequence as long as a condition is true, and then returns the remaining elements.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to return elements from.</param>
            <param name="predicate">An asynchronous function to test each element for a condition.</param>
            <returns>An async-enumerable sequence containing the elements in the source sequence starting at the first element that does not pass the test specified by the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SkipWhileAwaitCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Bypasses elements in an async-enumerable sequence as long as a condition is true, and then returns the remaining elements.
            The index of the element is used by the predicate.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to return elements from.</param>
            <param name="predicate">An asynchronous function to test each element for a condition; the second parameter of the function represents the index of the element.</param>
            <returns>An async-enumerable sequence containing the elements in the source sequence starting at the first element that does not pass the test specified by the predicate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int64},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Single},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Double},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values.
            </summary>
            <param name="source">A sequence of <see cref="T:System.Nullable`1" /> values to calculate the sum of.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsyncCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of values that are used to calculate a sum.</param>
            <param name="selector">An asynchronous transform function to apply to each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Take``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence to take elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>An async-enumerable sequence that contains the specified number of elements from the start of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.TakeLast``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="count">Number of elements to take from the end of the source sequence.</param>
            <returns>An async-enumerable sequence containing the specified number of elements from the end of the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than zero.</exception>
            <remarks>
            This operator accumulates a buffer with a length enough to store elements <paramref name="count"/> elements. Upon completion of
            the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
            </remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements from an async-enumerable sequence as long as a specified condition is true.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements from an async-enumerable sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.TakeWhileAwaitCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns elements from an async-enumerable sequence as long as a specified condition is true.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">An asynchronous predicate to test each element for a condition.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.TakeWhileAwaitCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns elements from an async-enumerable sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">An asynchronous function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToArrayAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates an array from an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source async-enumerable sequence to get an array of elements for.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with an array containing all the elements of the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable sequence to an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Enumerable sequence to convert to an async-enumerable sequence.</param>
            <returns>The async-enumerable sequence whose elements are pulled from the given enumerable sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToAsyncEnumerable``1(System.IObservable{``0})">
            <summary>
            Converts an observable sequence to an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Observable sequence to convert to an async-enumerable sequence.</param>
            <returns>The async-enumerable sequence whose elements are pulled from the given observable sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToAsyncEnumerable``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a task to an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source task.</typeparam>
            <param name="task">Task to convert to an async-enumerable sequence.</param>
            <returns>The async-enumerable sequence whose element is pulled from the given task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence according to a specified key selector function, and a comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsyncCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsyncCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence according to a specified key selector function, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsyncCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence using the specified asynchronous key and element selector functions.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="elementSelector">An asynchronous transform function to produce a result element value from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsyncCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence using the specified asynchronous key and element selector functions.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a dictionary for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="elementSelector">An asynchronous transform function to produce a result element value from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToEnumerable``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Converts an async-enumerable sequence to an enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to convert to an enumerable sequence.</param>
            <returns>The enumerable sequence containing the elements in the async-enumerable sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToHashSetAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a hash set from an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source async-enumerable sequence to get a hash set of elements for.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a hash set containing all the elements of the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToHashSetAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a hash set from an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source async-enumerable sequence to get a hash set of elements for.</param>
            <param name="comparer">An equality comparer to compare elements of the sequence.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a hash set containing all the elements of the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Creates a list from an async-enumerable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">The source async-enumerable sequence to get a list of elements for.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a list containing all the elements of the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence according to a specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence according to a specified key selector function, and a comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsyncCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsyncCore``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence according to a specified key selector function, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <param name="elementSelector">A transform function to produce a result element value from each element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsyncCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking key and element selector functions on each source element and awaiting the results.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="elementSelector">An asynchronous transform function to produce a result element value from each element.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsyncCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking key and element selector functions on each source element and awaiting the results.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence to create a lookup for.</param>
            <param name="keySelector">An asynchronous function to extract a key from each element.</param>
            <param name="elementSelector">An asynchronous transform function to produce a result element value from each source element.</param>
            <param name="comparer">An equality comparer to compare keys.</param>
            <param name="cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> or <paramref name="comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToObservable``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Converts an async-enumerable sequence to an observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Enumerable sequence to convert to an observable sequence.</param>
            <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Union``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An async-enumerable sequence whose distinct elements form the first set for the union.</param>
            <param name="second">An async-enumerable sequence whose distinct elements form the second set for the union.</param>
            <returns>An async-enumerable sequence that contains the elements from both input sequences, excluding duplicates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Union``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified equality comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">An async-enumerable sequence whose distinct elements form the first set for the union.</param>
            <param name="second">An async-enumerable sequence whose distinct elements form the second set for the union.</param>
            <param name="comparer">The equality comparer to compare values.</param>
            <returns>An async-enumerable sequence that contains the elements from both input sequences, excluding duplicates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> is null.</exception>
        </member>
        <member name="T:System.Linq.AsyncEnumerable.UnionAsyncIterator`1">
            <summary>
            An iterator that yields distinct values from two or more <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerables.</typeparam>
        </member>
        <member name="T:System.Linq.AsyncEnumerable.UnionAsyncIterator2`1">
            <summary>
            An iterator that yields distinct values from two <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerables.</typeparam>
        </member>
        <member name="T:System.Linq.AsyncEnumerable.UnionAsyncIteratorN`1">
            <summary>
            An iterator that yields distinct values from three or more <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerables.</typeparam>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the elements of an async-enumerable sequence based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to filter.</param>
            <param name="predicate">A function to test each source element for a condition.</param>
            <returns>An async-enumerable sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters the elements of an async-enumerable sequence based on a predicate by incorporating the element's index.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to filter.</param>
            <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.WhereAwaitCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Filters the elements of an async-enumerable sequence based on an asynchronous predicate.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to filter.</param>
            <param name="predicate">An asynchronous predicate to test each source element for a condition.</param>
            <returns>An async-enumerable sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.WhereAwaitCore``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Filters the elements of an async-enumerable sequence based on an asynchronous predicate that incorporates the element's index.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">An async-enumerable sequence whose elements to filter.</param>
            <param name="predicate">An asynchronous predicate to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.Zip``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two async-enumerable sequences into one async-enumerable sequence by combining their elements in a pairwise fashion.
            </summary>
            <typeparam name="TFirst">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
            <param name="first">First async-enumerable source.</param>
            <param name="second">Second async-enumerable source.</param>
            <param name="selector">Function to invoke for each consecutive pair of elements from the first and second source.</param>
            <returns>An async-enumerable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ZipAwaitCore``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Merges two async-enumerable sequences into one async-enumerable sequence by combining their elements in a pairwise fashion.
            </summary>
            <typeparam name="TFirst">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
            <param name="first">First async-enumerable source.</param>
            <param name="second">Second async-enumerable source.</param>
            <param name="selector">An asynchronous function to invoke and await for each consecutive pair of elements from the first and second source.</param>
            <returns>An async-enumerable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,System.Threading.Tasks.ValueTask{``0}},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to aggregate over.</param>
            <param name = "accumulator">An asynchronous accumulator function to be invoked and awaited on each element.</param>
            <param name = "cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the final accumulator value.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "accumulator"/> is <see langword="null"/>.</exception>
            <exception cref = "T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAwaitAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name = "TAccumulate">The type of the result of aggregation.</typeparam>
            <param name = "source">An async-enumerable sequence to aggregate over.</param>
            <param name = "seed">The initial accumulator value.</param>
            <param name = "accumulator">An asynchronous accumulator function to be invoked and awaited on each element.</param>
            <param name = "cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the final accumulator value.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "accumulator"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AggregateAwaitAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Threading.CancellationToken)">
            <summary>
            Applies an accumulator function over an async-enumerable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value,
            and the specified result selector is used to select the result value.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name = "TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name = "TResult">The type of the resulting value.</typeparam>
            <param name = "source">An async-enumerable sequence to aggregate over.</param>
            <param name = "seed">The initial accumulator value.</param>
            <param name = "accumulator">An asynchronous accumulator function to be invoked and awaited on each element.</param>
            <param name = "resultSelector">An asynchronous transform function to transform the final accumulator value into the result value.</param>
            <param name = "cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the value obtained by applying the result selector to the final accumulator value.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "accumulator"/> or <paramref name = "resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AllAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Determines whether all elements in an async-enumerable sequence satisfy a condition.
            </summary>
            <typeparam name = "TSource">The type of element in the sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name = "predicate">An asynchronous predicate to apply to each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a value indicating whether all elements in the sequence pass the test in the specified predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AnyAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Determines whether any element in an async-enumerable sequence satisfies a condition.
            </summary>
            <typeparam name = "TSource">The type of element in the sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to apply the predicate to.</param>
            <param name = "predicate">An asynchronous predicate to apply to each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a value indicating whether any elements in the source sequence pass the test in the specified predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Int32"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <exception cref = "T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Int64"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <exception cref = "T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Single"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <exception cref = "T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Double"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <exception cref = "T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Decimal"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <exception cref = "T:System.InvalidOperationException">The source sequence is empty.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.AverageAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Computes the average of an async-enumerable sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking an asynchronous transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of values to compute the average of.</param>
            <param name = "selector">A transform function to invoke and await on each element of the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the average of the sequence of values, or <see langword="null"/> if the source sequence is empty.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.CountAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts the elements in an async-enumerable sequence that satisfy a condition.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of elements to count.</param>
            <param name = "predicate">An asynchronous predicate to apply to each element in the source sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the number of elements in the sequence that satisfy the predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence that satisfies the condition in the predicate.
            </summary>
            <typeparam name = "TSource">The type of elements in the sequence.</typeparam>
            <param name = "source">Source async-enumerable sequence.</param>
            <param name = "predicate">An asynchronous predicate that will be invoked and awaited for each element in the sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the first element in the sequence that satisfies the predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is <see langword="null"/>.</exception>
            <exception cref = "T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.FirstOrDefaultAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of an async-enumerable sequence that satisfies the condition in the predicate, or a default value if no element satisfies the condition in the predicate.
            </summary>
            <typeparam name = "TSource">The type of element in the sequence.</typeparam>
            <param name = "source">Source async-enumerable sequence.</param>
            <param name = "predicate">An asynchronous predicate to invoke and await on each element of the sequence.</param>
            <param name = "cancellationToken">An optional cancellation token for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the first element in the sequence that satisfies the predicate, or a default value if no element satisfies the predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ForEachAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits an asynchronous action on each element in the source sequence, and returns a task that is signaled when the sequence terminates.
            </summary>
            <typeparam name = "TSource">Type of elements in the sequence.</typeparam>
            <param name = "source">Source sequence.</param>
            <param name = "action">Asynchronous action to invoke and await for each element in the source sequence.</param>
            <param name = "cancellationToken">Optional cancellation token for cancelling the sequence at any time.</param>
            <returns>Task that signals the termination of the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ForEachAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits an asynchronous action on each element in the source sequence, incorporating the element's index, and returns a task that is signaled when the sequence terminates.
            </summary>
            <typeparam name = "TSource">Type of elements in the sequence.</typeparam>
            <param name = "source">Source sequence.</param>
            <param name = "action">Asynchronous action to invoke and await for each element in the source sequence; the second parameter represents the index of the element.</param>
            <param name = "cancellationToken">Optional cancellation token for cancelling the sequence at any time.</param>
            <returns>Task that signals the termination of the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "action"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function and comparer.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <param name = "comparer">An equality comparer to compare keys with.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Groups the elements of an async-enumerable sequence and selects the resulting elements by using a specified function.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <param name = "elementSelector">An asynchronous function to map each source element to an element in an async-enumerable group.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence and selects the resulting elements by using a specified function.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <param name = "elementSelector">An asynchronous function to map each source element to an element in an async-enumerable group.</param>
            <param name = "comparer">An equality comparer to use to compare keys.</param>
            <returns>A sequence of async-enumerable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> or <paramref name = "comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function, and then applies a result selector function to each group.
            </summary>
            <typeparam name = "TSource">Type of element in the source sequence.</typeparam>
            <typeparam name = "TKey">Type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TResult">The result type returned by the result selector function.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <param name = "resultSelector">An asynchronous function to transform each group into the result type.</param>
            <returns>An async-enumerable sequence of results obtained by invoking and awaiting the result-selector function on each group.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key selector function, and then applies a result selector function to each group.
            </summary>
            <typeparam name = "TSource">Type of element in the source sequence.</typeparam>
            <typeparam name = "TKey">Type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TResult">The result type returned by the result selector function.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <param name = "resultSelector">An asynchronous function to transform each group into the result type.</param>
            <param name = "comparer">An equality comparer to use to compare keys.</param>
            <returns>An async-enumerable sequence of results obtained by invoking and awaiting the result-selector function on each group.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "resultSelector"/> or <paramref name = "comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.ValueTask{``3}})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key-selector function, applies an element selector to each element of each group, then applies a result selector to each transformed group.
            </summary>
            <typeparam name = "TSource">The type of element in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of element computed by the element selector.</typeparam>
            <typeparam name = "TResult">The type of the final result, computed by applying the result selector to each transformed group of elements.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <param name = "elementSelector">An asynchronous function to apply to each element of each group. </param>
            <param name = "resultSelector">An asynchronous function to transform each group into the result type.</param>
            <returns>An async-enumerable sequence of results obtained by invoking the result selector function on each group and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> or <paramref name = "resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.GroupByAwait``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an async-enumerable sequence according to a specified key-selector function, applies an element selector to each element of each group, then applies a result selector to each transformed group.
            </summary>
            <typeparam name = "TSource">The type of element in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of element computed by the element selector.</typeparam>
            <typeparam name = "TResult">The type of the final result, computed by applying the result selector to each transformed group of elements.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to group.</param>
            <param name = "keySelector">An asynchronous function to extract the key for each element.</param>
            <param name = "elementSelector">An asynchronous function to apply to each element of each group. </param>
            <param name = "resultSelector">An asynchronous function to transform each group into the result type.</param>
            <param name = "comparer">An equality comparer to use to compare keys.</param>
            <returns>An async-enumerable sequence of results obtained by invoking the result selector function on each group and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> or <paramref name = "resultSelector"/> or <paramref name = "comparer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence that satisfies the condition in the predicate.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">Source async-enumerable sequence.</param>
            <param name = "predicate">An asynchronous predicate function to evaluate for elements in the source sequence.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence that satisfies the condition in the predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
            <exception cref = "T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LastOrDefaultAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the last element of an async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">Source async-enumerable sequence.</param>
            <param name = "predicate">An asynchronous predicate function to evaluate for elements in the source sequence.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the last element in the async-enumerable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.LongCountAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns an async-enumerable sequence containing a <see cref = "T:System.Int64"/> that represents the number of elements in the specified async-enumerable sequence that satisfy a condition.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence that contains elements to be counted.</param>
            <param name = "predicate">An asynchronous predicate to test each element for a condition.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TResult">The type of the objects derived from the elements in the source sequence to determine the maximum of.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a single element with the value that corresponds to the maximum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TResult">The type of the objects derived from the elements in the source sequence to determine the minimum of.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum <see cref = "T:System.Int32"/> value in an async-enumerable sequence.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Returns the maximum <see cref = "T:System.Nullable`1"/> value in an async-enumerable sequence.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Int64"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Single"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Double"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Decimal"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MaxAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the maximum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">Type of elements in the source sequence.</typeparam>
            <param name = "source">The source sequence.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element of the source.</param>
            <param name = "cancellationToken">The optional cancellation token to be usef for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the maximum value in the sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Int32"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Int64"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Single"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Double"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Decimal"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.MinAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Invokes and awaits a transform function on each element of a sequence and returns the minimum <see cref = "T:System.Nullable`1"/> value.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to determine the minimum element of.</param>
            <param name = "selector">An asynchronous transform function to invoke and await on each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An async-enumerable sequence of values to order.</param>
            <param name = "keySelector">An asynchronous function to extract a key from an element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer. The keys are obtained by invoking the transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An async-enumerable sequence of values to order.</param>
            <param name = "keySelector">An asynchronous function to extract a key from an element.</param>
            <param name = "comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByDescendingAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An async-enumerable sequence of values to order.</param>
            <param name = "keySelector">An asynchronous function to extract a key from an element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.OrderByDescendingAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer. The keys are obtained by invoking the transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An async-enumerable sequence of values to order.</param>
            <param name = "keySelector">An asynchronous function to extract a key from an element.</param>
            <param name = "comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByAwait``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByAwait``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer. The keys are obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByDescendingAwait``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ThenByDescendingAwait``2(System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer. The keys are obtained by invoking a transform function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements of source.</typeparam>
            <typeparam name = "TKey">The type of the key returned by keySelector.</typeparam>
            <param name = "source">An ordered async-enumerable sequence that contains elements to sort.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "comparer">A comparer to compare keys.</param>
            <returns>An ordered async-enumerable sequence whose elements are sorted in descending order according to a key.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Projects each element of an async-enumerable sequence into a new form by applying an asynchronous selector function to each member of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence and awaiting the result.</typeparam>
            <param name = "source">A sequence of elements to invoke a transform function on.</param>
            <param name = "selector">An asynchronous transform function to apply to each source element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the transform function on each element of the source sequence and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Projects each element of an async-enumerable sequence into a new form by applying an asynchronous selector function that incorporates each element's index to each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name = "TResult">The type of elements in the result sequence, obtained by running the selector function for each element and its index, and awaiting the result.</typeparam>
            <param name = "source">A sequence of elements to invoke a transform function on.</param>
            <param name = "selector">An asynchronous transform function to apply to each source element; the second parameter represents the index of the element.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the transform function on each element and its index of the source sequence and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}})">
            <summary>
            Projects each element of an async-enumerable sequence into an async-enumerable sequence and merges the resulting async-enumerable sequences into one async-enumerable sequence.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name = "TResult">The type of elements in the projected inner sequences and the merged result sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of elements to project.</param>
            <param name = "selector">An asynchronous selector function to apply to each element of the source sequence.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function on each element of the source sequence and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwait``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}})">
            <summary>
            Projects each element of an async-enumerable sequence into an async-enumerable sequence by incorporating the element's index and merges the resulting async-enumerable sequences into an async-enumerable sequence.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name = "TResult">The type of elements in the projected inner sequences and the merged result sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of elements to project.</param>
            <param name = "selector">An asynchronous selector function to apply to each element; the second parameter represents the index of the element.</param>
            <returns>An async-enumerable sequence who's elements are the result of invoking the one-to-many transform function on each element of the source sequence and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwait``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence by awaiting the result of a transform function, invokes the result selector for each of the source elements and each of the corrasponding inner-sequence's elements and awaits the result, and merges the results into one async-enumerable sequence.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name = "TCollection">The type of elements in the projected intermediate sequences.</typeparam>
            <typeparam name = "TResult">The type of elements in the result sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of elements to project.</param>
            <param name = "collectionSelector">An asynchronous transform function to apply to each source element.</param>
            <param name = "resultSelector">An asynchronous transform function to apply to each element of the intermediate sequence.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function <paramref name = "collectionSelector"/> on each element of the input sequence, awaiting the result, applying <paramref name = "resultSelector"/> to each element of the intermediate sequences along with their corrasponding source element and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/>, <paramref name = "collectionSelector"/>, or <paramref name = "resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SelectManyAwait``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Collections.Generic.IAsyncEnumerable{``1}}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Projects each element of an async-enumerable sequence to an async-enumerable sequence by awaiting the result of a transform function that incorporates each element's index,
            invokes the result selector for the source element and each of the corrasponding inner-sequence's elements and awaits the result, and merges the results into one async-enumerable sequence.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <typeparam name = "TCollection">The type of elements in the projected intermediate sequences.</typeparam>
            <typeparam name = "TResult">The type of elements in the result sequence.</typeparam>
            <param name = "source">An async-enumerable sequence of elements to project.</param>
            <param name = "collectionSelector">An asynchronous transform function to apply to each source element; the second parameter represents the index of the element.</param>
            <param name = "resultSelector">An asynchronous transform function to apply to each element of the intermediate sequence.</param>
            <returns>An async-enumerable sequence whose elements are the result of invoking the one-to-many transform function <paramref name = "collectionSelector"/> on each element of the input sequence, awaiting the result, applying <paramref name = "resultSelector"/> to each element of the intermediate sequences olong with their corrasponding source element and awaiting the result.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/>, <paramref name = "collectionSelector"/>, or <paramref name = "resultSelector"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence that satisfies the condition in the asynchronous predicate, and reports an exception if there is not exactly one element in the async-enumerable sequence that matches the predicate.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">Source async-enumerable sequence.</param>
            <param name = "predicate">An asynchronous predicate that will be applied to each element of the source sequence.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the only element in the async-enumerable sequence that satisfies the condition in the asynchronous predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
            <exception cref = "T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- More than one element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SingleOrDefaultAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of an async-enumerable sequence that satisfies the condition in the asynchronous predicate, or a default value if no such element exists, and reports an exception if there is more than one element in the async-enumerable sequence that matches the predicate.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">Source async-enumerable sequence.</param>
            <param name = "predicate">An asynchronous predicate that will be applied to each element of the source sequence. </param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>ValueTask containing the only element in the async-enumerable sequence that satisfies the condition in the asynchronous predicate, or a default value if no such element exists.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
            <exception cref = "T:System.InvalidOperationException">(Asynchronous) More than one element satisfies the condition in the predicate.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SkipWhileAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Bypasses elements in an async-enumerable sequence as long as a condition is true, and then returns the remaining elements.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to return elements from.</param>
            <param name = "predicate">An asynchronous function to test each element for a condition.</param>
            <returns>An async-enumerable sequence containing the elements in the source sequence starting at the first element that does not pass the test specified by the predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SkipWhileAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Bypasses elements in an async-enumerable sequence as long as a condition is true, and then returns the remaining elements.
            The index of the element is used by the predicate.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to return elements from.</param>
            <param name = "predicate">An asynchronous function to test each element for a condition; the second parameter of the function represents the index of the element.</param>
            <returns>An async-enumerable sequence containing the elements in the source sequence starting at the first element that does not pass the test specified by the predicate.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Int32"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Int64"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Single"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Double"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Decimal"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.SumAwaitAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
            <summary>
            Computes the sum of a sequence of <see cref = "T:System.Nullable`1"/> values that are obtained by invoking a transform function on each element of the source sequence and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of elements in the source sequence.</typeparam>
            <param name = "source">A sequence of values that are used to calculate a sum.</param>
            <param name = "selector">An asynchronous transform function to apply to each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing the sum of the values in the source sequence.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "selector"/> is <see langword="null"/>.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.TakeWhileAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns elements from an async-enumerable sequence as long as a specified condition is true.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">A sequence to return elements from.</param>
            <param name = "predicate">An asynchronous predicate to test each element for a condition.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.TakeWhileAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns elements from an async-enumerable sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">A sequence to return elements from.</param>
            <param name = "predicate">An asynchronous function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a dictionary for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a dictionary for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "comparer">An equality comparer to compare keys.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence using the specified asynchronous key and element selector functions.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a dictionary for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "elementSelector">An asynchronous transform function to produce a result element value from each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToDictionaryAwaitAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a dictionary from an async-enumerable sequence using the specified asynchronous key and element selector functions.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a dictionary for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "elementSelector">An asynchronous transform function to produce a result element value from each element.</param>
            <param name = "comparer">An equality comparer to compare keys.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> or <paramref name = "comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a lookup for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsync``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking a key-selector function on each element and awaiting the result.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a lookup for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "comparer">An equality comparer to compare keys.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking key and element selector functions on each source element and awaiting the results.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a lookup for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "elementSelector">An asynchronous transform function to produce a result element value from each element.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>An async-enumerable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ToLookupAwaitAsync``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Creates a lookup from an async-enumerable sequence by invoking key and element selector functions on each source element and awaiting the results.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name = "TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
            <typeparam name = "TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence to create a lookup for.</param>
            <param name = "keySelector">An asynchronous function to extract a key from each element.</param>
            <param name = "elementSelector">An asynchronous transform function to produce a result element value from each source element.</param>
            <param name = "comparer">An equality comparer to compare keys.</param>
            <param name = "cancellationToken">The optional cancellation token to be used for cancelling the sequence at any time.</param>
            <returns>A ValueTask containing a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "keySelector"/> or <paramref name = "elementSelector"/> or <paramref name = "comparer"/> is null.</exception>
            <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.WhereAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Filters the elements of an async-enumerable sequence based on an asynchronous predicate.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to filter.</param>
            <param name = "predicate">An asynchronous predicate to test each source element for a condition.</param>
            <returns>An async-enumerable sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.WhereAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Filters the elements of an async-enumerable sequence based on an asynchronous predicate that incorporates the element's index.
            </summary>
            <typeparam name = "TSource">The type of the elements in the source sequence.</typeparam>
            <param name = "source">An async-enumerable sequence whose elements to filter.</param>
            <param name = "predicate">An asynchronous predicate to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
            <returns>An async-enumerable sequence that contains elements from the input sequence that satisfy the condition.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "source"/> or <paramref name = "predicate"/> is null.</exception>
        </member>
        <member name="M:System.Linq.AsyncEnumerable.ZipAwait``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Merges two async-enumerable sequences into one async-enumerable sequence by combining their elements in a pairwise fashion.
            </summary>
            <typeparam name = "TFirst">The type of the elements in the first source sequence.</typeparam>
            <typeparam name = "TSecond">The type of the elements in the second source sequence.</typeparam>
            <typeparam name = "TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
            <param name = "first">First async-enumerable source.</param>
            <param name = "second">Second async-enumerable source.</param>
            <param name = "selector">An asynchronous function to invoke and await for each consecutive pair of elements from the first and second source.</param>
            <returns>An async-enumerable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
            <exception cref = "T:System.ArgumentNullException"><paramref name = "first"/> or <paramref name = "second"/> or <paramref name = "selector"/> is null.</exception>
        </member>
        <member name="T:System.Linq.AsyncEnumerablePartition`1">
            <summary>
            An iterator that yields the items of part of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source enumerable.</typeparam>
        </member>
        <member name="T:System.Linq.AsyncListPartition`1">
            <summary>
            An iterator that yields the items of part of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="TSource">The type of the source list.</typeparam>
        </member>
        <member name="T:System.Linq.IAsyncIListProvider`1">
            <summary>
            An iterator that can produce an array or <see cref="T:System.Collections.Generic.List`1"/> through an optimized path.
            </summary>
        </member>
        <member name="M:System.Linq.IAsyncIListProvider`1.ToArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Produce an array of the sequence through an optimized path.
            </summary>
            <param name="cancellationToken"></param>
            <returns>The array.</returns>
        </member>
        <member name="M:System.Linq.IAsyncIListProvider`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Produce a <see cref="T:System.Collections.Generic.List`1"/> of the sequence through an optimized path.
            </summary>
            <param name="cancellationToken"></param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:System.Linq.IAsyncIListProvider`1.GetCountAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns the count of elements in the sequence.
            </summary>
            <param name="onlyIfCheap">If true then the count should only be calculated if doing
            so is quick (sure or likely to be constant time), otherwise -1 should be returned.</param>
            <param name="cancellationToken"></param>
            <returns>The number of elements.</returns>
        </member>
        <member name="T:System.Linq.IAsyncPartition`1">
            <summary>
            An iterator that supports random access and can produce a partial sequence of its items through an optimized path.
            </summary>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.Skip(System.Int32)">
            <summary>
            Creates a new partition that skips the specified number of elements from this sequence.
            </summary>
            <param name="count">The number of elements to skip.</param>
            <returns>An <see cref="T:System.Linq.IAsyncPartition`1"/> with the first <paramref name="count"/> items removed.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.Take(System.Int32)">
            <summary>
            Creates a new partition that takes the specified number of elements from this sequence.
            </summary>
            <param name="count">The number of elements to take.</param>
            <returns>An <see cref="T:System.Linq.IAsyncPartition`1"/> with only the first <paramref name="count"/> items.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.TryGetElementAtAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the item associated with a 0-based index in this sequence.
            </summary>
            <param name="index">The 0-based index to access.</param>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>The element if found, otherwise, the default value of <see cref="T:System.Linq.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.TryGetFirstAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the first item in this sequence.
            </summary>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>The element if found, otherwise, the default value of <see cref="T:System.Linq.Maybe`1"/>.</returns>
        </member>
        <member name="M:System.Linq.IAsyncPartition`1.TryGetLastAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the last item in this sequence.
            </summary>
            <param name="cancellationToken">Token to observe for cancellation requests.</param>
            <returns>The element if found, otherwise, the default value of <see cref="T:System.Linq.Maybe`1"/>.</returns>
        </member>
        <member name="T:System.Linq.IOrderedAsyncEnumerable`1">
            <summary>
            Represents a sorted async-enumerable sequence.
            </summary>
            <typeparam name="TElement">The type of the elements of the sequence.</typeparam>
        </member>
        <member name="M:System.Linq.IOrderedAsyncEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an ordered async-enumerable according to a key.
            </summary>
            <typeparam name="TKey">The type of the key produced by keySelector.</typeparam>
            <param name="keySelector">The function used to extract the key for each element.</param>
            <param name="comparer">The comparer used to compare keys for placement in the returned sequence.</param>
            <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:System.Linq.IOrderedAsyncEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,System.Threading.Tasks.ValueTask{``0}},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an ordered async-enumerable according to a key provided via a ValueTask.
            </summary>
            <typeparam name="TKey">The type of the key produced by keySelector.</typeparam>
            <param name="keySelector">The function used to extract the key for each element as a ValueTask.</param>
            <param name="comparer">The comparer used to compare keys for placement in the returned sequence.</param>
            <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
        </member>
        <member name="M:System.Linq.IOrderedAsyncEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``0}},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an ordered async-enumerable according to a key provided via a ValueTask.
            </summary>
            <typeparam name="TKey">The type of the key produced by keySelector.</typeparam>
            <param name="keySelector">The function used to extract the key for each element as a ValueTask supporting cancellation.</param>
            <param name="comparer">The comparer used to compare keys for placement in the returned sequence.</param>
            <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param>
            <returns>An ordered async-enumerable whose elements are sorted according to a key.</returns>
        </member>
        <member name="T:System.Linq.Internal.Grouping`2">
            Adapted from System.Linq.Grouping from .NET Framework
            Source: https://github.com/dotnet/corefx/blob/b90532bc97b07234a7d18073819d019645285f1c/src/System.Linq/src/System/Linq/Grouping.cs#L64
        </member>
        <member name="T:System.Linq.SingleLinkedNode`1">
            <summary>
            An immutable node in a singly-linked list of items.
            </summary>
            <typeparam name="TSource">The type of the node's item.</typeparam>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.#ctor(`0)">
            <summary>
            Constructs a tail node.
            </summary>
            <param name="item">The item to place in the tail node.</param>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.#ctor(System.Linq.SingleLinkedNode{`0},`0)">
            <summary>
            Constructs a node linked to the specified node.
            </summary>
            <param name="linked">The linked node.</param>
            <param name="item">The item to place in this node.</param>
        </member>
        <member name="P:System.Linq.SingleLinkedNode`1.Item">
            <summary>
            The item held by this node.
            </summary>
        </member>
        <member name="P:System.Linq.SingleLinkedNode`1.Linked">
            <summary>
            The next node in the singly-linked list.
            </summary>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.Add(`0)">
            <summary>
            Creates a new node that holds the specified item and is linked to this node.
            </summary>
            <param name="item">The item to place in the new node.</param>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.GetCount">
            <summary>
            Gets the number of items in this and subsequent nodes by walking the linked list.
            </summary>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.GetEnumerator(System.Int32)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates the items of this node's singly-linked list in reverse.
            </summary>
            <param name="count">The number of items in this node.</param>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.GetNode(System.Int32)">
            <summary>
            Gets the node at a logical index by walking the linked list.
            </summary>
            <param name="index">The logical index.</param>
            <remarks>
            The caller should make sure <paramref name="index"/> is less than this node's count.
            </remarks>
        </member>
        <member name="M:System.Linq.SingleLinkedNode`1.ToArray(System.Int32)">
            <summary>
            Returns an <see cref="T:TSource[]"/> that contains the items of this node's singly-linked list in reverse.
            </summary>
            <param name="count">The number of items in this node.</param>
        </member>
        <member name="T:System.Collections.Generic.AsyncEnumerator">
            <summary>
            Provides a set of extension methods for <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncEnumerator.Create``1(System.Func{System.Threading.Tasks.ValueTask{System.Boolean}},System.Func{``0},System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Creates a new enumerator using the specified delegates implementing the members of <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerator.</typeparam>
            <param name="moveNextAsync">The delegate implementing the <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/> method.</param>
            <param name="getCurrent">The delegate implementing the <see cref="P:System.Collections.Generic.IAsyncEnumerator`1.Current"/> property getter.</param>
            <param name="disposeAsync">The delegate implementing the <see cref="M:System.IAsyncDisposable.DisposeAsync"/> method.</param>
            <returns>A new enumerator instance.</returns>
        </member>
        <member name="M:System.Collections.Generic.AsyncEnumerator.MoveNextAsync``1(System.Collections.Generic.IAsyncEnumerator{``0},System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element in the sequence, returning the result asynchronously.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerator.</typeparam>
            <param name="source">The enumerator to advance.</param>
            <param name="cancellationToken">Cancellation token that can be used to cancel the operation.</param>
            <returns>
            Task containing the result of the operation: true if the enumerator was successfully advanced
            to the next element; false if the enumerator has passed the end of the sequence.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.AsyncEnumerator.WithCancellation``1(System.Collections.Generic.IAsyncEnumerator{``0},System.Threading.CancellationToken)">
            <summary>
            Wraps the specified enumerator with an enumerator that checks for cancellation upon every invocation
            of the <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/> method.
            </summary>
            <typeparam name="T">The type of the elements returned by the enumerator.</typeparam>
            <param name="source">The enumerator to augment with cancellation support.</param>
            <param name="cancellationToken">The cancellation token to observe.</param>
            <returns>An enumerator that honors cancellation requests.</returns>
        </member>
    </members>
</doc>
