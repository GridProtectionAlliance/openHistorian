<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Caching.Memory</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache" />
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions})">
      <param name="optionsAccessor" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
      <param name="optionsAccessor" />
      <param name="loggerFactory" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Get(System.String)">
      <param name="key" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.GetAsync(System.String,System.Threading.CancellationToken)">
      <param name="key" />
      <param name="token" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Refresh(System.String)">
      <param name="key" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.RefreshAsync(System.String,System.Threading.CancellationToken)">
      <param name="key" />
      <param name="token" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Remove(System.String)">
      <param name="key" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
      <param name="key" />
      <param name="token" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Set(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
      <param name="key" />
      <param name="value" />
      <param name="options" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
      <param name="key" />
      <param name="value" />
      <param name="options" />
      <param name="token" />
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryCache">
      <summary>An implementation of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> using a dictionary to
            store its entries.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})">
      <summary>Creates a new <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache" /> instance.</summary>
      <param name="optionsAccessor">The options of the cache.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
      <summary>Creates a new <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache" /> instance.</summary>
      <param name="optionsAccessor">The options of the cache.</param>
      <param name="loggerFactory">The factory used to create loggers.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)">
      <param name="percentage" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)">
      <summary>Creates or overwrites an entry in the cache.</summary>
      <param name="key" />
      <returns>The newly created <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> instance.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)">
      <param name="disposing" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize">
      <summary>Cleans up the background collection events.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)">
      <summary>Removes the object associated with the given key.</summary>
      <param name="key" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)">
      <summary>Gets the item associated with this key if present.</summary>
      <param name="key" />
      <param name="result" />
      <returns>
        <see langword="true" /> if the key was found.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCache.Count">
      <summary>Gets the count of the current entries for diagnostic purposes.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions" />
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.Clock" />
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.CompactionPercentage">
      <summary>Gets or sets the amount to compact the cache by when the maximum size is exceeded.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.ExpirationScanFrequency">
      <summary>Gets or sets the minimum length of time between successive scans for expired items.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.Microsoft#Extensions#Options#IOptions{Microsoft#Extensions#Caching#Memory#MemoryCacheOptions}#Value">
      <summary>Gets the default configured <typeparamref name="TOptions" /> instance.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.SizeLimit">
      <summary>Gets or sets the maximum size of the cache.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions" />
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions.#ctor" />
    <member name="T:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions">
      <summary>Extension methods for setting up memory cache related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>Adds a default implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that stores items in memory
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Frameworks that require a distributed cache to work
            can safely add this dependency as part of their dependency list to ensure that there is at least
            one implementation available.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions})">
      <summary>Adds a default implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that stores items in memory
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Frameworks that require a distributed cache to work
            can safely add this dependency as part of their dependency list to ensure that there is at least
            one implementation available.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <param name="setupAction">
            The <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>Adds a non distributed in memory implementation of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})">
      <summary>Adds a non distributed in memory implementation of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <param name="setupAction">
            The <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
  </members>
</doc>