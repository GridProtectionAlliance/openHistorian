<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Caching.Abstractions</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions" />
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.DateTimeOffset)">
      <summary>Sets an absolute expiration date for the cache entry.</summary>
      <param name="options">The options to be operated on.</param>
      <param name="absolute">The expiration time, in absolute terms.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.TimeSpan)">
      <summary>Sets an absolute expiration time, relative to now.</summary>
      <param name="options">The options to be operated on.</param>
      <param name="relative">The expiration time, relative to now.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.TimeSpan)">
      <summary>Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).</summary>
      <param name="options">The options to be operated on.</param>
      <param name="offset">The sliding expiration time.</param>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions">
      <summary>Provides the cache options for an entry in <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions.AbsoluteExpiration">
      <summary>Gets or sets an absolute expiration date for the cache entry.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions.AbsoluteExpirationRelativeToNow">
      <summary>Gets or sets an absolute expiration time, relative to now.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions.SlidingExpiration">
      <summary>Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions">
      <summary>Extension methods for setting data in an <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String)">
      <summary>Gets a string from the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to get the stored data for.</param>
      <returns>The string value from the stored cache key.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.GetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Threading.CancellationToken)">
      <summary>Asynchronously gets a string from the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to get the stored data for.</param>
      <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
      <returns>A task that gets the string value from the stored cache key.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.Set(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[])">
      <summary>Sets a sequence of bytes in the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to store the data in.</param>
      <param name="value">The data to store in the cache.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Byte[],System.Threading.CancellationToken)">
      <summary>Asynchronously sets a sequence of bytes in the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to store the data in.</param>
      <param name="value">The data to store in the cache.</param>
      <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> or <paramref name="value" /> is null.</exception>
      <returns>A task that represents the asynchronous set operation.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String)">
      <summary>Sets a string in the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to store the data in.</param>
      <param name="value">The data to store in the cache.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetString(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
      <summary>Sets a string in the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to store the data in.</param>
      <param name="value">The data to store in the cache.</param>
      <param name="options">The cache options for the entry.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> or <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
      <summary>Asynchronously sets a string in the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to store the data in.</param>
      <param name="value">The data to store in the cache.</param>
      <param name="options">The cache options for the entry.</param>
      <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> or <paramref name="value" /> is null.</exception>
      <returns>A task that represents the asynchronous set operation.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions.SetStringAsync(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.String,System.Threading.CancellationToken)">
      <summary>Asynchronously sets a string in the specified cache with the specified key.</summary>
      <param name="cache">The cache in which to store the data.</param>
      <param name="key">The key to store the data in.</param>
      <param name="value">The data to store in the cache.</param>
      <param name="token">Optional. A <see cref="T:System.Threading.CancellationToken" /> to cancel the operation.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key" /> or <paramref name="value" /> is null.</exception>
      <returns>A task that represents the asynchronous set operation.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache">
      <summary>Represents a distributed cache of serialized values.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.Get(System.String)">
      <summary>Gets a value with the given key.</summary>
      <param name="key">A string identifying the requested value.</param>
      <returns>The located value or null.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.GetAsync(System.String,System.Threading.CancellationToken)">
      <summary>Gets a value with the given key.</summary>
      <param name="key">A string identifying the requested value.</param>
      <param name="token">Optional. The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the located value or null.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.Refresh(System.String)">
      <summary>Refreshes a value in the cache based on its key, resetting its sliding expiration timeout (if any).</summary>
      <param name="key">A string identifying the requested value.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.RefreshAsync(System.String,System.Threading.CancellationToken)">
      <summary>Refreshes a value in the cache based on its key, resetting its sliding expiration timeout (if any).</summary>
      <param name="key">A string identifying the requested value.</param>
      <param name="token">Optional. The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.Remove(System.String)">
      <summary>Removes the value with the given key.</summary>
      <param name="key">A string identifying the requested value.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
      <summary>Removes the value with the given key.</summary>
      <param name="key">A string identifying the requested value.</param>
      <param name="token">Optional. The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.Set(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
      <summary>Sets a value with the given key.</summary>
      <param name="key">A string identifying the requested value.</param>
      <param name="value">The value to set in the cache.</param>
      <param name="options">The cache options for the value.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.IDistributedCache.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
      <summary>Sets the value with the given key.</summary>
      <param name="key">A string identifying the requested value.</param>
      <param name="value">The value to set in the cache.</param>
      <param name="options">The cache options for the value.</param>
      <param name="token">Optional. The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
      <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions" />
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Primitives.IChangeToken)">
      <summary>Expire the cache entry if the given <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> expires.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="expirationToken">The <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that causes the cache entry to expire.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)">
      <summary>The given callback will be fired after the cache entry is evicted from the cache.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="callback">The callback to run after the entry is evicted.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)">
      <summary>The given callback will be fired after the cache entry is evicted from the cache.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="callback">The callback to run after the entry is evicted.</param>
      <param name="state">The state to pass to the post-eviction callback.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.DateTimeOffset)">
      <summary>Sets an absolute expiration date for the cache entry.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="absolute">A <see cref="T:System.DateTimeOffset" /> representing the expiration time in absolute terms.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.TimeSpan)">
      <summary>Sets an absolute expiration time, relative to now.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="relative">The <see cref="T:System.TimeSpan" /> representing the expiration time relative to now.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetOptions(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)">
      <summary>Applies the values of an existing <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> to the entry.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="options">Set the values of these options on the <paramref name="entry" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.ICacheEntry,Microsoft.Extensions.Caching.Memory.CacheItemPriority)">
      <summary>Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.</summary>
      <param name="entry">The entry to set the priority for.</param>
      <param name="priority">The <see cref="T:Microsoft.Extensions.Caching.Memory.CacheItemPriority" /> to set on the entry.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetSize(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Int64)">
      <summary>Sets the size of the cache entry value.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="size">The size to set on the <paramref name="entry" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.TimeSpan)">
      <summary>Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="offset">A <see cref="T:System.TimeSpan" /> representing a sliding expiration.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheEntryExtensions.SetValue(Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Object)">
      <summary>Sets the value of the cache entry.</summary>
      <param name="entry">The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" />.</param>
      <param name="value">The value to set on the <paramref name="entry" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> for chaining.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.CacheExtensions" />
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)">
      <param name="cache" />
      <param name="key" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)">
      <param name="cache" />
      <param name="key" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})">
      <param name="cache" />
      <param name="key" />
      <param name="factory" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}})">
      <param name="cache" />
      <param name="key" />
      <param name="factory" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)">
      <param name="cache" />
      <param name="key" />
      <param name="value" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)">
      <param name="cache" />
      <param name="key" />
      <param name="value" />
      <param name="options" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Primitives.IChangeToken)">
      <param name="cache" />
      <param name="key" />
      <param name="value" />
      <param name="expirationToken" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.DateTimeOffset)">
      <param name="cache" />
      <param name="key" />
      <param name="value" />
      <param name="absoluteExpiration" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.TimeSpan)">
      <param name="cache" />
      <param name="key" />
      <param name="value" />
      <param name="absoluteExpirationRelativeToNow" />
      <typeparam name="TItem" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)">
      <param name="cache" />
      <param name="key" />
      <param name="value" />
      <typeparam name="TItem" />
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.CacheItemPriority">
      <summary>Specifies how items are prioritized for preservation during a memory pressure triggered cleanup.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Memory.CacheItemPriority.High" />
    <member name="F:Microsoft.Extensions.Caching.Memory.CacheItemPriority.Low" />
    <member name="F:Microsoft.Extensions.Caching.Memory.CacheItemPriority.NeverRemove" />
    <member name="F:Microsoft.Extensions.Caching.Memory.CacheItemPriority.Normal" />
    <member name="T:Microsoft.Extensions.Caching.Memory.EvictionReason" />
    <member name="F:Microsoft.Extensions.Caching.Memory.EvictionReason.Capacity">
      <summary>Overflow</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Memory.EvictionReason.Expired">
      <summary>Timed out</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Memory.EvictionReason.None" />
    <member name="F:Microsoft.Extensions.Caching.Memory.EvictionReason.Removed">
      <summary>Manually</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Memory.EvictionReason.Replaced">
      <summary>Overwritten</summary>
    </member>
    <member name="F:Microsoft.Extensions.Caching.Memory.EvictionReason.TokenExpired">
      <summary>Event</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.ICacheEntry">
      <summary>Represents an entry in the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> implementation.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.AbsoluteExpiration">
      <summary>Gets or sets an absolute expiration date for the cache entry.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.AbsoluteExpirationRelativeToNow">
      <summary>Gets or sets an absolute expiration time, relative to now.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.ExpirationTokens">
      <summary>Gets the <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> instances which cause the cache entry to expire.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.Key">
      <summary>Gets the key of the cache entry.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.PostEvictionCallbacks">
      <summary>Gets or sets the callbacks will be fired after the cache entry is evicted from the cache.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.Priority">
      <summary>Gets or sets the priority for keeping the cache entry in the cache during a
             cleanup. The default is <see cref="F:Microsoft.Extensions.Caching.Memory.CacheItemPriority.Normal" />.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.Size">
      <summary>Gets or set the size of the cache entry value.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.SlidingExpiration">
      <summary>Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.ICacheEntry.Value">
      <summary>Gets or set the value of the cache entry.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.IMemoryCache">
      <summary>Represents a local in-memory cache whose values are not serialized.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry(System.Object)">
      <summary>Create or overwrite an entry in the cache.</summary>
      <param name="key">An object identifying the entry.</param>
      <returns>The newly created <see cref="T:Microsoft.Extensions.Caching.Memory.ICacheEntry" /> instance.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove(System.Object)">
      <summary>Removes the object associated with the given key.</summary>
      <param name="key">An object identifying the entry.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue(System.Object,System.Object@)">
      <summary>Gets the item associated with this key if present.</summary>
      <param name="key">An object identifying the requested entry.</param>
      <param name="value">The located value or null.</param>
      <returns>
        <see langword="true" /> if the key was found.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions" />
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Primitives.IChangeToken)">
      <summary>Expire the cache entry if the given <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> expires.</summary>
      <param name="options">The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
      <param name="expirationToken">The <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that causes the cache entry to expire.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)">
      <summary>The given callback will be fired after the cache entry is evicted from the cache.</summary>
      <param name="options">The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
      <param name="callback">The callback to register for calling after an entry is evicted.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)">
      <summary>The given callback will be fired after the cache entry is evicted from the cache.</summary>
      <param name="options">The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
      <param name="callback">The callback to register for calling after an entry is evicted.</param>
      <param name="state">The state to pass to the callback.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.DateTimeOffset)">
      <summary>Sets an absolute expiration date for the cache entry.</summary>
      <param name="options">The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
      <param name="absolute">The expiration time, in absolute terms.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)">
      <summary>Sets an absolute expiration time, relative to now.</summary>
      <param name="options">The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
      <param name="relative">The expiration time, relative to now.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)">
      <summary>Sets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.</summary>
      <param name="options">The option on which to set the priority.</param>
      <param name="priority">The <see cref="T:Microsoft.Extensions.Caching.Memory.CacheItemPriority" /> to set on the option.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSize(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.Int64)">
      <summary>Sets the size of the cache entry value.</summary>
      <param name="options">The options to set the entry size on.</param>
      <param name="size">The size to set on the <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)">
      <summary>Sets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).</summary>
      <param name="options">The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" />.</param>
      <param name="offset">The sliding expiration time.</param>
      <returns>The <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" /> so that additional calls can be chained.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions">
      <summary>Represents the cache options applied to an entry of the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> instance.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.AbsoluteExpiration">
      <summary>Gets or sets an absolute expiration date for the cache entry.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.AbsoluteExpirationRelativeToNow">
      <summary>Gets or sets an absolute expiration time, relative to now.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.ExpirationTokens">
      <summary>Gets the <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> instances which cause the cache entry to expire.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.PostEvictionCallbacks">
      <summary>Gets or sets the callbacks will be fired after the cache entry is evicted from the cache.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.Priority">
      <summary>Gets or sets the priority for keeping the cache entry in the cache during a
            memory pressure triggered cleanup. The default is <see cref="F:Microsoft.Extensions.Caching.Memory.CacheItemPriority.Normal" />.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.Size">
      <summary>Gets or sets the size of the cache entry value.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions.SlidingExpiration">
      <summary>Gets or sets how long a cache entry can be inactive (e.g. not accessed) before it will be removed.
            This will not extend the entry lifetime beyond the absolute expiration (if set).</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.PostEvictionCallbackRegistration" />
    <member name="M:Microsoft.Extensions.Caching.Memory.PostEvictionCallbackRegistration.#ctor" />
    <member name="P:Microsoft.Extensions.Caching.Memory.PostEvictionCallbackRegistration.EvictionCallback" />
    <member name="P:Microsoft.Extensions.Caching.Memory.PostEvictionCallbackRegistration.State" />
    <member name="T:Microsoft.Extensions.Caching.Memory.PostEvictionDelegate">
      <summary>Signature of the callback which gets called when a cache entry expires.</summary>
      <param name="key">The key of the entry being evicted.</param>
      <param name="value">The value of the entry being evicted.</param>
      <param name="reason">The <see cref="T:Microsoft.Extensions.Caching.Memory.EvictionReason" />.</param>
      <param name="state">The information that was passed when registering the callback.</param>
    </member>
  </members>
</doc>