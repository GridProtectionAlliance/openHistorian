<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GSF.Windows</name>
    </assembly>
    <members>
        <member name="T:GSF.Windows.ErrorManagement.ErrorDialog">
            <summary>
            Represents a dialog box that can be used to display detailed exception information.
            </summary>
            <seealso cref="T:GSF.Windows.ErrorManagement.ErrorLogger"/>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GSF.Windows.ErrorManagement.ErrorDialog"/> class.
            </summary>
        </member>
        <member name="F:GSF.Windows.ErrorManagement.ErrorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GSF.Windows.ErrorManagement.ErrorLogger">
             <summary>
             Represents a logger that can be used for logging handled as well as unhandled exceptions across multiple 
             application types (Windows Application, Console Application, Windows Service, Web Application, Web Service).
             </summary>
             <example>
             This example shows how to use the <see cref="T:GSF.Windows.ErrorManagement.ErrorLogger"/> component to log handled and unhandled exceptions:
             <code>
             using System;
             using System.IO;
             using GSF.Windows.ErrorManagement;
            
             class Program
             {
                 static ErrorLogger s_logger;
            
                 static Program()
                 {
                     s_logger = new ErrorLogger();
                     s_logger.LogToUI = true;                    // Show exception info on the UI.
                     s_logger.LogToFile = true;                  // Log exception info to a file.
                     s_logger.LogToEmail = true;                 // Send exception info in an e-mail.
                     s_logger.LogToEventLog = true;              // Log exception info to the event log.
                     s_logger.LogToScreenshot = true;            // Take a screenshot of desktop on exception.
                     s_logger.ContactEmail = "dev@email.com";    // Provide an e-mail address.
                     s_logger.HandleUnhandledException = true;   // Configure to handle unhandled exceptions.
                     s_logger.PersistSettings = true;            // Save settings to the config file.
                     s_logger.Initialize();                      // Initialize ErrorLogger component for use.
                 }
            
                 static void Main(string[] args)
                 {
                     try
                     {
                         // This may cause a handled FileNotFoundException if the file doesn't exist.
                         string data = File.ReadAllText(@"c:\NonExistentFile.txt");
                     }
                     catch (Exception ex)
                     {
                         // When logging handled exceptions we want to disable loggers (UI logger and E-mail logger) that
                         // may require interaction either directly or indirectly as it can be annoying. All the loggers
                         // are enabled automatically after the handled exception has been logged.
                         s_logger.SuppressInteractiveLogging();
                         s_logger.Log(ex);
                     }
            
                     int numerator = 1;
                     int denominator = 0;
                     int result = numerator / denominator;   // This will cause an unhandled DivideByZeroException.
            
                     Console.ReadLine();
                 }
             }
             </code>
             </example>
             <seealso cref="T:GSF.ErrorManagement.ErrorModule"/>
        </member>
        <member name="F:GSF.Windows.ErrorManagement.ErrorLogger.DefaultLogToScreenshot">
            <summary>
            Specifies the default value for the <see cref="P:GSF.Windows.ErrorManagement.ErrorLogger.LogToScreenshot"/> property.
            </summary>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GSF.Windows.ErrorManagement.ErrorLogger"/> class.
            </summary>
        </member>
        <member name="P:GSF.Windows.ErrorManagement.ErrorLogger.LogToScreenshot">
            <summary>
            Gets or sets a boolean value that indicates whether a screenshot of the user's desktop is to be taken
            when an <see cref="T:System.Exception"/> is logged.
            </summary>
            <remarks>
            This setting is ignored in Web Application and Web Service application types.
            </remarks>
        </member>
        <member name="P:GSF.Windows.ErrorManagement.ErrorLogger.Status">
            <summary>
            Gets the descriptive status of the <see cref="T:GSF.Windows.ErrorManagement.ErrorLogger"/> object.
            </summary>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.SaveSettings">
            <summary>
            Saves settings for the <see cref="T:GSF.Windows.ErrorManagement.ErrorLogger"/> object to the config file if the <see cref="P:GSF.ErrorManagement.ErrorLogger.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:GSF.ErrorManagement.ErrorLogger.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.LoadSettings">
            <summary>
            Loads saved settings for the <see cref="T:GSF.Windows.ErrorManagement.ErrorLogger"/> object from the config file if the <see cref="P:GSF.ErrorManagement.ErrorLogger.PersistSettings"/> 
            property is set to true.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:GSF.ErrorManagement.ErrorLogger.SettingsCategory"/> has a value of null or empty string.</exception>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.Register">
            <summary>
            Registers the <see cref="T:GSF.ErrorManagement.ErrorLogger"/> object to handle unhandled <see cref="T:System.Exception"/> if the 
            <see cref="P:GSF.ErrorManagement.ErrorLogger.HandleUnhandledException"/> property is set to true.
            </summary>
            <returns><c>true</c> if handlers were registered; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.Unregister">
            <summary>
            Unregister the <see cref="T:GSF.ErrorManagement.ErrorLogger"/> object from handling unhandled <see cref="T:System.Exception"/>.
            </summary>
            <returns><c>true</c> if handlers were unregistered; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.ExceptionToWindowsGui">
            <summary>
            Shows <see cref="T:System.Exception"/> information in a Windows Application.
            </summary>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.ExceptionToScreenshot(System.Exception)">
            <summary>
            Takes a screenshot of the user's desktop when the <see cref="T:System.Exception"/> is encountered.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> that was encountered.</param>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.GetEmailAttachments">
            <summary>
            Gets or sets the comma-separated or semicolon-separated list of file names to be attached to the <see cref="T:GSF.Net.Smtp.Mail"/> message.
            </summary>
        </member>
        <member name="M:GSF.Windows.ErrorManagement.ErrorLogger.GetExtendedMoreInfoText(System.String)">
            <summary>
            Allows other loggers to extend "more info text".
            </summary>
            <param name="bullet">Type of bullet to use for extended info text.</param>
        </member>
        <member name="T:GSF.Windows.Forms.AboutDialog">
            <summary>
            Represents a common about dialog box.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GSF.Windows.Forms.AboutDialog"/> class.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.HideDisclaimerTab">
            <summary>
            Conceals the tab where disclaimer text is displayed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.HideApplicationTab">
            <summary>
            Conceals the tab where application information is displayed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.HideAssembliesTab">
            <summary>
            Conceals the tab where assemblies and their information is displayed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.SetCompanyUrl(System.String)">
            <summary>
            Sets the URL that will be opened when the logo is clicked.
            </summary>
            <param name="url">URL of the company's home page.</param>
            <remarks></remarks>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.SetCompanyLogo(System.String)">
            <summary>
            Sets the logo that is to be displayed in the About Dialog.
            </summary>
            <param name="logoFile">Location of the logo file.</param>
            <remarks></remarks>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.SetCompanyLogo(System.IO.Stream)">
            <summary>
            Sets the logo that is to be displayed in the About Dialog.
            </summary>
            <param name="logoStream">System.IO.Stream of the logo.</param>
            <remarks></remarks>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.SetCompanyDisclaimer(System.String)">
            <summary>
            Sets the disclaimer text that is to be displayed in the About Dialog.
            </summary>
            <param name="disclaimerFile">Location of the file that contains the disclaimer text.</param>
            <remarks></remarks>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.SetCompanyDisclaimer(System.IO.Stream)">
            <summary>
            Sets the disclaimer text that is to be displayed in the About Dialog.
            </summary>
            <param name="disclaimerStream">System.IO.Stream of the disclaimer text.</param>
            <remarks></remarks>
        </member>
        <member name="F:GSF.Windows.Forms.AboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GSF.Windows.Forms.AboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GSF.Windows.Forms.ChartExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart"/>s.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.ChartExtensions.SetChartSize(System.Windows.Forms.DataVisualization.Charting.Chart,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Sets the size of the chart while also setting the font size of the
            axes and legend as well as the border width of each of the series.
            </summary>
            <param name="chart">The chart to be resized.</param>
            <param name="width">The new width of the chart.</param>
            <param name="height">The new height of the chart.</param>
            <param name="fontRatio">The ratio of chart height to font size.</param>
            <param name="borderRatio">The ratio of chart height to border width.</param>
        </member>
        <member name="M:GSF.Windows.Forms.ChartExtensions.ConvertToImageStream(System.Windows.Forms.DataVisualization.Charting.Chart,System.Windows.Forms.DataVisualization.Charting.ChartImageFormat)">
            <summary>
            Saves the chart to a memory stream using the given image
            <paramref name="format"/> and returns the stream, ready for reading.
            </summary>
            <param name="chart">The chart to be saved to the stream.</param>
            <param name="format">The format to used to save the image.</param>
            <returns>The stream containing the chart as an image.</returns>
        </member>
        <member name="T:GSF.Windows.Forms.FormExtensions">
            <summary>Extensions applied to all System.Windows.Forms.Form objects.</summary>
        </member>
        <member name="F:GSF.Windows.Forms.FormExtensions.LastWindowSizeSettingsCategory">
            <summary>
            Config file category under which the window size information will be saved.
            </summary>
        </member>
        <member name="F:GSF.Windows.Forms.FormExtensions.LastWindowLocationSettingsCategory">
            <summary>
            Config file category under which the window location information will be saved.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.SaveLayout(System.Windows.Forms.Form)">
            <summary>
            Saves the size and location information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size and location information is to be saved.</param>
            <remarks>This function simply calls the SaveWindowSize and SaveWindowLocation functions using the default settings categories</remarks>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.RestoreLayout(System.Windows.Forms.Form)">
            <summary>
            Restores the size and location of the specified windowsForm from the size and location information saved in the
            application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size and location is to be restored.</param>
            <remarks>This function simply calls the RestoreWindowSize and RestoreWindowLocation functions using the default settings categories</remarks>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.SaveSize(System.Windows.Forms.Form)">
            <summary>
            Saves the size information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size information is to be saved.</param>
            <remarks>This function uses the default settings category "LastWindowSize"</remarks>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.SaveSize(System.Windows.Forms.Form,System.String)">
            <summary>
            Saves the size information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size information is to be saved.</param>
            <param name="settingsCategory">Settings category used to persist form size information</param>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.SaveLocation(System.Windows.Forms.Form)">
            <summary>
            Saves the location information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location information is to be saved.</param>
            <remarks>This function uses the default settings category "LastWindowLocation"</remarks>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.SaveLocation(System.Windows.Forms.Form,System.String)">
            <summary>
            Saves the location information of the specified windowsForm to the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location information is to be saved.</param>
            <param name="settingsCategory">Settings category used to persist form location information</param>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.RestoreSize(System.Windows.Forms.Form)">
            <summary>
            Restores the size of the specified windowsForm from the size information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size is to be restored.</param>
            <remarks>This function uses the default settings category "LastWindowSize"</remarks>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.RestoreSize(System.Windows.Forms.Form,System.String)">
            <summary>
            Restores the size of the specified windowsForm from the size information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose size is to be restored.</param>
            <param name="settingsCategory">Settings category used to persist form size information</param>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.RestoreLocation(System.Windows.Forms.Form)">
            <summary>
            Restores the location of the specified windowsForm from the location information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location is to be restored.</param>
            <remarks>This function uses the default settings category "LastWindowLocation"</remarks>
        </member>
        <member name="M:GSF.Windows.Forms.FormExtensions.RestoreLocation(System.Windows.Forms.Form,System.String)">
            <summary>
            Restores the location of the specified windowsForm from the location information saved in the application configuration file.
            </summary>
            <param name="windowsForm">The Form whose location is to be restored.</param>
            <param name="settingsCategory">Settings category used to persist form location information</param>
        </member>
        <member name="T:GSF.Windows.Forms.NamespaceDoc">
            <summary>
            Contains classes, extension functions and forms used to simplify and standardize usage of basic Windows forms.
            </summary>
        </member>
        <member name="T:GSF.Windows.Forms.PropertyGridExtensions">
            <summary>
            Defines extension functions for the <see cref="T:System.Windows.Forms.PropertyGrid"/> control.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.PropertyGridExtensions.AdjustLabelRatio(System.Windows.Forms.PropertyGrid,System.Double)">
            <summary>
            Adjusts a property grid's label ratio
            </summary>
            <param name="grid">Property grid to adjust</param>
            <param name="ratio">Ratio to use use for label column</param>
            <remarks>
            <para>Smaller ratios (e.g., 1.75) produce a wider label column.</para>
            <para>
            This function only has an effect on property grids when their Visible property is set to True.  To use
            this on an initially hidden property grid - set the property grid's Visible property to True at design
            time, call this function during form load, then set the Visible property to False.
            </para>
            <para>
            This function was written to work with the .NET 2.0 PropertyGrid control.  Note that reflection is used
            to set private properties of the property grid and as a result this function may not work with future
            versions of the .NET property grid.
            </para>
            </remarks>
        </member>
        <member name="M:GSF.Windows.Forms.PropertyGridExtensions.AdjustCommentAreaHeight(System.Windows.Forms.PropertyGrid,System.Int32)">
            <summary>
            Adjusts a property grid's comment area height
            </summary>
            <param name="grid">Property grid to adjust</param>
            <param name="lines">Number of lines to display in comment area</param>
            <remarks>
            <para>
            This function only has an effect on property grids when their Visible property is set to True.  To use
            this on an initially hidden property grid - set the property grid's Visible property to True at design
            time, call this function during form load, then set the Visible property to False.
            </para>
            <para>
            This function was written to work with the .NET 2.0 PropertyGrid control.  Note that reflection is used
            to set private properties of the property grid and as a result this function may not work with future
            versions of the .NET property grid.
            </para>
            </remarks>
        </member>
        <member name="T:GSF.Windows.Forms.ScreenArea">
            <summary>Returns screen area statistics and capture functionality for all connected screens.</summary>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.LeftMostBound">
            <summary>
            Gets the least "x" coordinate of all screens on the system
            </summary>
            <returns>The smallest visible "x" screen coordinate</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.RightMostBound">
            <summary>
            Gets the greatest "x" coordinate of all screens on the system
            </summary>
            <returns>The largest visible "x" screen coordinate</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.TopMostBound">
            <summary>
            Gets the least "y" coordinate of all screens on the system
            </summary>
            <returns>The smallest visible "y" screen coordinate</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.BottomMostBound">
            <summary>
            Gets the greatest "y" coordinate of all screens on the system
            </summary>
            <returns>The largest visible "y" screen coordinate</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.MaximumWidth">
            <summary>
            Gets the width of the screen with the highest resolution.
            </summary>
            <returns>The width of the screen with the highest resolution.</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.MinimumWidth">
            <summary>
            Gets the width of the screen with the lowest resolution.
            </summary>
            <returns>The width of the screen with the lowest resolution.</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.MaximumHeight">
            <summary>
            Gets the height of the screen with the highest resolution.
            </summary>
            <returns>The height of the screen with the highest resolution.</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.MinimumHeight">
            <summary>
            Gets the height of the screen with the lowest resolution.
            </summary>
            <returns>The height of the screen with the lowest resolution.</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.TotalWidth">
            <summary>
            Gets the total width of all the screens relative to their arrangement.
            </summary>
            <returns>The total width of all the screens relative to their arrangement.</returns>
        </member>
        <member name="P:GSF.Windows.Forms.ScreenArea.TotalHeight">
            <summary>
            Gets the total height of all the screens relative to their arrangement.
            </summary>
            <returns>The total height of all the screens relative to their arrangement.</returns>
        </member>
        <member name="M:GSF.Windows.Forms.ScreenArea.Capture">
            <summary>
            Performs screen capture over all monitors.
            </summary>
            <returns>Captured screen image over all monitors.</returns>
            <remarks>
            Size captured will be for total width and height of all screens relative to their arrangement.
            An image square will be created large enough to cover all screens for the capture.
            </remarks>
        </member>
        <member name="M:GSF.Windows.Forms.ScreenArea.Capture(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Performs screen capture over all monitors.
            </summary>
            <param name="imageFormat">Desired <see cref="T:System.Drawing.Imaging.ImageFormat"/> for captured <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns>Captured screen image over all monitors.</returns>
            <remarks>
            Size captured will be for total width and height of all screens relative to their arrangement.
            An image square will be created large enough to cover all screens for the capture.
            </remarks>
        </member>
        <member name="M:GSF.Windows.Forms.ScreenArea.Capture(System.Windows.Forms.Screen)">
            <summary>
            Performs screen capture for given <see cref="T:System.Windows.Forms.Screen"/>.
            </summary>
            <param name="captureScreen">A <see cref="T:System.Windows.Forms.Screen"/> object to capture.</param>
            <returns>Captured screen image for given <see cref="T:System.Windows.Forms.Screen"/>.</returns>
        </member>
        <member name="M:GSF.Windows.Forms.ScreenArea.Capture(System.Windows.Forms.Screen,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Performs screen capture for given <see cref="T:System.Windows.Forms.Screen"/> and <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="captureScreen">Desired <see cref="T:System.Windows.Forms.Screen"/> to capture</param>
            <param name="imageFormat">Desired <see cref="T:System.Drawing.Imaging.ImageFormat"/> for captured <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns>Captured screen image for given <see cref="T:System.Windows.Forms.Screen"/>.</returns>
        </member>
        <member name="M:GSF.Windows.Forms.ScreenArea.Capture(System.Drawing.Rectangle)">
            <summary>
            Performs a screen capture the given <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="captureArea">Screen area <see cref="T:System.Drawing.Rectangle"/> to capture.</param>
            <returns>Captured screen image for given area.</returns>
        </member>
        <member name="M:GSF.Windows.Forms.ScreenArea.Capture(System.Drawing.Rectangle,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Performs a screen capture the given <see cref="T:System.Drawing.Rectangle"/> and <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="captureArea">Screen area <see cref="T:System.Drawing.Rectangle"/> to capture.</param>
            <param name="imageFormat">Desired <see cref="T:System.Drawing.Imaging.ImageFormat"/> for captured <see cref="T:System.Drawing.Bitmap"/>.</param>
            <returns>Captured screen image for given area.</returns>
        </member>
        <member name="T:GSF.Windows.Forms.SecureForm">
            <summary>
            Represents a windows form secured using role-based security.
            </summary>
            <example>
            Required config file entries:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="GSF.Configuration.CategorizedSettingsSection, GSF.Core" />
              </configSections>
              <categorizedSettings>
                <securityProvider>
                  <add name="ApplicationName" value="" description="Name of the application being secured as defined in the backend security datastore."
                    encrypted="false" />
                  <add name="ConnectionString" value="" description="Connection string to be used for connection to the backend security datastore."
                    encrypted="false" />
                  <add name="ProviderType" value="GSF.Security.LdapSecurityProvider, GSF.Security"
                    description="The type to be used for enforcing security." encrypted="false" />
                  <add name="IncludedResources" value="*Form*=*" description="Semicolon delimited list of resources to be secured along with role names."
                    encrypted="false" />
                  <add name="ExcludedResources" value="" description="Semicolon delimited list of resources to be excluded from being secured."
                    encrypted="false" />
                  <add name="NotificationSmtpServer" value="localhost" description="SMTP server to be used for sending out email notification messages."
                    encrypted="false" />
                  <add name="NotificationSenderEmail" value="sender@company.com" description="Email address of the sender of email notification messages." 
                    encrypted="false" />
                </securityProvider>
                <activeDirectory>
                  <add name="PrivilegedDomain" value="" description="Domain of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedUserName" value="" description="Username of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedPassword" value="" description="Password of privileged domain user account."
                    encrypted="true" />
                </activeDirectory>
              </categorizedSettings>
            </configuration>
            ]]>
            </code>
            </example>
            <seealso cref="T:GSF.Security.ISecurityProvider"/>
        </member>
        <member name="M:GSF.Windows.Forms.SecureForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GSF.Windows.Forms.SecureForm"/> class.
            </summary>
        </member>
        <member name="P:GSF.Windows.Forms.SecureForm.SecurityPrincipal">
            <summary>
            Gets current security principal for secure form.
            </summary>
        </member>
        <member name="P:GSF.Windows.Forms.SecureForm.ExceptionHandler">
            <summary>
            Gets or sets exception handler for secure form.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.SecureForm.GetResourceName">
            <summary>
            Gets the name of resource being accessed.
            </summary>
            <returns>Name of the resource being accessed.</returns>
        </member>
        <member name="F:GSF.Windows.Forms.SecureForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GSF.Windows.Forms.SecureForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GSF.Windows.Forms.SecureForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GSF.Windows.NamespaceDoc">
            <summary>
            Contains classes and extension functions related to .NET Windows-based platforms such as Windows Forms and WPF.
            </summary>
        </member>
        <member name="T:GSF.Windows.ResourceAccessiblityMode">
            <summary>
            Defines an enumeration of secure resource accessibility modes.
            </summary>
        </member>
        <member name="F:GSF.Windows.ResourceAccessiblityMode.Configurable">
            <summary>
            Resource security is controlled via configuration.
            </summary>
        </member>
        <member name="F:GSF.Windows.ResourceAccessiblityMode.AlwaysIncluded">
            <summary>
            Resource is always secured.
            </summary>
        </member>
        <member name="F:GSF.Windows.ResourceAccessiblityMode.AlwaysExcluded">
            <summary>
            Resource is never secured.
            </summary>
        </member>
        <member name="T:GSF.Windows.SecureWindow">
            <summary>
            Represents a WPF window secured using role-based security.
            </summary>
            <example>
            Required config file entries:
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <configuration>
              <configSections>
                <section name="categorizedSettings" type="GSF.Configuration.CategorizedSettingsSection, GSF.Core" />
              </configSections>
              <categorizedSettings>
                <securityProvider>
                  <add name="ApplicationName" value="" description="Name of the application being secured as defined in the backend security datastore."
                    encrypted="false" />
                  <add name="ConnectionString" value="" description="Connection string to be used for connection to the backend security datastore."
                    encrypted="false" />
                  <add name="ProviderType" value="GSF.Security.LdapSecurityProvider, GSF.Security"
                    description="The type to be used for enforcing security." encrypted="false" />
                  <add name="IncludedResources" value="*Window*=*" description="Semicolon delimited list of resources to be secured along with role names."
                    encrypted="false" />
                  <add name="ExcludedResources" value="" description="Semicolon delimited list of resources to be excluded from being secured."
                    encrypted="false" />
                  <add name="NotificationSmtpServer" value="localhost" description="SMTP server to be used for sending out email notification messages."
                    encrypted="false" />
                  <add name="NotificationSenderEmail" value="sender@company.com" description="Email address of the sender of email notification messages." 
                    encrypted="false" />
                </securityProvider>
                <activeDirectory>
                  <add name="PrivilegedDomain" value="" description="Domain of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedUserName" value="" description="Username of privileged domain user account."
                    encrypted="false" />
                  <add name="PrivilegedPassword" value="" description="Password of privileged domain user account."
                    encrypted="true" />
                </activeDirectory>
              </categorizedSettings>
            </configuration>
            ]]>
            </code>
            XAML to be used for the WPF window that inherits from <see cref="T:GSF.Windows.SecureWindow"/>:
            <code>
            <![CDATA[
            <src:SecureWindow x:Class="SecureWpfApplication.Window1"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                xmlns:src="clr-namespace:GSF.Windows;assembly=GSF.Windows"
                Title="Window1" Height="300" Width="300">
                <Grid>
            
                </Grid>
            </src:SecureWindow>
            ]]>
            </code>
            </example>
            <seealso cref="T:GSF.Security.ISecurityProvider"/>
        </member>
        <member name="M:GSF.Windows.SecureWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GSF.Windows.SecureWindow"/> class.
            </summary>
        </member>
        <member name="P:GSF.Windows.SecureWindow.ForceLoginDisplay">
            <summary>
            Gets or sets flags to force login display.
            </summary>
        </member>
        <member name="P:GSF.Windows.SecureWindow.ResourceAccessiblity">
            <summary>
            Gets or sets window's secure <see cref="T:GSF.Windows.ResourceAccessiblityMode"/>.
            </summary>
        </member>
        <member name="P:GSF.Windows.SecureWindow.IncludedRoles">
            <summary>
            Gets or sets applicable roles when <see cref="P:GSF.Windows.SecureWindow.ResourceAccessiblity"/> == <see cref="F:GSF.Windows.ResourceAccessiblityMode.AlwaysIncluded"/>.
            </summary>
        </member>
        <member name="P:GSF.Windows.SecureWindow.SecurityPrincipal">
            <summary>
            Gets or sets the security principal used to test authentication and role membership.
            </summary>
        </member>
        <member name="M:GSF.Windows.SecureWindow.GetResourceName">
            <summary>
            Gets the name of resource being accessed.
            </summary>
            <returns>Name of the resource being accessed.</returns>
        </member>
        <member name="F:GSF.Windows.SecureWindow.ForceLoginDisplayProperty">
            <summary>
            Identifies the <see cref="P:GSF.Windows.SecureWindow.ForceLoginDisplay"/> dependency property.
            </summary>
            <returns>identifier for the <see cref="P:GSF.Windows.SecureWindow.ForceLoginDisplay"/> dependency property.</returns>
        </member>
        <member name="F:GSF.Windows.SecureWindow.ResourceAccessiblityProperty">
            <summary>
            Identifies the <see cref="P:GSF.Windows.SecureWindow.ResourceAccessiblity"/> dependency property.
            </summary>
            <returns>identifier for the <see cref="P:GSF.Windows.SecureWindow.ResourceAccessiblity"/> dependency property.</returns>
        </member>
        <member name="F:GSF.Windows.SecureWindow.IncludedRolesProperty">
            <summary>
            Identifies the <see cref="P:GSF.Windows.SecureWindow.IncludedRoles"/> dependency property.
            </summary>
            <returns>identifier for the <see cref="P:GSF.Windows.SecureWindow.IncludedRoles"/> dependency property.</returns>
        </member>
        <member name="F:GSF.Windows.SecureWindow.SecurityPrincipalProperty">
            <summary>
            Identifies the <see cref="P:GSF.Windows.SecureWindow.SecurityPrincipal"/> dependency property.
            </summary>
            <returns>identifier for the <see cref="P:GSF.Windows.SecureWindow.SecurityPrincipal"/> dependency property.</returns>
        </member>
        <member name="T:GSF.Windows.DisplayType">
            <summary>
            Enumerable list of portlets to be displayed on the screen.
            </summary>
        </member>
        <member name="F:GSF.Windows.DisplayType.Login">
            <summary>
            Login screen.
            </summary>
        </member>
        <member name="F:GSF.Windows.DisplayType.AccessDenied">
            <summary>
            Access Denied screen.
            </summary>
        </member>
        <member name="F:GSF.Windows.DisplayType.ChangePassword">
            <summary>
            Change Password screen.
            </summary>
        </member>
        <member name="T:GSF.Windows.SecurityPortal">
            <summary>
            Represents a WPF window used to request user credentials and other security related information.
            </summary>
            <summary>
            SecurityPortal
            </summary>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.#ctor(GSF.Windows.SecureWindow,GSF.Windows.DisplayType)">
            <summary>
            Initializes a new WPF window.
            </summary>
            <param name="parent">Parent secure window reference.</param>
            <param name="displayType">Type of the message received from security API which is used to decide controls to be displayed on the screen.</param>
        </member>
        <member name="P:GSF.Windows.SecurityPortal.SecurityPrincipal">
            <summary>
            Gets the security principal used for role-based authorization.
            </summary>
        </member>
        <member name="P:GSF.Windows.SecurityPortal.ProviderFailure">
            <summary>
            Gets or sets flag that indicates if there was a failure during provider initialization.
            </summary>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ManageScreenVisualization">
            <summary>
            Displays requested screen section based on received request.
            </summary>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.DisplayStatusMessage(System.String)">
            <summary>
            Displays status message.
            </summary>
            <param name="message">Error message to display.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.DisplayErrorMessage(System.String,System.Windows.Media.Brush)">
            <summary>
            Displays error message.
            </summary>
            <param name="message">Error message to display.</param>
            <param name="color">Target color for error messages.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ClearErrorMessage">
            <summary>
            Clears error message.
            </summary>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.Window_Closed(System.Object,System.EventArgs)">
            <summary>
            Handles window closed.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.Window_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse down event anywhere on the screen so user can click and drag this window around.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonLogin_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Logins the user.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonAzAuth_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Attempts to logins user with Azure authentication.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonChange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Attempts to change user's password.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonExit_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Exits window.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonOK_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Closes window.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonForgotPasswordLink_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Displays help for the user on how to reset password.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonChangePasswordLink_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Navigates users to Change Password screen.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.ButtonLoginLink_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Navigates users back to Login screen.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.TextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Keeps the user names on the separate sections synchronized and clears error messages when text changes.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.PasswordBox_PasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Clears error messages when text changes.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.TextBox_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            We make sure all text boxes "select-all" when they receive focus.
            </summary>
            <param name="sender">Source of this event.</param>
            <param name="e">Arguments of this event.</param>
        </member>
        <member name="M:GSF.Windows.SecurityPortal.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
